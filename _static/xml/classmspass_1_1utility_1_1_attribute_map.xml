<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmspass_1_1utility_1_1_attribute_map" kind="class" language="C++" prot="public">
    <compoundname>mspass::utility::AttributeMap</compoundname>
    <includes refid="_attribute_map_8h" local="no">AttributeMap.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_attribute_map_1aa69adffd236ccf42ec87afdb34d7c419" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> &gt;</type>
        <definition>std::map&lt;std::string,AttributeProperties&gt; mspass::utility::AttributeMap::attributes</definition>
        <argsstring></argsstring>
        <name>attributes</name>
        <qualifiedname>mspass::utility::AttributeMap::attributes</qualifiedname>
        <briefdescription>
<para>Maps internal to external names. This object is little more than a wrapper around this Standard Template library map container. The map is keyed by the internal name used to for a particular parameter. Each internal name known to the object will have an <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> associated with it through this map (same as an associative array for perl and tcl geeks). The user will need to be familiar with the STL map container to deal with this object correctly. I made an intentional design decision to not hide this beast behind the interface because the STL has become a standardized component of C++. I took the attitude that STL would outlast my interface definition and cost of hiding this was too high in computational burden. The key thing a user must know is the proper way to retrieve an element from a map and handle the possibility that the requested item is not known to the map. Consult the web or the source code for libMsPASS if you don&apos;t know how to do this. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="116" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" bodystart="116" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_attribute_map_1ad8b90712c8d125020b2b86a0700fafba" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::list&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt;std::string,std::list&lt;std::string&gt; &gt; mspass::utility::AttributeMap::aliasmap</definition>
        <argsstring></argsstring>
        <name>aliasmap</name>
        <qualifiedname>mspass::utility::AttributeMap::aliasmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements aliases.</para>
<para>The map uses an alias name as the key and the list of strings are keys back to the public map to AttributePropeties. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="229" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" bodystart="229" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a3282c7d9e7472e1febde63658bcc5598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AttributeMap::AttributeMap</definition>
        <argsstring>()</argsstring>
        <name>AttributeMap</name>
        <qualifiedname>mspass::utility::AttributeMap::AttributeMap</qualifiedname>
        <briefdescription>
<para>Default constructor. The default assumes the css3.0 schema and will load the name definitions defined for that schema. <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="120" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" bodystart="214" bodyend="220"/>
        <references refid="classmspass_1_1utility_1_1_attribute_map_1a3282c7d9e7472e1febde63658bcc5598" compoundref="_attribute_map_8cc" startline="214" endline="220">AttributeMap</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a2233a03c6a1cdbbccc00720f81b5cca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AttributeMap::AttributeMap</definition>
        <argsstring>(const std::string tag)</argsstring>
        <name>AttributeMap</name>
        <qualifiedname>mspass::utility::AttributeMap::AttributeMap</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Create mapping for a specified namespace tag (usually a schema name). </para>
        </briefdescription>
        <detaileddescription>
<para>This is the normal constructor for this object. A one word tag is used to define a particular title to a namespace mapping. Normally this is a database schema name like css3.0 or Trace4.0, but the interface allows it to be anything. For example, although it isn&apos;t currently defined one could easily create a &quot;SacHeader&quot; definition that defined mapping between SAC header fields and an internal name convention. The interface simply assumes this keyword can be used to establish a mechanism for creating this beast through an unspecified mechanism. i.e. the interface is blind to the details and assumes what you want is to know how to map between A and B and someone else worried about the format for doing this already. In the current implementation we use an Antelope parameter file to create this object, but this interface does not depend upon that choice.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>name tag used to define this map (usually a schema name). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a214aa12322835675b7622c6b7f6d8ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AttributeMap::AttributeMap</definition>
        <argsstring>(const AttributeMap &amp;am0)</argsstring>
        <name>AttributeMap</name>
        <qualifiedname>mspass::utility::AttributeMap::AttributeMap</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_attribute_map" kindref="compound">AttributeMap</ref> &amp;</type>
          <declname>am0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="140" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" bodystart="230" bodyend="234"/>
        <references refid="classmspass_1_1utility_1_1_attribute_map_1aa69adffd236ccf42ec87afdb34d7c419" compoundref="_attribute_map_8h" startline="116">attributes</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a402e3b521f85b0f7d011c38aafee191b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_attribute_map" kindref="compound">AttributeMap</ref> &amp;</type>
        <definition>AttributeMap &amp; mspass::utility::AttributeMap::operator=</definition>
        <argsstring>(const AttributeMap &amp;am0)</argsstring>
        <name>operator=</name>
        <qualifiedname>mspass::utility::AttributeMap::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_attribute_map" kindref="compound">AttributeMap</ref> &amp;</type>
          <declname>am0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="142" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" bodystart="221" bodyend="229"/>
        <references refid="classmspass_1_1utility_1_1_attribute_map_1aa69adffd236ccf42ec87afdb34d7c419" compoundref="_attribute_map_8h" startline="116">attributes</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a3b308d94ea4122dc3f90aae8ad950ac8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref></type>
        <definition>AttributeProperties mspass::utility::AttributeMap::operator[]</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>mspass::utility::AttributeMap::operator[]</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fetch attribute properties by internal name key.</para>
<para>This is the more conventional interface and the bombproof version to fetch <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> using a specified key. It is safe because if the key does not match the map an exception will be thrown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the internal name for which properties are requested. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> that are defined for that name key. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the key is not found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="153" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" bodystart="325" bodyend="338"/>
        <references refid="classmspass_1_1utility_1_1_attribute_map_1aa69adffd236ccf42ec87afdb34d7c419" compoundref="_attribute_map_8h" startline="116">attributes</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a2f63cb8cd0d0836de3beeba798ead681" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref></type>
        <definition>AttributeProperties mspass::utility::AttributeMap::operator[]</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>mspass::utility::AttributeMap::operator[]</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overloaded operator for C strings constants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="155" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" bodystart="339" bodyend="344"/>
        <references refid="classmspass_1_1utility_1_1_attribute_map_1a3b308d94ea4122dc3f90aae8ad950ac8" compoundref="_attribute_map_8cc" startline="325" endline="338">operator[]</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a6891028b48319dc93a0a798757364536" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> &gt;</type>
        <definition>std::map&lt; std::string, AttributeProperties &gt; mspass::utility::AttributeMap::aliases</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>aliases</name>
        <qualifiedname>mspass::utility::AttributeMap::aliases</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of aliases for a key.</para>
<para>A universal issue in a relational database interface is that an attribute can occur in more than one table. One can give a fully qualified name through this interface, but it is often convenient to have a simple name (the alias) that is a shorthand for a particular instance of that attribute in one table. Further, it is sometimes useful to have a list of possible meanings for an alias that can be searched in order. Thus this method returns a list of <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> that are tied to an alias. The idea would be that the caller would try each member of this list in order before throwing an error. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alias</parametername>
</parameternamelist>
<parameterdescription>
<para>is the alias name to search. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>STL map of <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> that are aliases for the given keyword. The map is keyed by the table name. This provides a clean interface for output of attributes as it allows an output function to use an alias efficiently. The assumption in all cases is that the alias name provides the unique tag or an attribute. An application must avoid modifying attributes that are part of the alias definition. The alias name is the only one that should normally be assumed current. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>is thrown if an attribute listed in aliases is not defined for the <ref refid="classmspass_1_1utility_1_1_attribute_map" kindref="compound">AttributeMap</ref> itself. This always indicates an error in the definition of the <ref refid="classmspass_1_1utility_1_1_attribute_map" kindref="compound">AttributeMap</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="181" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a317f95eb543fb740c3a4f72fcb8513b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> &gt;</type>
        <definition>map&lt; string, AttributeProperties &gt; mspass::utility::AttributeMap::aliases</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>aliases</name>
        <qualifiedname>mspass::utility::AttributeMap::aliases</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overload for literals. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="183" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" bodystart="281" bodyend="286"/>
        <references refid="classmspass_1_1utility_1_1_attribute_map_1a6891028b48319dc93a0a798757364536">aliases</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1adc4ea0c8e4f1e95d5d27ca8e3d61c5be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt; std::string &gt; mspass::utility::AttributeMap::aliastables</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>aliastables</name>
        <qualifiedname>mspass::utility::AttributeMap::aliastables</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an ordered list of table names to try in extracting an alias named.</para>
<para>Aliases present an issue on input. Because many attribute names appear in multiple tables (an essential thing, in fact, for a relational database to work) input of an attribute that is a generic label for such an attribute can be problematic. This method returns an ordered list of tables that provide guidance for extracting an attribute defined by such a generic name. The order is very important as readers will generally need to try qualfied names for each table in the list returned by this method. Hence the order matters and the list should be inclusive but no longer than necessary as long lists could generate some overead problems in some situations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the alias name for which this information is desired. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list of table names in a recommended order of access. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>will be thrown if there are inconsistencies </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="200" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a4e0e3d5e3ef78ceb5d4d27491b185836" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>list&lt; string &gt; mspass::utility::AttributeMap::aliastables</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>aliastables</name>
        <qualifiedname>mspass::utility::AttributeMap::aliastables</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overload for literals </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="202" column="19" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" bodystart="319" bodyend="324"/>
        <references refid="classmspass_1_1utility_1_1_attribute_map_1adc4ea0c8e4f1e95d5d27ca8e3d61c5be">aliastables</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1ad60bebd12b9f3ca2aa5254c451b7bd1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::AttributeMap::is_alias</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>is_alias</name>
        <qualifiedname>mspass::utility::AttributeMap::is_alias</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if an attribute name is an alias.</para>
<para>For efficiency and convience it is useful to have a simple way to ask if an attribute name is defined as an alias. This abstracts this process. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the attribute name to be tested. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if key is an alias. Otherwise return false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="211" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1aa3c8d949716c73c516a7cf9f83af8db1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::AttributeMap::is_alias</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>is_alias</name>
        <qualifiedname>mspass::utility::AttributeMap::is_alias</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overloaded for string literal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="213" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" bodystart="241" bodyend="244"/>
        <references refid="classmspass_1_1utility_1_1_attribute_map_1ad60bebd12b9f3ca2aa5254c451b7bd1e">is_alias</references>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_map_1a0ebdf9d44b25321e0997e497112569db" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AttributeMap::AttributeMap</definition>
        <argsstring>(const AntelopePf &amp;pf, const std::string name)</argsstring>
        <name>AttributeMap</name>
        <qualifiedname>mspass::utility::AttributeMap::AttributeMap</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> &amp;</type>
          <declname>pf</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parameter file driven constructor. Builds this object from an Antelope parameter file. Parses the parameter for for a Tbl that is processed line by line to calling the basic constructor for an <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> with one <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> object created for each entry in the associated Tbl. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pf</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter file object created from a pf file that is be parsed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of Tbl to be parse. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="224" column="1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>An object to map internal and external attribute names. </para>
    </briefdescription>
    <detaileddescription>
<para>This object is used to link a set of internally defined parameters tagged with a name to an external name convention. The working model for external names is attribute names defined in a relational database schema, but the concept involved is more general. That is, the intent of this interface is a general way to between one set of parameter names and another. This could be used, for example, to map between header variable names in SEGY or SAC and some internal name convention. The relation of the map defined by this object is implicitly assumed to be one-to-one because of the use of the STL map to define the relationship. Because the map is keyed by the internal name lookup is also intended only for finding the external names associated with a particular internal parameter. The primary use of this object in the MsPASS library is to define a global mapping operator for a particular database schema. That is, the most common construct is to build this object early on using a call like: <ref refid="classmspass_1_1utility_1_1_attribute_map" kindref="compound">AttributeMap</ref>(&quot;css3.0&quot;). </para>
    </detaileddescription>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" line="98" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeMap.h" bodystart="99" bodyend="230"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a6891028b48319dc93a0a798757364536" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>aliases</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a317f95eb543fb740c3a4f72fcb8513b9" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>aliases</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1ad8b90712c8d125020b2b86a0700fafba" prot="private" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>aliasmap</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1adc4ea0c8e4f1e95d5d27ca8e3d61c5be" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>aliastables</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a4e0e3d5e3ef78ceb5d4d27491b185836" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>aliastables</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a3282c7d9e7472e1febde63658bcc5598" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>AttributeMap</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a2233a03c6a1cdbbccc00720f81b5cca2" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>AttributeMap</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a214aa12322835675b7622c6b7f6d8ac4" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>AttributeMap</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a0ebdf9d44b25321e0997e497112569db" prot="private" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>AttributeMap</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1aa69adffd236ccf42ec87afdb34d7c419" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>attributes</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1ad60bebd12b9f3ca2aa5254c451b7bd1e" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>is_alias</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1aa3c8d949716c73c516a7cf9f83af8db1" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>is_alias</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a402e3b521f85b0f7d011c38aafee191b" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a3b308d94ea4122dc3f90aae8ad950ac8" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>operator[]</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_map_1a2f63cb8cd0d0836de3beeba798ead681" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeMap</scope><name>operator[]</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
