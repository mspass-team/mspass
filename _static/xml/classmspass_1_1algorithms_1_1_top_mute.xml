<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmspass_1_1algorithms_1_1_top_mute" kind="class" language="C++" prot="public">
    <compoundname>mspass::algorithms::TopMute</compoundname>
    <includes refid="_taper_8h" local="no">Taper.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmspass_1_1algorithms_1_1_top_mute_1aecea2d8a3d79cb361e89c52b34136baa" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classmspass_1_1algorithms_1_1_basic_taper" kindref="compound">BasicTaper</ref> &gt;</type>
        <definition>std::shared_ptr&lt;BasicTaper&gt; mspass::algorithms::TopMute::taper</definition>
        <argsstring></argsstring>
        <name>taper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="243" column="19" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1ac096036720ef3eeeb06510b222caca01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::algorithms::TopMute::TopMute</definition>
        <argsstring>()</argsstring>
        <name>TopMute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Exists but the result is invalid </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="199" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1a284ed62302cd142afa8aca61c7fe571b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::algorithms::TopMute::TopMute</definition>
        <argsstring>(const double t0, const double t1, const std::string type)</argsstring>
        <name>TopMute</name>
        <param>
          <type>const double</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Primary constructor driven by a named keyword. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the normal constructor most users will want to us. It is defined by a time range for the mute to ramp from 0 to 1 and a string matching one of the supported types. Note the mspass <ref refid="classmspass_1_1algorithms_1_1_vector_taper" kindref="compound">VectorTaper</ref> cannot be used for this constructor because it requires more than 2 arguments to be defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t0</parametername>
</parameternamelist>
<parameterdescription>
<para>is the end of the zeroed time range. Date from the first sample to this value will be zeroed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t1</parametername>
</parameternamelist>
<parameterdescription>
<para>end ramp. Data with t&gt;t1 will be unaltered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the type of taper desired. Current options are &apos;linear&apos; and &apos;cosine&apos;. They enable the <ref refid="classmspass_1_1algorithms_1_1_linear_taper" kindref="compound">LinearTaper</ref> and <ref refid="classmspass_1_1algorithms_1_1_cosine_taper" kindref="compound">CosineTaper</ref> opeators respectively.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>This</parametername>
</parameternamelist>
<parameterdescription>
<para>function will throw a MsPASSError if t1&lt;=t0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="217" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="425" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1a1abf4a2d778c70605ce11b75d1c80ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::algorithms::TopMute::TopMute</definition>
        <argsstring>(const TopMute &amp;parent)</argsstring>
        <name>TopMute</name>
        <param>
          <type>const <ref refid="classmspass_1_1algorithms_1_1_top_mute" kindref="compound">TopMute</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="219" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="455" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1a2876093ac8e1862b706848170ff5060b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::algorithms::TopMute::~TopMute</definition>
        <argsstring>()</argsstring>
        <name>~TopMute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. The destructor of this class is not null. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="221" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="422" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1a1e540792dcf890d85dcf762cfde24ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1algorithms_1_1_top_mute" kindref="compound">TopMute</ref> &amp;</type>
        <definition>TopMute &amp; mspass::algorithms::TopMute::operator=</definition>
        <argsstring>(const TopMute &amp;parent)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmspass_1_1algorithms_1_1_top_mute" kindref="compound">TopMute</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="223" column="11" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="458" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1ad573529bb5a0e2eed0a1f8c704b81fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::algorithms::TopMute::apply</definition>
        <argsstring>(mspass::seismic::TimeSeries &amp;d)</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the operator to a TimeSeries object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="225" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="466" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1aa67fde0a3990c0822f27ab24b8a9ea90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::algorithms::TopMute::apply</definition>
        <argsstring>(mspass::seismic::Seismogram &amp;d)</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the operator to a Seismogram object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="227" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="474" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1a14ab2f6a0d8ca0af6744bd40a608ceaa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::algorithms::TopMute::get_t0</definition>
        <argsstring>() const</argsstring>
        <name>get_t0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the start of mute taper - points with time &lt; this number are zeroed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="229" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" bodystart="229" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1aba2e555b9a97ff006033d39d7b31267b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::algorithms::TopMute::get_t1</definition>
        <argsstring>() const</argsstring>
        <name>get_t1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the end time of the mute taper - points after this point are unaltered by the mute. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="232" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" bodystart="232" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_top_mute_1a3e947b3a9c6098695c60bdf3b559bd18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::algorithms::TopMute::taper_type</definition>
        <argsstring>() const</argsstring>
        <name>taper_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a string with a name describing the form of the taper - currently returns either linear or cosine </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="235" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="488" bodyend="502"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Mute operator for &quot;top&quot; of signals defined first smaple forward. </para>
    </briefdescription>
    <detaileddescription>
<para>A top mute is very commonly used in a many forms of seismic processing. It is, for example, a very low level operation in traditional seismic reflection processing. A top mute zeros the front (forward in time from first sample) of the signal and ramps up to a multiplier of 1 (does nothing) at some later time. It can also be thought of as a taper with only the low side altered. The implementation, in fact, uses the family of mspass taper operators internally the the high time range (tail) turned off.</para>
<para>The main constructor uses a string keyword to select the type of tapering applied to define the mute. Because of the relationship to mspass tapers there is also a constructor using the base class for Taper objects. It allows custom implementations of taper beyond those associated with keywords in the definition passed to the main constructor. </para>
    </detaileddescription>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" line="195" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Taper.h" bodystart="196" bodyend="258"/>
    <listofallmembers>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1ad573529bb5a0e2eed0a1f8c704b81fd6" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>apply</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1aa67fde0a3990c0822f27ab24b8a9ea90" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>apply</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1a14ab2f6a0d8ca0af6744bd40a608ceaa" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>get_t0</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1aba2e555b9a97ff006033d39d7b31267b" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>get_t1</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1a1e540792dcf890d85dcf762cfde24ee9" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>operator=</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1aecea2d8a3d79cb361e89c52b34136baa" prot="private" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>taper</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1a3e947b3a9c6098695c60bdf3b559bd18" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>taper_type</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1ac096036720ef3eeeb06510b222caca01" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>TopMute</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1a284ed62302cd142afa8aca61c7fe571b" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>TopMute</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1a1abf4a2d778c70605ce11b75d1c80ddb" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>TopMute</name></member>
      <member refid="classmspass_1_1algorithms_1_1_top_mute_1a2876093ac8e1862b706848170ff5060b" prot="public" virt="non-virtual"><scope>mspass::algorithms::TopMute</scope><name>~TopMute</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
