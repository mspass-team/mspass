<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmspass_1_1seismic_1_1_logging_ensemble" kind="class" language="C++" prot="public">
    <compoundname>mspass::seismic::LoggingEnsemble</compoundname>
    <basecompoundref refid="classmspass_1_1seismic_1_1_ensemble" prot="public" virt="non-virtual">mspass::seismic::Ensemble&lt; T &gt;</basecompoundref>
    <includes refid="_ensemble_8h" local="no">Ensemble.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_logging_ensemble_1a805180a6091e44e3ccb1e53c8576ea5a" prot="public" static="no" mutable="no">
        <type><ref refid="classmspass_1_1utility_1_1_error_logger" kindref="compound">mspass::utility::ErrorLogger</ref></type>
        <definition>mspass::utility::ErrorLogger mspass::seismic::LoggingEnsemble&lt; T &gt;::elog</definition>
        <argsstring></argsstring>
        <name>elog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard mspass container for holding error logs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="144" column="32" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_logging_ensemble_1a521a3c03f39b4c2046e73723aa7e4355" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mspass::seismic::LoggingEnsemble&lt; T &gt;::ensemble_is_live</definition>
        <argsstring></argsstring>
        <name>ensemble_is_live</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="266" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1a3bb4144f662b8a7e3f3d077c10d0d643" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::LoggingEnsemble&lt; T &gt;::LoggingEnsemble</definition>
        <argsstring>()</argsstring>
        <name>LoggingEnsemble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Initializes all pieces with default constructor and marks the ensemble dead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="147" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1ab587f8981a828a4fbfefb2a7f6c61f8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::LoggingEnsemble&lt; T &gt;::LoggingEnsemble</definition>
        <argsstring>(const size_t n)</argsstring>
        <name>LoggingEnsemble</name>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reserve slots but otherwise create and empty ensemble marked dead.</para>
<para>This constructor is a minor variant from the default constructor that calls reserve to set aside n slotes for the data. Use this one when you know the size of the ensemble you want to create. Note after the ensemble, like the default constructor, is marked initially as dead. The user must call the set_live method of this ensemble after loading data or downstream processors may drop the data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="163" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1a37b14e0de1410d987f651d91a5a028b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::LoggingEnsemble&lt; T &gt;::LoggingEnsemble</definition>
        <argsstring>(const mspass::utility::Metadata &amp;md, const size_t n)</argsstring>
        <name>LoggingEnsemble</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">mspass::utility::Metadata</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a framework for the ensemble with metadata.</para>
<para>This constructor loads the metadata received into the ensmeble area and reserves n slots to be added. Be warned it marks the ensemble dead. Once valid data are loaded the user should call the set_live method for the ensemble to prevent the data from being ignored downstream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="173" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="173" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1a3095395112d63700e473ef4e6afa00f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::LoggingEnsemble&lt; T &gt;::LoggingEnsemble</definition>
        <argsstring>(const mspass::utility::Metadata &amp;md, const mspass::utility::ErrorLogger &amp;elogin, const size_t ndata)</argsstring>
        <name>LoggingEnsemble</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">mspass::utility::Metadata</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_error_logger" kindref="compound">mspass::utility::ErrorLogger</ref> &amp;</type>
          <declname>elogin</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>ndata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct from all pieces.</para>
<para>This constructor was added for the python interface. It is a helpful construct for the pickle interface. It is unlikely to be of interest in a C++ application. Calls reserve only for member vector but but does not insert data - detail of the pickle implementation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="186" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="186" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1ada03de0d9a3e1b1168ee0b77738fc023" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::LoggingEnsemble&lt; T &gt;::LoggingEnsemble</definition>
        <argsstring>(const LoggingEnsemble&lt; T &gt; &amp;parent)</argsstring>
        <name>LoggingEnsemble</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">LoggingEnsemble</ref>&lt; T &gt; &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="192" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1a2b0feca40a0c20f19d5ad4431bf5acbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::LoggingEnsemble&lt; T &gt;::LoggingEnsemble</definition>
        <argsstring>(const Ensemble&lt; T &gt; &amp;parent)</argsstring>
        <name>LoggingEnsemble</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_ensemble" kindref="compound">Ensemble</ref>&lt; T &gt; &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clone from a base class <ref refid="classmspass_1_1seismic_1_1_ensemble" kindref="compound">Ensemble</ref>. Initializes error null and sets live. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="198" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1a41768cde10b3097bf91e69014d90a3c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::LoggingEnsemble&lt; T &gt;::kill</definition>
        <argsstring>()</argsstring>
        <name>kill</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Markt the entire ensemble bad. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="204" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1ac116a50f1dabe119817a6e7ffa7a8955" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::LoggingEnsemble&lt; T &gt;::live</definition>
        <argsstring>() const</argsstring>
        <name>live</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Getter to test if the ensemble has any valid data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="206" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1af51f2767027498eea2e29a6eee70bb52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::LoggingEnsemble&lt; T &gt;::dead</definition>
        <argsstring>() const</argsstring>
        <name>dead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Complement to live method - returns true if there are no valid data members. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="208" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1a7de59947da7bc5e8e4a4be2fbe01b93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::LoggingEnsemble&lt; T &gt;::validate</definition>
        <argsstring>()</argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check to see if ensemble has any live data.</para>
<para>In processing one can occasionally (not rare but not common either) end up with enemble full of data marked dead. This is a convenience method to check all members. If it finds any live member it will immediately return true (ok). If after a search of the entire ensemble no live members are found it will return false AND then mark the entire ensemble bad. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="216" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="269" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1a77c6b189bfb9914583e66d8b0f98d3b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::LoggingEnsemble&lt; T &gt;::set_live</definition>
        <argsstring>()</argsstring>
        <name>set_live</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Force, with care, the ensemble to be marked live.</para>
<para>This extension of CoreEnsemble adds a boolean that is used to test if an entire ensemble should be treated as dead or alive. It first runs the validate method. If validate is false it refuses to set the state live and returns false. If validate returns true it will return true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="224" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="224" bodyend="232"/>
        <references refid="classmspass_1_1seismic_1_1_logging_ensemble_1a7de59947da7bc5e8e4a4be2fbe01b93b" compoundref="_ensemble_8h" startline="269" endline="276">mspass::seismic::LoggingEnsemble&lt; T &gt;::validate</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1aef481afd8b831f780707b4b11302dc90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">LoggingEnsemble</ref>&lt; T &gt; &amp;</type>
        <definition>LoggingEnsemble&lt;T&gt;&amp; mspass::seismic::LoggingEnsemble&lt; T &gt;::operator=</definition>
        <argsstring>(const LoggingEnsemble&lt; T &gt; &amp;parent)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">LoggingEnsemble</ref>&lt; T &gt; &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="235" column="19" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="235" bodyend="246"/>
        <references refid="classmspass_1_1seismic_1_1_logging_ensemble_1a805180a6091e44e3ccb1e53c8576ea5a" compoundref="_ensemble_8h" startline="144">mspass::seismic::LoggingEnsemble&lt; T &gt;::elog</references>
        <references refid="classmspass_1_1seismic_1_1_ensemble_1a50f9947d9209dda797f1b7fe2b4ba81f" compoundref="_ensemble_8h" startline="21">mspass::seismic::Ensemble&lt; Tdata &gt;::member</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" compoundref="_metadata_8cc" startline="108" endline="116">mspass::utility::Metadata::operator=</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_logging_ensemble_1a3f88e04c5ded5bf7e5225f2d99ce7267" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mspass::seismic::LoggingEnsemble&lt; T &gt;::memory_use</definition>
        <argsstring>() const</argsstring>
        <name>memory_use</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="247" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="247" bodyend="263"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Template class that extends <ref refid="classmspass_1_1seismic_1_1_ensemble" kindref="compound">Ensemble</ref> to include an error log and live tests. </para>
    </briefdescription>
    <detaileddescription>
<para>This class extends the <ref refid="classmspass_1_1seismic_1_1_ensemble" kindref="compound">Ensemble</ref> class defined in MsPASS for bundling collections of data that can be pushed to an std::vector container. The class is actually very generic, but mspass defines it for <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> and <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref> objects. This class is a necessary extension for an algorithm that take ensembles in and emits a different ensemble. In that situation we need a way to indicate the entire ensemble is invalid and not be to used and post error messages that give an explanation of why the output is invalid. This class provides that mechanism by adding a <ref refid="classmspass_1_1utility_1_1_error_logger" kindref="compound">mspass::utility::ErrorLogger</ref> and a (private) boolean defining if the ensemble has valid data. That makes the API to a <ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">LoggingEnsemble</ref> a hybrid with the atomic <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref> and <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> objects (adds the dna of ErrorLogger and live/dead concept).</para>
<para>A secondary fundamental reason this class can be needed is to parallelize algorithms that emit an ensemble (regardless of inputs). The live/dead tests and error logger make the handlers consistent with the atomic objects of mspass. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>mspass::seismic::LoggingEnsemble&lt; T &gt;</label>
        <link refid="classmspass_1_1seismic_1_1_logging_ensemble"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
      <node id="2">
        <label>mspass::seismic::Ensemble&lt; T &gt;</label>
        <link refid="classmspass_1_1seismic_1_1_ensemble"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>mspass::seismic::LoggingEnsemble&lt; T &gt;</label>
        <link refid="classmspass_1_1seismic_1_1_logging_ensemble"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elog</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>mspass::utility::ErrorLogger</label>
        <link refid="classmspass_1_1utility_1_1_error_logger"/>
      </node>
      <node id="4">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
      <node id="2">
        <label>mspass::seismic::Ensemble&lt; T &gt;</label>
        <link refid="classmspass_1_1seismic_1_1_ensemble"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" line="140" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/Ensemble.h" bodystart="141" bodyend="267"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa288eb54e6fafb8af13f71e2f3dce4a2" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>append_chain</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af9aea7916d2b11f9f1e94b7d84b8db23" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>begin</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1aaaf0bfa2db3d54e83213c2d5364fd7c3" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>catch</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1aaaf0bfa2db3d54e83213c2d5364fd7c3" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>catch</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a20c1da469f6e0a073b291a680425f9e8" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>change_key</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1abaa3b11bec830a2ab4f93e79623af591" prot="protected" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>changed_or_set</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a610962d5ca59e48d1b2833e613bbad1d" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>clear_modified</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1af51f2767027498eea2e29a6eee70bb52" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>dead</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a805180a6091e44e3ccb1e53c8576ea5a" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>elog</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7f1e227ec1acaab97343ecbf47bedac4" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>end</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1a12693d17a307b72ee3263b34eaa49a41" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>Ensemble</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1aa3206817575b4239ec80237b3f4f837b" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>Ensemble</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1ae61caab62fca548faddc8c2a274b7668" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>Ensemble</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1af9d4e39db1491f8aac9d9227440216de" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>Ensemble</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a521a3c03f39b4c2046e73723aa7e4355" prot="private" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>ensemble_is_live</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a096d3ea32cc03c3f9ae9c69cd9ee28ba" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>erase</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5d6876ed25c3f5d93052239ec828a3c5" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a991516933477580b6b59dd578819df06" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>get_any</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a2631da9d437572ee0781ed9bd96a3ed3" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>get_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad69a5786d997104df560775f4f688b02" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>get_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a78f3a01e1b1deccd84a0833bea4ef462" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>get_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7ace0c05ebb00b3c383cb8cccd225504" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>get_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa56da98a52f03babd67bf9fb55c40f3a" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>get_string</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>is_defined</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a52e2040555616a39b900aa0831c3bd10" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>keys</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a41768cde10b3097bf91e69014d90a3c5" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>kill</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1ac116a50f1dabe119817a6e7ffa7a8955" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>live</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a3bb4144f662b8a7e3f3d077c10d0d643" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>LoggingEnsemble</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1ab587f8981a828a4fbfefb2a7f6c61f8d" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>LoggingEnsemble</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a37b14e0de1410d987f651d91a5a028b8" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>LoggingEnsemble</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a3095395112d63700e473ef4e6afa00f8" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>LoggingEnsemble</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1ada03de0d9a3e1b1168ee0b77738fc023" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>LoggingEnsemble</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a2b0feca40a0c20f19d5ad4431bf5acbd" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>LoggingEnsemble</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af564bb9ced4cc480d71a1e13c3fa582e" prot="protected" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>md</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1a50f9947d9209dda797f1b7fe2b4ba81f" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>member</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a3f88e04c5ded5bf7e5225f2d99ce7267" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>memory_use</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a4a87cd6a6f8fc5cdbee65cb85958cb2c" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5255fc3ae6accb650f221c9065a92eff" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afa617529be5501b6b059091118a1a51f" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a0fec2640022e944afe1ae1180e741da5" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>modified</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afbd50c491ecc4d42cf2b4213b8bc3327" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>operator+</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afadcdb42814abc1448a78d1d9f3d44aa" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>operator+=</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1aef481afd8b831f780707b4b11302dc90" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1a9bbd6973446b481568db91fbe81d365d" prot="public" virt="non-virtual" ambiguityscope="Ensemble&lt; T &gt;::"><scope>mspass::seismic::LoggingEnsemble</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::seismic::LoggingEnsemble</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1aa22da9d7d189ad4cb76388e2034c2566" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>operator[]</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab2162ed3e7349998ee06ace77645bf77" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aec776bbbbf8528903432d9b30d1272d8" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aefee14db8cda9c7143a0eb7bf2d1be1f" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a11ef6cbc1adec7964e2d9c3a4ead15b1" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab3989b1152e9b7b3dcce36aaec89f46d" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1adc016a9bb2288f1f0a7687cfa6844ceb" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa60d283b9eaae245294914557c723c30" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a45c295b33cdbcc297b7429235b81de9a" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1add02049febdc316d70d0fb62e96b2e36" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aafaa017f0e16f37a81a6abdb406a1e08" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5fe91d35373564958386f08915b7ce3c" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab1ede27ae9810767832f0879ccbfd234" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa8402af6778236df398ff0fe25911e21" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put_object</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5efd5678db951e3517c5667fefe93ddf" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>put_string</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a77c6b189bfb9914583e66d8b0f98d3b8" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>set_live</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a153ca69299a4d70aa0c6e69e8c70a767" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>size</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1a788a64b6210d1fa08885c7cdc13a0cb7" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>sync_metadata</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1a3613a03fdb3789149b811ef0240a5516" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>sync_metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad5cd3bfc81c7fccd83bbb30ef1c2774c" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>type</name></member>
      <member refid="classmspass_1_1seismic_1_1_ensemble_1a5eabbab400143c3e3182fb82fe000312" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>update_metadata</name></member>
      <member refid="classmspass_1_1seismic_1_1_logging_ensemble_1a7de59947da7bc5e8e4a4be2fbe01b93b" prot="public" virt="non-virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>validate</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_metadata_1a1d7a9ab1e25e01694cc733ad2b98c6b7" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>~BasicMetadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a6d06560c0b169240031c6a274dc7990f" prot="public" virt="virtual"><scope>mspass::seismic::LoggingEnsemble</scope><name>~Metadata</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
