<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmspass_1_1algorithms_1_1_butterworth" kind="class" language="C++" prot="public">
    <compoundname>mspass::algorithms::Butterworth</compoundname>
    <includes refid="_butterworth_8h" local="no">Butterworth.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmspass_1_1algorithms_1_1_butterworth_1acf431483bfab1a07524d72d2815af6df" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mspass::algorithms::Butterworth::use_lo</definition>
        <argsstring></argsstring>
        <name>use_lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="352" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1algorithms_1_1_butterworth_1a233b8c6a1617d3e6dcb98ca0368132b2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mspass::algorithms::Butterworth::use_hi</definition>
        <argsstring></argsstring>
        <name>use_hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="352" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1algorithms_1_1_butterworth_1a3be8316c5785f90f05f5ff45bb0c4567" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mspass::algorithms::Butterworth::zerophase</definition>
        <argsstring></argsstring>
        <name>zerophase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="353" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1algorithms_1_1_butterworth_1aad7c62ca83e94661e26f6be842b9c218" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::algorithms::Butterworth::f3db_lo</definition>
        <argsstring></argsstring>
        <name>f3db_lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="359" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1algorithms_1_1_butterworth_1a97caa0ac0b25fbf3f030bb961c8452a5" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::algorithms::Butterworth::f3db_hi</definition>
        <argsstring></argsstring>
        <name>f3db_hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="359" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1algorithms_1_1_butterworth_1a747cd3b41dad367d538f9d80dac9787c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int mspass::algorithms::Butterworth::npoles_lo</definition>
        <argsstring></argsstring>
        <name>npoles_lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="360" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1algorithms_1_1_butterworth_1a1bb3251cd8f167c838cb17eeb1422f9d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int mspass::algorithms::Butterworth::npoles_hi</definition>
        <argsstring></argsstring>
        <name>npoles_hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="360" column="17" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1algorithms_1_1_butterworth_1a4a38de772f8eddfd860ac676f9a03b3f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::algorithms::Butterworth::dt</definition>
        <argsstring></argsstring>
        <name>dt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="361" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a89009fa487f8a4090c5bce0c4af662cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::algorithms::Butterworth::Butterworth</definition>
        <argsstring>()</argsstring>
        <name>Butterworth</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The default constructor does not define a null. The default generates an antialiasing filter identical to the default in the antialias function in seismic unix. That is it produces a low pass filter with a band edge (pass parameter) at 60% of Nyquist and a stop edge at Nyquist. It then calls the su bfdesign function to compute the number of poles and the 3db frequency of the corner to define this filter. These can be retrieved with getters (see below) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="48" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="20" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1afb02193564836b8f7396a9acab24a50e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::algorithms::Butterworth::Butterworth</definition>
        <argsstring>(const bool zerophase, const bool enable_lo, const bool enable_hi, const double fstoplo, const double astoplo, const double fpasslo, const double apasslo, const double fpasshi, const double apasshi, const double fstophi, const double astophi, const double sample_interval)</argsstring>
        <name>Butterworth</name>
        <param>
          <type>const bool</type>
          <declname>zerophase</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>enable_lo</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>enable_hi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fstoplo</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>astoplo</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fpasslo</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>apasslo</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fpasshi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>apasshi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fstophi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>astophi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sample_interval</declname>
        </param>
        <briefdescription>
<para>Fully parameterized constructor with args similar to subfilt. </para>
        </briefdescription>
        <detaileddescription>
<para>A butterworth filter can be described two ways: (1) corner frequency and number of poles and (2) by band stop and band frequencies. This constructor is used to define the filter by stop and pass band parameters. Frequencies must satisfy fstoplo&lt;fpasslo and fpasshi&lt;fstophi as the four frequencis define a bandd pass between the fpasslo and fpasshi. The stop frequencies define where the response should near zero. Thus for band pass filters the apasslo and apasshi should be 1 and the stop Amplitudes a small number like 0.01. For a band reject filter set stop amplitudes to 1 and pass amplitudes to small numbers like 0.01. (For a reject filter the pass frequencies act like stop frequencies for a bandbpass filer - this is mostly like the subfilt seismic unix program). The booleans control which terms are enabld. When enable_lo is true the lo components are used an when enable_hi is true the high componens are used.</para>
<para>There is a confusing nomenclature related to &quot;high&quot; and &quot;low&quot;. In this implmentation I always take low to mean the low side of the passband and high to be the high side of the passband as described above for the 4 frequency point defiitions. The issue is &quot;lowcut&quot; versus &quot;lowpass&quot;. Seismic Unix really mixes this up as their implmenetation (which I used here) refernces bflowpass and bfhighpass but subfilt uses the inverse lowcut and higcut terminology. A geeky implementation detail is I actually changed the names of the functions to eliminate the confusion in the implementation. That matters only if you want to compare what we did here to the original seismic unix code.</para>
<para>Note the iir filter coefficiets are always derived from the poles and Frequencies so this constructor is just an alternate way to define the filter without the abstraction of number of poles.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zerophase</parametername>
</parameternamelist>
<parameterdescription>
<para>when true use a zerophase filter. When false defines a one pass minimum phase filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_lo</parametername>
</parameternamelist>
<parameterdescription>
<para>is a boolean that when true enables the low band parameters for the filter (i.e. the highpass=low-cut components) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_hi</parametername>
</parameternamelist>
<parameterdescription>
<para>is a boolean taht when true enables the parameters defining the upper frequency band edge (i.e. lowpass=high-cut parameters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fstoplo</parametername>
</parameternamelist>
<parameterdescription>
<para>- stop band frequency for lower band edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>astoplo</parametername>
</parameternamelist>
<parameterdescription>
<para>- amplitude at stop frequency (small number for band pass, 1 for band reject) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fpasslo</parametername>
</parameternamelist>
<parameterdescription>
<para>- pass band frequency for lower band edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>apasslo</parametername>
</parameternamelist>
<parameterdescription>
<para>- amplitude at fpasslo frequency (1 for bandpass, small number for band reject) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fstophi</parametername>
</parameternamelist>
<parameterdescription>
<para>- stop band frequency for upper band edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>astophi</parametername>
</parameternamelist>
<parameterdescription>
<para>- amplitude at stop frequency (small number for band pass, 1 for band reject) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fpasshi</parametername>
</parameternamelist>
<parameterdescription>
<para>- pass band frequency for upper band edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>apasshi</parametername>
</parameternamelist>
<parameterdescription>
<para>- amplitude at fpasshi frequency (1 for bandpass, small number for band reject) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>is the expected data sample interval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="100" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="41" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1afc7717b15d0d13067e819bfe3a81d806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::algorithms::Butterworth::Butterworth</definition>
        <argsstring>(const mspass::utility::Metadata &amp;md)</argsstring>
        <name>Butterworth</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">mspass::utility::Metadata</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct using tagged valus created from a Metadata container.</para>
<para>This behaves exactly like the fully parameterized contructor except it gets the parameters from metadata. Metadata keys in initial implementation are identical to the argument names defined above. The best guidance for using this constuctor is to look a the comments in the default parameter file.</para>
<para>Construct using tagged valus created from a Metadata container </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="113" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="76" bodyend="213"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="472" endline="490">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a2631da9d437572ee0781ed9bd96a3ed3" compoundref="_metadata_8h" startline="228" endline="234">mspass::utility::Metadata::get_bool</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1aa56da98a52f03babd67bf9fb55c40f3a" compoundref="_metadata_8h" startline="213" endline="219">mspass::utility::Metadata::get_string</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a85ccda5e0946fd375c03458a90f65c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::algorithms::Butterworth::Butterworth</definition>
        <argsstring>(const bool zerophase, const bool enable_lo, const bool enable_hi, const int npolelo, const double f3dblo, const int npolehi, const double f3dbhi, const double sample_interval)</argsstring>
        <name>Butterworth</name>
        <param>
          <type>const bool</type>
          <declname>zerophase</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>enable_lo</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>enable_hi</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>npolelo</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f3dblo</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>npolehi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f3dbhi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sample_interval</declname>
        </param>
        <briefdescription>
<para>Construct by defining corner frequencies and number of npoles. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> filters can also be defind by a corner frequency and number of poles. In fact, only the nondimensional form of these parameters are stored as private attributes to define the filter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zerophase</parametername>
</parameternamelist>
<parameterdescription>
<para>when true use a zerophase filter. When false defines a one pass minimum phase filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_lo</parametername>
</parameternamelist>
<parameterdescription>
<para>is a boolean that when true enables the low band parameters for the filter (i.e. the highpass=low-cut components) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_hi</parametername>
</parameternamelist>
<parameterdescription>
<para>is a boolean taht when true enables the parameters defining the upper frequency band edge (i.e. lowpass=high-cut parameters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npolelo</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of poles for the low frequency corner (highpass) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f3dblo</parametername>
</parameternamelist>
<parameterdescription>
<para>is the corner frequency for the low frequency corner (highpass) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npolehi</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of poles for the high frequency corner (lowpass) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f3dbhi</parametername>
</parameternamelist>
<parameterdescription>
<para>is the corner frequency for the high frequency corner (lowpass) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>is the expected data sample interval </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="132" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="58" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a60c3979ede1947661bb25d118bde228c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::algorithms::Butterworth::Butterworth</definition>
        <argsstring>(const Butterworth &amp;parent)</argsstring>
        <name>Butterworth</name>
        <param>
          <type>const <ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy conststructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="137" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="214" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a7602075f3fe8f56e891331c98264d1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> &amp;</type>
        <definition>Butterworth &amp; mspass::algorithms::Butterworth::operator=</definition>
        <argsstring>(const Butterworth &amp;parent)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="139" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="225" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a7b54d5d5966a85092d45ebebd0b88498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">mspass::seismic::CoreTimeSeries</ref></type>
        <definition>CoreTimeSeries mspass::algorithms::Butterworth::impulse_response</definition>
        <argsstring>(const int n)</argsstring>
        <name>impulse_response</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return the impulse response. </para>
        </briefdescription>
        <detaileddescription>
<para>The response of a linear filter like the butterworth filter can always be described by either the time domain impulse response or its fourier transform commonly called the tranfer function. This function returns the impulse response centered in a time window with a specified number of samples using the current sample interval cached in the object. Note the return has dt and the impulse is at the center of the data window (n/2) with t0 set so the functions zero is correct if using the implict time scale (time method) of a time series object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of samples to generate to characterize the impulse response. The function is always returned centered on the vector of length n and t0 of the TimeSeries is set to make that impulse point be time 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="156" column="35" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="240" bodyend="253"/>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="28">mspass::seismic::CoreTimeSeries::s</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1a97ff6732aa816b0c327c5bf667ffe841" compoundref="_core_time_series_8cc" startline="185" endline="202">mspass::seismic::CoreTimeSeries::set_dt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a1ca7ba8bcd8337bd49d438664e74966d" compoundref="_basic_time_series_8h" startline="160" endline="160">mspass::seismic::BasicTimeSeries::set_live</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ae90b28cff0bc1997aa65a1693d8562d0" compoundref="_core_time_series_8cc" startline="203" endline="221">mspass::seismic::CoreTimeSeries::set_t0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1ac3f8c8200710fe0d3ef211c7c758e864" compoundref="_basic_time_series_8h" startline="259" endline="262">mspass::seismic::BasicTimeSeries::set_tref</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1ad8c696b150ed18bfb3c4060dd884bfe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::apply</definition>
        <argsstring>(mspass::seismic::CoreTimeSeries &amp;d)</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">mspass::seismic::CoreTimeSeries</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>pply the filter to a CoreTimeSeries object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method alters the data vector inside d in place and changes no other parts of the data. Automatic switching of data sample rate is used on the operator. That is, if the sample rate of the data is different than the operator sample rate the internal operator coefficients will be adjusted to the new sample rate. The operator sample rate will also be changed to the sample rate of d whenever the sample rate changes from the previous call.</para>
<para>This method has a safety to prevent irrational sample rate changes. The IRR filter used to compute a <ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> filter becomes unstable if the low pass filter component (high corner) approach Nyquist or worse exceed Nyquist. This method will throw a MsPASSError exception if the sample rate of d is too low for the filter high corner. (current 90% of Nyquist). When this error is throw the data will be unaltered and the internal sample rate will be left in the previous state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>input data to be filtered - altered in place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>throws</parametername>
</parameternamelist>
<parameterdescription>
<para>a MsPASSError if the hi corner is inconsistent with the sample rate of d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="179" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="256" bodyend="278"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1af31c96c0e2173d7581e1c3a3f8bcfde8" compoundref="_basic_time_series_8h" startline="162" endline="162">mspass::seismic::BasicTimeSeries::dt</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="28">mspass::seismic::CoreTimeSeries::s</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a10c30a560e4dce8a3bc9fe80409cee80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::apply</definition>
        <argsstring>(mspass::seismic::TimeSeries &amp;d)</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Apply the filter to a CoreTimeSeries object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method alters the data vector inside d in place and changes no other parts of the data. Automatic switching of data sample rate is used on the operator. That is, if the sample rate of the data is different than the operator sample rate the internal operator coefficients will be adjusted to the new sample rate. The operator sample rate will also be changed to the sample rate of d whenever the sample rate changes from the previous call.</para>
<para>This method has a safety to prevent irrational sample rate changes. The IRR filter used to compute a <ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> filter becomes unstable if the low pass filter component (high corner) approach Nyquist or worse exceed Nyquist. This method will automatically disable the high corner (lowpass) component of the filter if the corner approaches or exceed Nyquist. When that happens the internal sample rate is restored to the previous value and a complaint message is posted to elog of d.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>input data to be filtered - altered in place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
<parametername>but</parametername>
</parameternamelist>
<parameterdescription>
<para>callers should consider checking for errors posted to elog </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="202" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="281" bodyend="317"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1af31c96c0e2173d7581e1c3a3f8bcfde8" compoundref="_basic_time_series_8h" startline="162" endline="162">mspass::seismic::BasicTimeSeries::dt</references>
        <references refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" compoundref="_error_logger_8cc" startline="81" endline="86">mspass::utility::ErrorLogger::log_error</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="28">mspass::seismic::CoreTimeSeries::s</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a1b2416893b09cf7edad320a37c521c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::apply</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;d)</argsstring>
        <name>apply</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Filter a raw vector of data. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this method to apply the filter to a raw vector of data. The C++ interface uses an std::vector container, but the python api in MsPASS allows this to be a double numpy array or any iterable version of a vector container (meaning storage as a contiguous block of memory). If this method is used it is assumed the sample interval defined for the operator is the same as the for the input data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the data to be filtered (note the data are altered in place) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="214" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a76dc3f128a5305ca1b04d863ae72b73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::apply</definition>
        <argsstring>(mspass::seismic::CoreSeismogram &amp;d)</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">mspass::seismic::CoreSeismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Apply the filter to a CoreSeismogram object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method alters the data vector inside d in place and changes no other parts of the data. Automatic switching of data sample rate is used on the operator. That is, if the sample rate of the data is different than the operator sample rate the internal operator coefficients will be adjusted to the new sample rate. The operator sample rate will also be changed to the sample rate of d whenever the sample rate changes from the previous call.</para>
<para>This method has a safety to prevent irrational sample rate changes. The IRR filter used to compute a <ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> filter becomes unstable if the low pass filter component (high corner) approach Nyquist or worse exceed Nyquist. This method will throw a MsPASSError exception if the sample rate of d is too low for the filter high corner. (current 90% of Nyquist). When this error is throw the data will be unaltered and the internal sample rate will be left in the previous state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>input data to be filtered - altered in place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>throws</parametername>
</parameternamelist>
<parameterdescription>
<para>a MsPASSError if the hi corner is inconsistent with the sample rate of d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="237" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="359" bodyend="383"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1af31c96c0e2173d7581e1c3a3f8bcfde8" compoundref="_basic_time_series_8h" startline="162" endline="162">mspass::seismic::BasicTimeSeries::dt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="188" endline="188">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">mspass::seismic::CoreSeismogram::u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1abb8d56355bb2b23cbf7e96b0b2fa7b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::apply</definition>
        <argsstring>(mspass::seismic::Seismogram &amp;d)</argsstring>
        <name>apply</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Apply the filter to a CoreTimeSeries object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method alters the data vector inside d in place and changes no other parts of the data. Automatic switching of data sample rate is used on the operator. That is, if the sample rate of the data is different than the operator sample rate the internal operator coefficients will be adjusted to the new sample rate. The operator sample rate will also be changed to the sample rate of d whenever the sample rate changes from the previous call.</para>
<para>This method has a safety to prevent irrational sample rate changes. The IRR filter used to compute a <ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> filter becomes unstable if the low pass filter component (high corner) approach Nyquist or worse exceed Nyquist. This method will automatically disable the high corner (lowpass) component of the filter if the corner approaches or exceed Nyquist. When that happens the internal sample rate is restored to the previous value and a complaint message is posted to elog of d.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>input data to be filtered - altered in place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
<parametername>but</parametername>
</parameternamelist>
<parameterdescription>
<para>callers should consider checking for errors posted to elog </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="260" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="387" bodyend="437"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1af31c96c0e2173d7581e1c3a3f8bcfde8" compoundref="_basic_time_series_8h" startline="162" endline="162">mspass::seismic::BasicTimeSeries::dt</references>
        <references refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" compoundref="_error_logger_8cc" startline="81" endline="86">mspass::utility::ErrorLogger::log_error</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="188" endline="188">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">mspass::seismic::CoreSeismogram::u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a54e766697f72f1ba38b95915805dd6d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1algorithms_1_1deconvolution_1_1_complex_array" kindref="compound">mspass::algorithms::deconvolution::ComplexArray</ref></type>
        <definition>ComplexArray mspass::algorithms::Butterworth::transfer_function</definition>
        <argsstring>(const int n)</argsstring>
        <name>transfer_function</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return the response of the filter in the frequency domain. </para>
        </briefdescription>
        <detaileddescription>
<para>The impulse response of any linear system can always be characterized by either the time domain response to spike signal or the alternative frequency domain version of the same function commonly called the transfer function. This method returns the transfer funtion as a <ref refid="classmspass_1_1algorithms_1_1deconvolution_1_1_complex_array" kindref="compound">mspass::algorithms::deconvolution::ComplexArray</ref> container. Use methods in that object to get amplitude and phase response functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>is the number of points that should be used to characterize the transfer function. Note because we are dealing with strictly real valued signals the array returned will be folded at the Nyquist frequency in the standard way of all FFT implementations (current implementation uses the fft in the gnu scientific library that definitely does that). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="277" column="51" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="438" bodyend="454"/>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="28">mspass::seismic::CoreTimeSeries::s</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" compoundref="_basic_time_series_8h" startline="74" endline="77">mspass::seismic::BasicTimeSeries::sample_number</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a94f20884465265de735d05946e1cea00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::change_dt</definition>
        <argsstring>(const double dtnew)</argsstring>
        <name>change_dt</name>
        <param>
          <type>const double</type>
          <declname>dtnew</declname>
        </param>
        <briefdescription>
<para>set the sample interval assumed for input data. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used when running with raw data vectors if the sample interval of the data series is different from that called on construction or set previously. This is a nontrivial change because the filter coefficients depend upon sample interval. In particular, for this implementation npoles and the 3db frequency points stored internally are altered when this function is called. If the frequency intervals change the expectation is the user will create a new instance of this object.</para>
<para>Warning: this routine does not implement the safeties built into TimeSeries and Seismogram apply methods. It will silently change the upper corner to an unstable position if called inappropriately.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtnew</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new sample interval to set for the operator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="295" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="295" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a98d5b940b443524dbe317ae6b0efb1a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::algorithms::Butterworth::low_corner</definition>
        <argsstring>() const</argsstring>
        <name>low_corner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the low frequency 3db corner (in Hz). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="302" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1acae23f17a07efa21effb10a9da730f33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::algorithms::Butterworth::high_corner</definition>
        <argsstring>() const</argsstring>
        <name>high_corner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the high frequency 3db corner (in Hz). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="307" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a2b528a200c2b56f9420a5f29fb706d3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::algorithms::Butterworth::npoles_low</definition>
        <argsstring>() const</argsstring>
        <name>npoles_low</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of poles defining the highpass (lowcut) element of the filter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="313" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a094f40b3c1d1ff857f696f19d0f85026" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::algorithms::Butterworth::npoles_high</definition>
        <argsstring>() const</argsstring>
        <name>npoles_high</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of poles defining the lowpass (highcut) element of the filter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="316" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1acb651e7aa0adb9f27cb32fbf14afeb29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::algorithms::Butterworth::current_dt</definition>
        <argsstring>() const</argsstring>
        <name>current_dt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the current operator sample interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="318" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a446ac405d71fddd4adbd9d2a9722e331" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mspass::algorithms::Butterworth::filter_type</definition>
        <argsstring>() const</argsstring>
        <name>filter_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a string defining the type of operator this filter defines. Currently can be one of the following: bandpass, lowpass, or highpass. It is possible to construct a band reject filter with the right constructor, but the implementation of this method will not detect that condition. A band reject filter will be incorrectly tagged bandpass. The algorithm just looks to see which of the band edges are defined (the hi and lo concepts described above) and guesses the filter type. If both are off it returns &quot;Undefined&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="328" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="328" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a9014cb292cb1c7ca452c80c5cb330b43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::algorithms::Butterworth::is_zerophase</definition>
        <argsstring>() const</argsstring>
        <name>is_zerophase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the filter is defined as a zero phase filter. Returns false if it is minimum phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="347" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="347" bodyend="350"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a0dbeb471e7f6d24a9c7622b78188c7b4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::bfdesign</definition>
        <argsstring>(double fpass, double apass, double fstop, double astop, int *npoles, double *f3db)</argsstring>
        <name>bfdesign</name>
        <param>
          <type>double</type>
          <declname>fpass</declname>
        </param>
        <param>
          <type>double</type>
          <declname>apass</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fstop</declname>
        </param>
        <param>
          <type>double</type>
          <declname>astop</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>npoles</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>f3db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="372" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="459" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1abc057f5bb2a19e2f1f45c73c0b02ce40" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::bfhighcut</definition>
        <argsstring>(int npoles, double f3db, int n, double p[], double q[])</argsstring>
        <name>bfhighcut</name>
        <param>
          <type>int</type>
          <declname>npoles</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f3db</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="374" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="531" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1ace0ad60d256cb617dad8360363d66c94" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::bflowcut</definition>
        <argsstring>(int npoles, double f3db, int n, double p[], double q[])</argsstring>
        <name>bflowcut</name>
        <param>
          <type>int</type>
          <declname>npoles</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f3db</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="375" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="488" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a0dbc8248a1311367bee4be1d5a48b294" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::set_lo</definition>
        <argsstring>(const double fstop, const double fpass, const double astop, const double apass)</argsstring>
        <name>set_lo</name>
        <param>
          <type>const double</type>
          <declname>fstop</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fpass</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>astop</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>apass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="379" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="573" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1algorithms_1_1_butterworth_1a37e3d8d4038cf5cbe9dccb9edc22a9fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::Butterworth::set_hi</definition>
        <argsstring>(const double fstop, const double fpass, const double astop, const double apass)</argsstring>
        <name>set_hi</name>
        <param>
          <type>const double</type>
          <declname>fstop</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fpass</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>astop</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>apass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="381" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="595" bodyend="616"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>MsPASS implementation of <ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> filter as processing object. </para>
    </briefdescription>
    <detaileddescription>
<para>MsPASS has an existing filter routine that can implement buterworth filters via obspy. This class was created to allow a clean interface to <ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> filtering from C++ code that needs such an operator. The original use was an experimental deconvolution code, but there will likely be others because simple, efficient filters are a common internal need for potential applications.</para>
<para>This C++ class can be viewed as a wrapper for Seismic Unix functions that implement <ref refid="classmspass_1_1algorithms_1_1_butterworth" kindref="compound">Butterworth</ref> filters. The parent functions were found in the cwp lib and were called bfdesign, bfhighpass, and bflowpass. Those three functions are the central tools used to implement this class. All the rest is really just a wrapper to provide an object oriented api to the su functions.</para>
<para>This class implements a processing object concept. That is, it is intended to be constructed and then used for processing multiple data objects with fixed parameters. For Butterwoth filtering the parameters are relatively simple (mainly two corner frequencies and number of poles defining the filter rolloff). A complexity, however, is that the class was designed to allow automatic handling of multiple sample rate data. That is handled internally by caching the sample interval of the data and automatically adjusting the coefficients when the sample interval changes. Note that feature only works for MsPASS data objects CoreTimeSeries and Seismogram where the sample interval is embedded in the object. The raw interface with a simple vector cannot know that. The method to change the expected sample interval has some sanity checks to reduce, but not eliminate the possibility of mistakes that will create unstable filters. </para>
    </detaileddescription>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" line="35" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/Butterworth.h" bodystart="36" bodyend="383"/>
    <listofallmembers>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1ad8c696b150ed18bfb3c4060dd884bfe3" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>apply</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a10c30a560e4dce8a3bc9fe80409cee80" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>apply</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a1b2416893b09cf7edad320a37c521c5a" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>apply</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a76dc3f128a5305ca1b04d863ae72b73b" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>apply</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1abb8d56355bb2b23cbf7e96b0b2fa7b24" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>apply</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a0dbeb471e7f6d24a9c7622b78188c7b4" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>bfdesign</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1abc057f5bb2a19e2f1f45c73c0b02ce40" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>bfhighcut</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1ace0ad60d256cb617dad8360363d66c94" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>bflowcut</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a89009fa487f8a4090c5bce0c4af662cb" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>Butterworth</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1afb02193564836b8f7396a9acab24a50e" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>Butterworth</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1afc7717b15d0d13067e819bfe3a81d806" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>Butterworth</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a85ccda5e0946fd375c03458a90f65c25" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>Butterworth</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a60c3979ede1947661bb25d118bde228c" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>Butterworth</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a94f20884465265de735d05946e1cea00" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>change_dt</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1acb651e7aa0adb9f27cb32fbf14afeb29" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>current_dt</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a4a38de772f8eddfd860ac676f9a03b3f" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>dt</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a97caa0ac0b25fbf3f030bb961c8452a5" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>f3db_hi</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1aad7c62ca83e94661e26f6be842b9c218" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>f3db_lo</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a446ac405d71fddd4adbd9d2a9722e331" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>filter_type</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1acae23f17a07efa21effb10a9da730f33" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>high_corner</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a7b54d5d5966a85092d45ebebd0b88498" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>impulse_response</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a9014cb292cb1c7ca452c80c5cb330b43" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>is_zerophase</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a98d5b940b443524dbe317ae6b0efb1a3" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>low_corner</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a1bb3251cd8f167c838cb17eeb1422f9d" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>npoles_hi</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a094f40b3c1d1ff857f696f19d0f85026" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>npoles_high</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a747cd3b41dad367d538f9d80dac9787c" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>npoles_lo</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a2b528a200c2b56f9420a5f29fb706d3c" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>npoles_low</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a7602075f3fe8f56e891331c98264d1a5" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>operator=</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a37e3d8d4038cf5cbe9dccb9edc22a9fc" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>set_hi</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a0dbc8248a1311367bee4be1d5a48b294" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>set_lo</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a54e766697f72f1ba38b95915805dd6d9" prot="public" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>transfer_function</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a233b8c6a1617d3e6dcb98ca0368132b2" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>use_hi</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1acf431483bfab1a07524d72d2815af6df" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>use_lo</name></member>
      <member refid="classmspass_1_1algorithms_1_1_butterworth_1a3be8316c5785f90f05f5ff45bb0c4567" prot="private" virt="non-virtual"><scope>mspass::algorithms::Butterworth</scope><name>zerophase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
