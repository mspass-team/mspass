<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmspass_1_1seismic_1_1_basic_spectrum" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>mspass::seismic::BasicSpectrum</compoundname>
    <derivedcompoundref refid="classmspass_1_1seismic_1_1_power_spectrum" prot="public" virt="non-virtual">mspass::seismic::PowerSpectrum</derivedcompoundref>
    <includes refid="_basic_spectrum_8h" local="no">BasicSpectrum.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_spectrum_1aa8b09300420826a09dcfd44783cce21b" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::seismic::BasicSpectrum::dfval</definition>
        <argsstring></argsstring>
        <name>dfval</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::dfval</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="172" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_spectrum_1a3889a47eac3ae9c201f95eb70d9518a4" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::seismic::BasicSpectrum::f0val</definition>
        <argsstring></argsstring>
        <name>f0val</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::f0val</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="173" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_spectrum_1aeba1d53ba50676257c3cb5fec2f691c8" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::seismic::BasicSpectrum::parent_dt</definition>
        <argsstring></argsstring>
        <name>parent_dt</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::parent_dt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="174" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_spectrum_1a2f2d159e0b767fac81f7b755e5debbc8" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::seismic::BasicSpectrum::parent_npts</definition>
        <argsstring></argsstring>
        <name>parent_npts</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::parent_npts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="175" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_spectrum_1a266cf681e4001dffaf775aa223f8438b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicSpectrum::is_live</definition>
        <argsstring></argsstring>
        <name>is_live</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::is_live</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="176" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="176" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1ae2c68571058526795e0424e0a76e4e76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::BasicSpectrum::BasicSpectrum</definition>
        <argsstring>()</argsstring>
        <name>BasicSpectrum</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::BasicSpectrum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. sets frequency interval to 1 and f0 to 0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="23" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1ad6606996a02b573faf65312459352bfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::BasicSpectrum::BasicSpectrum</definition>
        <argsstring>(const double dfin, const double f0in, const double dtin, const int npts_in)</argsstring>
        <name>BasicSpectrum</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::BasicSpectrum</qualifiedname>
        <param>
          <type>const double</type>
          <declname>dfin</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f0in</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dtin</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>npts_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parameterized constructor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dfin</parametername>
</parameternamelist>
<parameterdescription>
<para>frequency bin size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f0in</parametername>
</parameternamelist>
<parameterdescription>
<para>frequency of first component of data vector of regular frequency grid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtin</parametername>
</parameternamelist>
<parameterdescription>
<para>parent sample interval of spectrum estimate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npts_in</parametername>
</parameternamelist>
<parameterdescription>
<para>number of actual samples of parent time series (may not be the same as spectrum link when zero padding is used. subclasses should provide a way to handle zero padding </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="32" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="32" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a33b44b4ba519e94e51af81a407753cf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::BasicSpectrum::BasicSpectrum</definition>
        <argsstring>(const BasicSpectrum &amp;parent)</argsstring>
        <name>BasicSpectrum</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::BasicSpectrum</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_basic_spectrum" kindref="compound">BasicSpectrum</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="44" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1aa63e2972ed9ef383efdf76a9b6f837a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_basic_spectrum" kindref="compound">BasicSpectrum</ref> &amp;</type>
        <definition>BasicSpectrum &amp; mspass::seismic::BasicSpectrum::operator=</definition>
        <argsstring>(const BasicSpectrum &amp;parent)</argsstring>
        <name>operator=</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_basic_spectrum" kindref="compound">BasicSpectrum</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="52" column="17" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="52" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1ac7b01555a28ce9de3630eb24f4dc9173" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual mspass::seismic::BasicSpectrum::~BasicSpectrum</definition>
        <argsstring>()</argsstring>
        <name>~BasicSpectrum</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::~BasicSpectrum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="65" column="11" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a2bce24e09412434ec968bed19ec9843d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicSpectrum::live</definition>
        <argsstring>() const</argsstring>
        <name>live</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::live</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test live condition of the data.</para>
<para>Returns true if the data are marked as being good. This method is part of a four methods for handling the concept of &quot;live&quot;==gppd versus &quot;dead&quot; == bad. The concept was borrowed from seismic reflection processing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="72" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a331f89b8216f9717ac906e922d7c2cff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicSpectrum::dead</definition>
        <argsstring>() const</argsstring>
        <name>dead</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::dead</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test live condition of the data.</para>
<para>Returns true if the data are marked as being bad This method is part of a four methods for handling the concept of &quot;live&quot;==gppd versus &quot;dead&quot; == bad. The concept was borrowed from seismic reflection processing. This method is the negation of the live method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="80" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a7400b002f21460fece1d5519dfbc26c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicSpectrum::kill</definition>
        <argsstring>()</argsstring>
        <name>kill</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::kill</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark this datum bad.</para>
<para>Returns true if the data are marked as being good. This method is part of a four methods for handling the concept of &quot;live&quot;==gppd versus &quot;dead&quot; == bad. The concept was borrowed from seismic reflection processing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="87" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a2abdea1d94e0ec8753a09eb2cf20a290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicSpectrum::set_live</definition>
        <argsstring>()</argsstring>
        <name>set_live</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::set_live</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark this datum good..</para>
<para>Returns true if the data are marked as being good. This method is part of a four methods for handling the concept of &quot;live&quot;==gppd versus &quot;dead&quot; == bad. The concept was borrowed from seismic reflection processing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="94" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1ac01289c8a10cc1939f51d51f3c1cdb72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicSpectrum::df</definition>
        <argsstring>() const</argsstring>
        <name>df</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::df</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the (fixed) frequemcy bin size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="96" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1adcbe20cedb4c2a1f0ed31466e8f70c13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicSpectrum::f0</definition>
        <argsstring>() const</argsstring>
        <name>f0</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::f0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the frequency of the first (0) component of the spectrum vector. This value is normally 0 but the api allows it to be nonzero. That is useful for windowing to store only data in a limited passband. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="101" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a2155e90cad5c857f326d4399fd276755" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicSpectrum::dt</definition>
        <argsstring>() const</argsstring>
        <name>dt</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::dt</qualifiedname>
        <briefdescription>
<para>Return the original sample interval of data used to generate spectrum. </para>
        </briefdescription>
        <detaileddescription>
<para>When zero padding is used the original sample interval of data cannot be known without additional data. In this implementation we require the user to store that information with a protected attribute within the object. This retrieves that stored value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="108" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a61c04d4d4a98d4135d3f5e0b59cc85b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicSpectrum::rayleigh</definition>
        <argsstring>() const</argsstring>
        <name>rayleigh</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::rayleigh</qualifiedname>
        <briefdescription>
<para>Return the Rayleigh bin size for this spectrum. </para>
        </briefdescription>
        <detaileddescription>
<para>The Rayleigh bin size of a spectrum is 1/T where T is the length of the original time series. This method returns that attribute of this spectrum. Note the rayleigh and df methods will return the same number only when a spectrum is computed with no zero padding. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="116" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a436535a1b2f05e518fc4dc884da2e512" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::seismic::BasicSpectrum::timeseries_npts</definition>
        <argsstring>() const</argsstring>
        <name>timeseries_npts</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::timeseries_npts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return number of points in parent time series. Of use mostly internally. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="120" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a1cb29c54744c06553765a3966c8b970f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::seismic::BasicSpectrum::sample_number</definition>
        <argsstring>(const double f) const</argsstring>
        <name>sample_number</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::sample_number</qualifiedname>
        <param>
          <type>const double</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the integer sample number of the closest sample to the specified frequency. Uses rounding. Will throw a MsPASSError object if the specified frequency is not within the range of the data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="128" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="128" bodyend="147"/>
        <references refid="classmspass_1_1seismic_1_1_basic_spectrum_1a830fc9c8135253aeae01ffd80746b413">nf</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1af690c2deac6b3c2306c15fee9c452a1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicSpectrum::set_df</definition>
        <argsstring>(const double dfin)</argsstring>
        <name>set_df</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::set_df</qualifiedname>
        <param>
          <type>const double</type>
          <declname>dfin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setter for the frequency bin interval - use with caution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="149" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a59236bc56e298b485927defff353de70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicSpectrum::set_f0</definition>
        <argsstring>(const double f0in)</argsstring>
        <name>set_f0</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::set_f0</qualifiedname>
        <param>
          <type>const double</type>
          <declname>f0in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setter for the initial frequency value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="151" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a73a8f75cf63421c696379f57f207a93f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicSpectrum::set_dt</definition>
        <argsstring>(const double dtin)</argsstring>
        <name>set_dt</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::set_dt</qualifiedname>
        <param>
          <type>const double</type>
          <declname>dtin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setter for internally stored parent data sample interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="153" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a85f411357320b26e22e9d116faa3abe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicSpectrum::set_npts</definition>
        <argsstring>(const int npts_in)</argsstring>
        <name>set_npts</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::set_npts</qualifiedname>
        <param>
          <type>const int</type>
          <declname>npts_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setter for internal parent number of data points (need by rayleigh method). Note one should only use this in constructors and when creating an instance from pieces. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="157" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1ad0e29676af3782c4ed1efb228ef7637a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt; double &gt; mspass::seismic::BasicSpectrum::frequencies</definition>
        <argsstring>() const =0</argsstring>
        <name>frequencies</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::frequencies</qualifiedname>
        <reimplementedby refid="classmspass_1_1seismic_1_1_power_spectrum_1a1ef20f133212a6288e301e5d80f87a85">frequencies</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an std::vector container containing the frequency of each sample in the spectrum vector. Commonly necessary for plotting. Made virtual because nf method needs to be virtual. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="161" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a076bd1632ad16165c842115fd2aab6a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double mspass::seismic::BasicSpectrum::frequency</definition>
        <argsstring>(const int sample_number) const =0</argsstring>
        <name>frequency</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::frequency</qualifiedname>
        <reimplementedby refid="classmspass_1_1seismic_1_1_power_spectrum_1ad2f979f7662aba3e46f277d9c45fd07d">frequency</reimplementedby>
        <param>
          <type>const int</type>
          <declname>sample_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return frequency at a specified sample number. Virtual to allow subclasses to throw an error for illegal value. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="164" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1a830fc9c8135253aeae01ffd80746b413" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t mspass::seismic::BasicSpectrum::nf</definition>
        <argsstring>() const =0</argsstring>
        <name>nf</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::nf</qualifiedname>
        <reimplementedby refid="classmspass_1_1seismic_1_1_power_spectrum_1a7675c66d7f1aa8d7b4e9437564af4beb">nf</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of frequency bin. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="166" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_spectrum_1af11c7d672337c3f89c3e063ecf1be4a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double mspass::seismic::BasicSpectrum::Nyquist</definition>
        <argsstring>() const =0</argsstring>
        <name>Nyquist</name>
        <qualifiedname>mspass::seismic::BasicSpectrum::Nyquist</qualifiedname>
        <reimplementedby refid="classmspass_1_1seismic_1_1_power_spectrum_1aef0b54806f9e5367df7dfa03804a2f87">Nyquist</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the Nyquist frequency. Virtual because if f0 is not zero and the number of points is not the full fft output this needs to be handled differently. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="170" column="18"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for family of data objects created by Fourier transforms.</para>
<para>There are a range of algorithms used in seismology that center on the use of Fourier Transforms. This base class is intended to be used as the base for any mspass C++ data object based on Fourier transforms where the data are stored with a vector defined on a uniform grid in frequency. That means any algorithm based on fFTs. The value of using a base class is that power spectra and complex spectra have many common concpets shared by this base class. Classic use of inheritance to avoid redundant code. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>mspass::seismic::BasicSpectrum</label>
        <link refid="classmspass_1_1seismic_1_1_basic_spectrum"/>
      </node>
      <node id="2">
        <label>mspass::seismic::PowerSpectrum</label>
        <link refid="classmspass_1_1seismic_1_1_power_spectrum"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" line="19" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicSpectrum.h" bodystart="20" bodyend="177"/>
    <listofallmembers>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1ae2c68571058526795e0424e0a76e4e76" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>BasicSpectrum</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1ad6606996a02b573faf65312459352bfc" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>BasicSpectrum</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a33b44b4ba519e94e51af81a407753cf9" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>BasicSpectrum</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a331f89b8216f9717ac906e922d7c2cff" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>dead</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1ac01289c8a10cc1939f51d51f3c1cdb72" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>df</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1aa8b09300420826a09dcfd44783cce21b" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>dfval</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a2155e90cad5c857f326d4399fd276755" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1adcbe20cedb4c2a1f0ed31466e8f70c13" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>f0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a3889a47eac3ae9c201f95eb70d9518a4" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>f0val</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1ad0e29676af3782c4ed1efb228ef7637a" prot="public" virt="pure-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>frequencies</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a076bd1632ad16165c842115fd2aab6a9" prot="public" virt="pure-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>frequency</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a266cf681e4001dffaf775aa223f8438b" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>is_live</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a7400b002f21460fece1d5519dfbc26c7" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>kill</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a2bce24e09412434ec968bed19ec9843d" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>live</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a830fc9c8135253aeae01ffd80746b413" prot="public" virt="pure-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>nf</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1af11c7d672337c3f89c3e063ecf1be4a5" prot="public" virt="pure-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>Nyquist</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1aa63e2972ed9ef383efdf76a9b6f837a0" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1aeba1d53ba50676257c3cb5fec2f691c8" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>parent_dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a2f2d159e0b767fac81f7b755e5debbc8" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>parent_npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a61c04d4d4a98d4135d3f5e0b59cc85b3" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>rayleigh</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a1cb29c54744c06553765a3966c8b970f" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>sample_number</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1af690c2deac6b3c2306c15fee9c452a1b" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>set_df</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a73a8f75cf63421c696379f57f207a93f" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>set_dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a59236bc56e298b485927defff353de70" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>set_f0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a2abdea1d94e0ec8753a09eb2cf20a290" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>set_live</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a85f411357320b26e22e9d116faa3abe2" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>set_npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a436535a1b2f05e518fc4dc884da2e512" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>timeseries_npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1ac7b01555a28ce9de3630eb24f4dc9173" prot="public" virt="virtual"><scope>mspass::seismic::BasicSpectrum</scope><name>~BasicSpectrum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
