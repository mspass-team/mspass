<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmspass_1_1utility_1_1_attribute_cross_reference" kind="class" language="C++" prot="public">
    <compoundname>mspass::utility::AttributeCrossReference</compoundname>
    <includes refid="_attribute_cross_reference_8h" local="no">AttributeCrossReference.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a97938f0adfb9289ebd489fc4f591f15c" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string,std::string&gt; mspass::utility::AttributeCrossReference::itoe</definition>
        <argsstring></argsstring>
        <name>itoe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="98" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a8e5263b73ba75c8978dda070719ab478" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string,std::string&gt; mspass::utility::AttributeCrossReference::etoi</definition>
        <argsstring></argsstring>
        <name>etoi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="99" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a035c12502cc922daab7a7617da5975b8" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, MDtype &gt;</type>
        <definition>std::map&lt;std::string,MDtype&gt; mspass::utility::AttributeCrossReference::imdtypemap</definition>
        <argsstring></argsstring>
        <name>imdtypemap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="101" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1aaa7bf24e8df2c42ef42f97800d48a57e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AttributeCrossReference::AttributeCrossReference</definition>
        <argsstring>()</argsstring>
        <name>AttributeCrossReference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor.</para>
<para>The default constructor is a pure placeholder that does nothing. Result is a null namespace mapper. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="27" column="9" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a8170c188877f4dac1720d277499c0047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AttributeCrossReference::AttributeCrossReference</definition>
        <argsstring>(const std::string lines_to_parse)</argsstring>
        <name>AttributeCrossReference</name>
        <param>
          <type>const std::string</type>
          <declname>lines_to_parse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct from a string.</para>
<para>This constructor assumes the string variable passed is a complete image of a set of (newline separated) lines defining the mapping. The format of each line is assumed to be: internal_name external_name type. As the names imply &quot;internal_name&quot; is the name to use internally and &quot;external_name&quot; is the foramt specific external name. The &quot;type&quot; variable is generic and should be one of the simple keywords real, int, string, or boolean.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lines_to_parse</parametername>
</parameternamelist>
<parameterdescription>
<para>is the (multiline) string in the format described above.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>will be thrown for parsing errors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="43" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1af4feeaca67737324a18508505f173604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AttributeCrossReference::AttributeCrossReference</definition>
        <argsstring>(const std::list&lt; std::string &gt; &amp;lines)</argsstring>
        <name>AttributeCrossReference</name>
        <param>
          <type>const std::list&lt; std::string &gt; &amp;</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct from a list container.</para>
<para>This constructor is nearly identical to the single string with newline constructor. The list elements are expected to be the contents of each line (newline break) for the string version.</para>
<para>\lines list container with input lines in same format as that described above for single string constructor. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>will be thrown if there are parsing errors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="54" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1afa33f80669eae48d402f63ad488cd48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AttributeCrossReference::AttributeCrossReference</definition>
        <argsstring>(const std::map&lt; std::string, std::string &gt; internal2external, const mspass::utility::MetadataList &amp;mdlist)</argsstring>
        <name>AttributeCrossReference</name>
        <param>
          <type>const std::map&lt; std::string, std::string &gt;</type>
          <declname>internal2external</declname>
        </param>
        <param>
          <type>const mspass::utility::MetadataList &amp;</type>
          <declname>mdlist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build for a set of STL containers.</para>
<para>This is lower level constructor that effectively builds this object from a set of components that are used to actually implement the concept. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>internal2external</parametername>
</parameternamelist>
<parameterdescription>
<para>is an associative array keyed by the internal name that defines external names linked to each internal name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mdlist</parametername>
</parameternamelist>
<parameterdescription>
<para>is a MsPASS::MetadataList object defining the complete internal namespace. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="66" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a6560b0c41600bafbefa6a91c10ce4057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AttributeCrossReference::AttributeCrossReference</definition>
        <argsstring>(const AttributeCrossReference &amp;parent)</argsstring>
        <name>AttributeCrossReference</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_attribute_cross_reference" kindref="compound">AttributeCrossReference</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="69" column="9" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a2264349fe7d2093900fa9b56ef84b96b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::AttributeCrossReference::internal</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>internal</name>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get internal name for attribute with external name key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="71" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc" bodystart="113" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1aeded33f763704fc1a42b884cf62762c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::AttributeCrossReference::external</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>external</name>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get external name for attribute with internal name key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="73" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc" bodystart="123" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a546084d7cd4b9369ee7db723c3629422" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>MDtype</type>
        <definition>MDtype mspass::utility::AttributeCrossReference::type</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>type</name>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get type information for attribute with internal name key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="75" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc" bodystart="133" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a619f37e593d5d259ec6cafed2eed1aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference" kindref="compound">AttributeCrossReference</ref> &amp;</type>
        <definition>AttributeCrossReference &amp; mspass::utility::AttributeCrossReference::operator=</definition>
        <argsstring>(const AttributeCrossReference &amp;parent)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_attribute_cross_reference" kindref="compound">AttributeCrossReference</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="77" column="33" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc" bodystart="103" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a6a15859017c7559a06b6b38b1045bef7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::utility::AttributeCrossReference::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return number of entries in the cross reference map. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="79" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a0d587eb08b5be753d7e0087bef6d61f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::AttributeCrossReference::put</definition>
        <argsstring>(const std::string intern, const std::string ext)</argsstring>
        <name>put</name>
        <param>
          <type>const std::string</type>
          <declname>intern</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new entry to the map.</para>
<para>This method is used to extend the namespace.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intern</parametername>
</parameternamelist>
<parameterdescription>
<para>is the internal name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ext</parametername>
</parameternamelist>
<parameterdescription>
<para>is the external name to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="86" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a33b5a77e159f3e114bbfccb24e3fff61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>set&lt; string &gt; mspass::utility::AttributeCrossReference::internal_names</definition>
        <argsstring>() const</argsstring>
        <name>internal_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the set of internal names defined by this object.</para>
<para>Returns an std::set container of strings that are the internal names defined by this object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="91" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc" bodystart="157" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_attribute_cross_reference_1a19789014f1041b64582b6b565913c8de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>set&lt; string &gt; mspass::utility::AttributeCrossReference::external_names</definition>
        <argsstring>() const</argsstring>
        <name>external_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the set of external names defined by this object.</para>
<para>Returns an std::set container of strings that are the external names defined by this object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="96" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc" bodystart="167" bodyend="176"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Cross reference between external and internal names. </para>
    </briefdescription>
    <detaileddescription>
<para>Data formats commonly have a frozen namespace with which people are very familiar. An example is SAC where scripts commonly manipulate header attribute by a fixed set of names. For good reasons one may want to use a different naming convention internally in a piece of software that loads data using an external format but wishes to use a different set of names internally. This object simplifies the task of managing the differences in internal and external names </para>
    </detaileddescription>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" line="20" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AttributeCrossReference.h" bodystart="21" bodyend="102"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1aaa7bf24e8df2c42ef42f97800d48a57e" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>AttributeCrossReference</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a8170c188877f4dac1720d277499c0047" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>AttributeCrossReference</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1af4feeaca67737324a18508505f173604" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>AttributeCrossReference</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1afa33f80669eae48d402f63ad488cd48b" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>AttributeCrossReference</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a6560b0c41600bafbefa6a91c10ce4057" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>AttributeCrossReference</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a8e5263b73ba75c8978dda070719ab478" prot="private" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>etoi</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1aeded33f763704fc1a42b884cf62762c6" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>external</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a19789014f1041b64582b6b565913c8de" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>external_names</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a035c12502cc922daab7a7617da5975b8" prot="private" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>imdtypemap</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a2264349fe7d2093900fa9b56ef84b96b" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>internal</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a33b5a77e159f3e114bbfccb24e3fff61" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>internal_names</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a97938f0adfb9289ebd489fc4f591f15c" prot="private" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>itoe</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a619f37e593d5d259ec6cafed2eed1aea" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a0d587eb08b5be753d7e0087bef6d61f4" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a6a15859017c7559a06b6b38b1045bef7" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>size</name></member>
      <member refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a546084d7cd4b9369ee7db723c3629422" prot="public" virt="non-virtual"><scope>mspass::utility::AttributeCrossReference</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
