<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacemspass_1_1io" kind="namespace" language="C++">
    <compoundname>mspass::io</compoundname>
    <innerclass refid="classmspass_1_1io_1_1mseed__index" prot="public">mspass::io::mseed_index</innerclass>
    <innerclass refid="classmspass_1_1io_1_1_m_s_e_e_d__sid" prot="public">mspass::io::MSEED_sid</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="mseed__file__indexer_8cc_1ae0e7bdb1ae7894c3385fe229039b3ac1" prot="public" static="no">
        <type>std::pair&lt; std::vector&lt; <ref refid="classmspass_1_1io_1_1mseed__index" kindref="compound">mseed_index</ref> &gt;, <ref refid="classmspass_1_1utility_1_1_error_logger" kindref="compound">mspass::utility::ErrorLogger</ref> &gt;</type>
        <definition>typedef std::pair&lt;std::vector&lt;mseed_index&gt;, mspass::utility::ErrorLogger&gt; mspass::io::MSDINDEX_returntype</definition>
        <argsstring></argsstring>
        <name>MSDINDEX_returntype</name>
        <qualifiedname>mspass::io::MSDINDEX_returntype</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_file_indexer.cc" line="90" column="5" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_file_indexer.cc" bodystart="90" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="mseed__file__indexer_8cc_1aed35095112e114eff1be6922f2f291d1" prot="public" static="no" mutable="no">
        <type>thread_local std::string</type>
        <definition>thread_local std::string mspass::io::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <qualifiedname>mspass::io::buffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_file_indexer.cc" line="91" column="26" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_file_indexer.cc" bodystart="91" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="fileio_8h_1a635804a18597fe158057aec9c9781e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int mspass::io::fwrite_to_file</definition>
        <argsstring>(mspass::seismic::TimeSeries &amp;d, const std::string dir, const std::string dfile)</argsstring>
        <name>fwrite_to_file</name>
        <qualifiedname>mspass::io::fwrite_to_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dfile</declname>
        </param>
        <briefdescription>
<para>Fast file writer for native TimeSeries save to a file. </para>
        </briefdescription>
        <detaileddescription>
<para>When saving data to a file system there is no standard way to do so we know of that is faster than the low level C fwrite function. This function uses fwrite to write ONLY the sample data in the input TimeSeries object to a file specified by a directory (dir) and leaf file name (dfile). It can do so because the std::vector container is required by the standard to define a contiguous block of memory. This function is expected to be used in MsPASS only under the hood of the python database writer for native saves.</para>
<para>The function constructs a unix path file name as dir+&quot;/&quot;+dfile. If that file does not exist it will be created. If it does exist the write will append to the existing file. The attributes dir, dfile, and foff are always saved in the data&apos;s Metadata container so they can be saved to the MonogoDB database in MsPASS AFTER calling this writer. For that reason d is not const because it simply isn&apos;t.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be saved (altered on return as noted above) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>directory name (assumed to not contain a trailing /) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>leaf file name for save</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file position in output file of the first byte written. the same number is saved in the &quot;foff&quot; metadata attribute.</para>
</simplesect>
\expection This function will throw a MsPASS error for one of several common io related issues. Caller should always include the call to this function in a try block. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" line="37" column="10" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" declline="37" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8h_1a7e71571f94e79ed5cd7839504341957b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int mspass::io::fwrite_to_file</definition>
        <argsstring>(mspass::seismic::Seismogram &amp;d, const std::string dir, const std::string dfile)</argsstring>
        <name>fwrite_to_file</name>
        <qualifiedname>mspass::io::fwrite_to_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dfile</declname>
        </param>
        <briefdescription>
<para>Fast file writer for native Seismogram save to a file. </para>
        </briefdescription>
        <detaileddescription>
<para>When saving data to a file system there is no standard way to do so we know of that is faster than the low level C fwrite function. This function uses fwrite to write ONLY the sample data in the input Seismogram object to a file specified by a directory (dir) and leaf file name (dfile). It can do so because the std::vector container is required by the standard to define a contiguous block of memory. This function is expected to be used in MsPASS only under the hood of the python database writer for native saves. This function works for Seismogram objects it this form only because the dmatrix container puts all the sample data for the 3xnpts matrix in a contiguous block of memory fetched interally with the get_address method.</para>
<para>The function constructs a unix path file name as dir+&quot;/&quot;+dfile. If that file does not exist it will be created. If it does exist the write will append to the existing file. The attributes dir, dfile, and foff are always saved in the data&apos;s Metadata container so they can be saved to the MonogoDB database in MsPASS AFTER calling this writer. For that reason d is not const because it simply isn&apos;t.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be saved (altered on return as noted above) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>directory name (assumed to not contain a trailing /) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>leaf file name for save</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file position in output file of the first byte written. the same number is saved in the &quot;foff&quot; metadata attribute.</para>
</simplesect>
\expection This function will throw a MsPASS error for one of several common io related issues. Caller should always include the call to this function in a try block. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" line="71" column="10" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" declline="71" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8h_1aace938e559ce94f6bc30277c467069a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; long int &gt;</type>
        <definition>std::vector&lt; long int &gt; mspass::io::fwrite_to_file</definition>
        <argsstring>(mspass::seismic::LoggingEnsemble&lt; mspass::seismic::TimeSeries &gt; &amp;d, const std::string dir, const std::string dfile)</argsstring>
        <name>fwrite_to_file</name>
        <qualifiedname>mspass::io::fwrite_to_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">mspass::seismic::LoggingEnsemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dfile</declname>
        </param>
        <briefdescription>
<para>Fast file writer for native Ensemble&lt;TimeSeries&gt; save to a file. </para>
        </briefdescription>
        <detaileddescription>
<para>When saving data to a file system there is no standard way to do so we know of that is faster than the low level C fwrite function. This function uses fwrite to write ONLY the sample data of all TimeSeries objects in the input Ensemble&lt;TimeSeries&gt; object to a file specified by a directory (dir) and leaf file name (dfile). It can do so because the std::vector container is required by the standard to define a contiguous block of memory. This function is expected to be used in MsPASS only under the hood of the python database writer for native saves. This function works for Ensemble&lt;TimeSeries&gt; objects it this form only because the dmatrix container puts all the sample data for the 3xnpts matrix in a contiguous block of memory fetched interally with the get_address method.</para>
<para>The function constructs a unix path file name as dir+&quot;/&quot;+dfile. If that file does not exist it will be created. If it does exist the write will append to the existing file. The attributes dir, dfile, and foff are always saved in the data&apos;s Metadata container so they can be saved to the MonogoDB database in MsPASS AFTER calling this writer. For that reason d is not const because it simply isn&apos;t.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be saved (altered on return as noted above) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>directory name (assumed to not contain a trailing /) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>leaf file name for save</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file position in output file of the first byte written. the same number is saved in the &quot;foff&quot; metadata attribute.</para>
</simplesect>
\expection This function will throw a MsPASS error for one of several common io related issues. Caller should always include the call to this function in a try block.</para>
<para>Write sample data for an Ensemble of TimeSeries to a single file.</para>
<para>Writing ensemble data with this function is more efficient than writing atomic data one at time. The reason is this function writes all the sample data for the ensemble to a single and only opens and closes the file specfied once. It returns a vector of foff values. Dead members have no sample data written and will generate a -1 entry in the foff vector returned. Caller should handle that condition in some way.</para>
<para>If entire ensemble is marked dead it will return an empty vector container.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>input ensemble to save sample data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>directory name (if entry use current directory) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>file name for write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="127" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="127" bodyend="185" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" declline="108" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8h_1a176b9e19269b90d1fa7c42f340dbb95d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; long int &gt;</type>
        <definition>std::vector&lt; long int &gt; mspass::io::fwrite_to_file</definition>
        <argsstring>(mspass::seismic::LoggingEnsemble&lt; mspass::seismic::Seismogram &gt; &amp;d, const std::string dir, const std::string dfile)</argsstring>
        <name>fwrite_to_file</name>
        <qualifiedname>mspass::io::fwrite_to_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">mspass::seismic::LoggingEnsemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dfile</declname>
        </param>
        <briefdescription>
<para>Fast file writer for native Ensemble&lt;Seismogram&gt; save to a file. </para>
        </briefdescription>
        <detaileddescription>
<para>When saving data to a file system there is no standard way to do so we know of that is faster than the low level C fwrite function. This function uses fwrite to write ONLY the sample data of all Seismogram objects in the input Ensemble&lt;Seismogram&gt; object to a file specified by a directory (dir) and leaf file name (dfile). It can do so because the std::vector container is required by the standard to define a contiguous block of memory. This function is expected to be used in MsPASS only under the hood of the python database writer for native saves. This function works for Ensemble&lt;Seismogram&gt; objects it this form only because the dmatrix container puts all the sample data for the 3xnpts matrix in a contiguous block of memory fetched interally with the get_address method.</para>
<para>The function constructs a unix path file name as dir+&quot;/&quot;+dfile. If that file does not exist it will be created. If it does exist the write will append to the existing file. The attributes dir, dfile, and foff are always saved in the data&apos;s Metadata container so they can be saved to the MonogoDB database in MsPASS AFTER calling this writer. For that reason d is not const because it simply isn&apos;t.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be saved (altered on return as noted above) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>directory name (assumed to not contain a trailing /) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>leaf file name for save</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file position in output file of the first byte written. the same number is saved in the &quot;foff&quot; metadata attribute.</para>
</simplesect>
\expection This function will throw a MsPASS error for one of several common io related issues. Caller should always include the call to this function in a try block.</para>
<para>Write sample data for an Ensemble of Seismogram objects to a single file.</para>
<para>Writing ensemble data with this function is more efficient than writing atomic data one at time. The reason is this function writes all the sample data for the ensemble to a single and only opens and closes the file specfied once. It returns a vector of foff values. Dead members have no sample data written and will generate a -1 entry in the foff vector returned. Caller should handle that condition in some way.</para>
<para>If entire ensemble is marked dead it will return an empty vector container.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>input ensemble to save sample data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>directory name (if entry use current directory) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>file name for write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="203" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="203" bodyend="260" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" declline="145" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8h_1aa271a69b12e7c945f1779b07c3157eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mspass::io::fread_from_file</definition>
        <argsstring>(mspass::seismic::Seismogram &amp;d, const std::string dir, const std::string dfile, const long int foff)</argsstring>
        <name>fread_from_file</name>
        <qualifiedname>mspass::io::fread_from_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dfile</declname>
        </param>
        <param>
          <type>const long int</type>
          <declname>foff</declname>
        </param>
        <briefdescription>
<para>Use C fread to read sample data from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>This low level function is used in the file based reader of mspass to speed up python readers. It is intrinsically dangerous because it assumes the data object has a preconstructed size sufficient to hold the data loaded with the low-level C fread function. That buffer in this function is the the dmatrix container, u, used to hold the sample data of a Seismogram object. The reader assumes the input has been initialized on construction or with set_npts to the size matching the data file contents. If there is a mismatch the results are unpredictable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Seismogram</parametername>
</parameternamelist>
<parameterdescription>
<para>object to hold the sample data to be read from the file. Note that this function acts like a subroutine with entire purpose being to fill the data array of this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>is the directory name to use for file name (no trailing slash) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>is the leaf file name to be openned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>foff</parametername>
</parameternamelist>
<parameterdescription>
<para>is a the number of bytes to seek for first byte of data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of samples read. Note caller should test this value as a short read will not cause an error to be thrown. The value return should be 3 * d.npts().</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>This</parametername>
</parameternamelist>
<parameterdescription>
<para>function may throw a MsPASSError exception if anything goes wrong in the read process (open failure, seek fails, fread fails completely). If that happens the data result should be killed as the sample contents are guaranteed to be invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" line="177" column="8" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" declline="177" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8h_1acef153567669e5ea4f8d597ddfc1a947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mspass::io::fread_from_file</definition>
        <argsstring>(mspass::seismic::TimeSeries &amp;d, const std::string dir, const std::string dfile, const long int foff)</argsstring>
        <name>fread_from_file</name>
        <qualifiedname>mspass::io::fread_from_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dfile</declname>
        </param>
        <param>
          <type>const long int</type>
          <declname>foff</declname>
        </param>
        <briefdescription>
<para>Use C fread to read sample data from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>This low level function is used in the file based reader of mspass to speed up python readers. It is intrinsically dangerous because it assumes the data object has a preconstructed size sufficient to hold the data loaded with the low-level C fread function. That buffer in this function is the std::vector container, s, used to hold the sample data of a Seismogram object. The reader assumes the input has been initialized on construction or with set_npts to the size matching the data file contents. If there is a mismatch the results are unpredictable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TimeSeries</parametername>
</parameternamelist>
<parameterdescription>
<para>object to hold the sample data to be read from the file Note that this function acts like a subroutine with entire purpose being to fill the data array of this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>is the directory name to use for file name (no trailing slash) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>is the leaf file name to be openned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>foff</parametername>
</parameternamelist>
<parameterdescription>
<para>is a the number of bytes to seek for first byte of data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of samples read. Note caller should test this value as a short read will not cause an error to be thrown. The value return should be d.npts().</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>This</parametername>
</parameternamelist>
<parameterdescription>
<para>function may throw a MsPASSError exception if anything goes wrong in the read process (open failure, seek fails, fread fails completely). If that happens the data result should be killed as the sample contents are guaranteed to be invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" line="209" column="8" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" declline="209" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8h_1ab6132d1426467179c06b7c94aef66a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mspass::io::fread_from_file</definition>
        <argsstring>(mspass::seismic::LoggingEnsemble&lt; mspass::seismic::TimeSeries &gt; &amp;de, const std::string dir, const std::string dfile, std::vector&lt; long int &gt; indexes)</argsstring>
        <name>fread_from_file</name>
        <qualifiedname>mspass::io::fread_from_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">mspass::seismic::LoggingEnsemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &gt; &amp;</type>
          <declname>de</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dfile</declname>
        </param>
        <param>
          <type>std::vector&lt; long int &gt;</type>
          <declname>indexes</declname>
        </param>
        <briefdescription>
<para>Use C fread to read multiple TimeSeries from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>This low level function is used in the file based reader of mspass to speed up python readers. It is intrinsically dangerous because it assumes the data object has a preconstructed size sufficient to hold the data loaded with the low-level C fread function. The reader assumes the input has been initialized on construction or with set_npts to the size matching the data file contents. If there is a mismatch the results are unpredictable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ensemble&lt;TimeSeries&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>object to hold the sample data to be read from the files. Note that this function acts like a subroutine with entire purpose being to fill the data array of this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>is the directory name to use for file name (no trailing slash) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>is the leaf file name to be openned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>foffs</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector of the number of bytes to seek for first byte of all TimeSeries objects to be read in the given file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexes</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector of indexes of TimeSeries objects to be read to the ensemble. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>is the size of the ensemble. It is used to resize the ensemble.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>total number of samples read for all TimeSeries objects. Note caller should test this value as a short read will not cause an error to be thrown.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>This</parametername>
</parameternamelist>
<parameterdescription>
<para>function may throw a MsPASSError exception if anything goes wrong in the read process (open failure, seek fails, fread fails completely). If that happens the data result should be killed as the sample contents are guaranteed to be invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="371" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="371" bodyend="433" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" declline="242" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8h_1a20caa06868a6777ab05715499e81c7c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mspass::io::fread_from_file</definition>
        <argsstring>(mspass::seismic::LoggingEnsemble&lt; mspass::seismic::Seismogram &gt; &amp;de, const std::string dir, const std::string dfile, std::vector&lt; long int &gt; indexes)</argsstring>
        <name>fread_from_file</name>
        <qualifiedname>mspass::io::fread_from_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">mspass::seismic::LoggingEnsemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &gt; &amp;</type>
          <declname>de</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>dfile</declname>
        </param>
        <param>
          <type>std::vector&lt; long int &gt;</type>
          <declname>indexes</declname>
        </param>
        <briefdescription>
<para>Use C fread to read multiple Seismogram from a file. </para>
        </briefdescription>
        <detaileddescription>
<para>This low level function is used in the file based reader of mspass to speed up python readers. It is intrinsically dangerous because it assumes the data object has a preconstructed size sufficient to hold the data loaded with the low-level C fread function. The reader assumes the input has been initialized on construction or with set_npts to the size matching the data file contents. If there is a mismatch the results are unpredictable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ensemble&lt;Seismogram&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>object to hold the sample data to be read from the files. Note that this function acts like a subroutine with entire purpose being to fill the data array of this object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>is the directory name to use for file name (no trailing slash) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfile</parametername>
</parameternamelist>
<parameterdescription>
<para>is the leaf file name to be openned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>foffs</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector of the number of bytes to seek for first byte of all Seismogram objects to be read in the given file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexes</parametername>
</parameternamelist>
<parameterdescription>
<para>is a vector of indexes of Seismogram objects to be read to the ensemble. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>is the size of the ensemble. It is used to resize the ensemble.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>total number of samples read for all Seismogram objects. Note caller should test this value as a short read will not cause an error to be thrown.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>This</parametername>
</parameternamelist>
<parameterdescription>
<para>function may throw a MsPASSError exception if anything goes wrong in the read process (open failure, seek fails, fread fails completely). If that happens the data result should be killed as the sample contents are guaranteed to be invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="309" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="309" bodyend="370" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" declline="277" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mseed__index_8h_1a07ef379bb63d712a15b356cfc57c8622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::vector&lt; <ref refid="classmspass_1_1io_1_1mseed__index" kindref="compound">mseed_index</ref> &gt;, <ref refid="classmspass_1_1utility_1_1_error_logger" kindref="compound">mspass::utility::ErrorLogger</ref> &gt;</type>
        <definition>std::pair&lt; std::vector&lt; mseed_index &gt;, mspass::utility::ErrorLogger &gt; mspass::io::mseed_file_indexer</definition>
        <argsstring>(const std::string inputfile, const bool segment_timetears, const bool Verbose)</argsstring>
        <name>mseed_file_indexer</name>
        <qualifiedname>mspass::io::mseed_file_indexer</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>inputfile</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>segment_timetears</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>Verbose</declname>
        </param>
        <briefdescription>
<para>Construct an index for a miniseed file. </para>
        </briefdescription>
        <detaileddescription>
<para>Miniseed is a packetized data format in which time series data are packaged into packets of a fixed size with a minimal header needed to uniquely define the contents. Because of that format it is possible and common practice to concatenate miniseed files with packets arranged in time sequence together. That is particularly essential for large data sets and on HPC file systems that have performance problems with many small files. This function was written to build an index for such files to provide a means for a reader to efficiently find a particular piece of data and decode the miniseed packets into TimeSeries objects. In mspass this function would, to most users, be treated as under the hood and of interest only if something breaks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputfile</parametername>
</parameternamelist>
<parameterdescription>
<para>is the miniseed file to be indexed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment_timetears</parametername>
</parameternamelist>
<parameterdescription>
<para>is a boolean that controls the behavior when a time tear is encountered. A time tear is defined as a mismatch in the computed endtime of the last packet read and the current packet starttime differing by more than 1/2 a sample. When false these are ignored assuming the reader will handle the problem by some form of gap processing. When true a new index entry will be created at the time tear. Always use true if there is any possibility of the same channel of data in the file in consecutive packets that aren&apos;t an actual time tear in this sense. e.g. event data concenated so all channels are back to back would require using this parameter true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>is a boolean largely controlling how time tears are or are not logged. That is, at present if this parameter is true any time the logic detects a time tear it is logged in the returned error log as an informational log message. If false only reading errors for things like garbled miniseed packets are logged. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>return</parametername>
</parameternamelist>
<parameterdescription>
<para>is an std::pair. &quot;First&quot; contains a vector of objects called <ref refid="classmspass_1_1io_1_1mseed__index" kindref="compound">mseed_index</ref> that contain the basic information defining an index for inputfile. See class description of <ref refid="classmspass_1_1io_1_1mseed__index" kindref="compound">mseed_index</ref> for more details. &quot;second&quot; contains an ErrorLogger objects. Caller should test that the contents are empty and if not save the error log or print it. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/io/mseed_index.h" line="102" column="1" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/io/mseed_index.h" declline="102" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8cc_1a01039e857800708323e459f372d38d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int mspass::io::fwrite_sample_data</definition>
        <argsstring>(const string dir, const string dfile, double *dptr, const size_t nd)</argsstring>
        <name>fwrite_sample_data</name>
        <qualifiedname>mspass::io::fwrite_sample_data</qualifiedname>
        <param>
          <type>const string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dfile</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dptr</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="29" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="29" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8cc_1ae290073e53ca7d094d152e3a3ee65085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int mspass::io::fwrite_to_file</definition>
        <argsstring>(TimeSeries &amp;d, const string dir, const string dfile)</argsstring>
        <name>fwrite_to_file</name>
        <qualifiedname>mspass::io::fwrite_to_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write sample data for a TimeSeries to a file with fwrite. Always appends and returns foff of the position where fwrite wrote these data. Returns -1 if it receives a datum marked dead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="68" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="68" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8cc_1a5e6fc74e51d5bf9eb393d6abde3518d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int mspass::io::fwrite_to_file</definition>
        <argsstring>(Seismogram &amp;d, const string dir, const string dfile)</argsstring>
        <name>fwrite_to_file</name>
        <qualifiedname>mspass::io::fwrite_to_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write sample data for a Seismogram to a file with fwrite. Always appends and returns foff of the position where fwrite wrote these data. Note the data are a raw dump of the contiguous block storing the 3*npts sample matrix.</para>
<para>Returns -1 if it receives a datum marked dead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="93" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="93" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8cc_1aa6a536e819148eb66f735ed6ab002e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mspass::io::fread_sample_data</definition>
        <argsstring>(double *buffer, const string dir, const string dfile, const long int foff, const int nsamples)</argsstring>
        <name>fread_sample_data</name>
        <qualifiedname>mspass::io::fread_sample_data</qualifiedname>
        <param>
          <type>double *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dfile</declname>
        </param>
        <param>
          <type>const long int</type>
          <declname>foff</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nsamples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="262" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="262" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8cc_1ae1f3e216145ee0c136324079ebd24b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mspass::io::fread_from_file</definition>
        <argsstring>(Seismogram &amp;d, const string dir, const string dfile, const long int foff)</argsstring>
        <name>fread_from_file</name>
        <qualifiedname>mspass::io::fread_from_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dfile</declname>
        </param>
        <param>
          <type>const long int</type>
          <declname>foff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="288" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="288" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="fileio_8cc_1acf03563760e97d0c44fa7f3262264ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mspass::io::fread_from_file</definition>
        <argsstring>(TimeSeries &amp;d, const string dir, const string dfile, const long int foff)</argsstring>
        <name>fread_from_file</name>
        <qualifiedname>mspass::io::fread_from_file</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>dfile</declname>
        </param>
        <param>
          <type>const long int</type>
          <declname>foff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" line="299" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/fileio.cc" bodystart="299" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="mseed__file__indexer_8cc_1ac470c9ed9b76ba66420a7eaf74f16bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mspass::io::MS_code_to_message</definition>
        <argsstring>(int retcode)</argsstring>
        <name>MS_code_to_message</name>
        <qualifiedname>mspass::io::MS_code_to_message</qualifiedname>
        <param>
          <type>int</type>
          <declname>retcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal function translates miniseed reader function return codes to readable messages posted in mseed_file_indexer to ErrorLogger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_file_indexer.cc" line="95" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_file_indexer.cc" bodystart="95" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="mseed__file__indexer_8cc_1afe2800b7fa24249de92f7ff6ec6db65b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MSDINDEX_returntype</type>
        <definition>MSDINDEX_returntype mspass::io::mseed_file_indexer</definition>
        <argsstring>(const string inputfile, const bool segment_timetears, const bool Verbose)</argsstring>
        <name>mseed_file_indexer</name>
        <qualifiedname>mspass::io::mseed_file_indexer</qualifiedname>
        <param>
          <type>const string</type>
          <declname>inputfile</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>segment_timetears</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>Verbose</declname>
        </param>
        <briefdescription>
<para>Indexing function using libmseed low level function ms3_readmsr_r. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses what has become the standard reader for miniseed from IRIS DMC called libmseed. It uses the low level C function ms3_readmsr_r to read an input file one packet at a time. It uses the version that is claimed to be thread safe.</para>
<para>The complexities of seed can cause a number of problems. This version tries to deal these complexities:<orderedlist>
<listitem><para>miniseed files are often produced by concatenation of data form multiple channel. Any change in station id returned by the function triggers a new index entry.</para>
</listitem><listitem><para>Packet errors will force a new segment.</para>
</listitem><listitem><para>Time tears defined by either a jump or accumulated time mismatch of more than 1/2 sample will trigger a new segments.</para>
</listitem><listitem><para>Changes in sample interval trigger a new segments. That is actually implicit in point 1 with the &quot;sid&quot; because of the seed channel code naming convention. <simplesect kind="return"><para>std::pair first is a vector of index data. second is an ErrorLogger object. Caller should test for empty vector that is a signal for a open failure or a file that probably isn&apos;t miniseed. The content of elog should always be tested as any errors there should be inspected/handled. </para>
</simplesect>
</para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_file_indexer.cc" line="154" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_file_indexer.cc" bodystart="154" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="mseed__index_8cc_1a60a85760a0207ee75e54b84f6db82954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostringstream &amp;</type>
        <definition>std::ostringstream &amp; mspass::io::operator&lt;&lt;</definition>
        <argsstring>(std::ostringstream &amp;ss, const mseed_index &amp;ind)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>mspass::io::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostringstream &amp;</type>
          <declname>ss</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1io_1_1mseed__index" kindref="compound">mseed_index</ref> &amp;</type>
          <declname>ind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_index.cc" line="6" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/io/mseed_index.cc" bodystart="6" bodyend="16"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/io/fileio.h" line="7" column="1"/>
  </compounddef>
</doxygen>
