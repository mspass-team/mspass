<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmspass_1_1seismic_1_1_basic_time_series" kind="class" language="C++" prot="public">
    <compoundname>mspass::seismic::BasicTimeSeries</compoundname>
    <derivedcompoundref refid="classmspass_1_1seismic_1_1_core_seismogram" prot="public" virt="non-virtual">mspass::seismic::CoreSeismogram</derivedcompoundref>
    <derivedcompoundref refid="classmspass_1_1seismic_1_1_core_time_series" prot="public" virt="non-virtual">mspass::seismic::CoreTimeSeries</derivedcompoundref>
    <includes refid="_basic_time_series_8h" local="no">BasicTimeSeries.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicTimeSeries::mlive</definition>
        <argsstring></argsstring>
        <name>mlive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Boolean defining if a data object has valid data or is to be ignored. Data processing often requires data to be marked bad but keep the original data around in case an error was made. This boolean allows this capability. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="272" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::mdt</definition>
        <argsstring></argsstring>
        <name>mdt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sample interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="276" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::mt0</definition>
        <argsstring></argsstring>
        <name>mt0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data start time. That is the time of the first sample of data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="280" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t mspass::seismic::BasicTimeSeries::nsamp</definition>
        <argsstring></argsstring>
        <name>nsamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of data samples in this data object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="284" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2" kindref="member">TimeReferenceType</ref></type>
        <definition>TimeReferenceType mspass::seismic::BasicTimeSeries::tref</definition>
        <argsstring></argsstring>
        <name>tref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time reference standard for this data object. Defined by enum Time_Reference this currently is only one of two things. When set as &quot;UTC&quot; the time standard is an epoch time. When set as &quot;relative&quot; time has no relationship to any external standard but are relative to some arbitrary reference that must ascertained by the algorithm by some other means (in seispp this is normally done through a metadata object). A classic example is multichannel data where channels have a time relative to a shot time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="294" column="19" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_time_series_1af749170531556c0c39ba6916057d2b17" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicTimeSeries::t0shift_is_valid</definition>
        <argsstring></argsstring>
        <name>t0shift_is_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="298" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_basic_time_series_1ae79b68bf89b4cd4e6001bbf2c491f539" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::t0shift</definition>
        <argsstring></argsstring>
        <name>t0shift</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="301" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a02072f2001d400e7f7ab5f9463e236c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::BasicTimeSeries::BasicTimeSeries</definition>
        <argsstring>()</argsstring>
        <name>BasicTimeSeries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Does essentially nothing since a <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> object has no data. Does initialize data to avoid run time checkers bitching about unitialized data, but values are meaningless when this constructor is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="44" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/BasicTimeSeries.cc" bodystart="42" bodyend="51"/>
        <references refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2a2ca9469819fb0fb61ff98e914a7ccca0">mspass::seismic::Relative</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a8945a16bf52101d89dbc6f7b907b3fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::BasicTimeSeries::BasicTimeSeries</definition>
        <argsstring>(const BasicTimeSeries &amp;)</argsstring>
        <name>BasicTimeSeries</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> &amp;</type>
          <defname>tsin</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="48" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/BasicTimeSeries.cc" bodystart="52" bodyend="61"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="276">mdt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="272">mlive</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="280">mt0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="284">nsamp</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" compoundref="_basic_time_series_8h" startline="294">tref</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a2839e2405b168e0f1ad4d236f31eac8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual mspass::seismic::BasicTimeSeries::~BasicTimeSeries</definition>
        <argsstring>()</argsstring>
        <name>~BasicTimeSeries</name>
        <briefdescription>
<para>Virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>A base class with virtual members like this requires this incantation to avoid some odd conflicts. This particular one was added to make the boost::serialization code work properly. The geeky details for why this is necessary can be found in Scott Meyers book &quot;Effective C++&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="56" column="11" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a438b4f6453a4ff2a46de53dfdf3599c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::time</definition>
        <argsstring>(const int i) const</argsstring>
        <name>time</name>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the time of sample i. It is common to need to ask for the time of a given sample. This standardizes this common operation in an obvious way. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- sample number to compute time for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="63" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="63" bodyend="66"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="276">mdt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="280">mt0</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::seismic::BasicTimeSeries::sample_number</definition>
        <argsstring>(double t) const</argsstring>
        <name>sample_number</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inverse of time function. That is, it returns the integer position of a given time t within a time series. The returned number is not tested for validity compared to the data range. This is the callers responsibility as this is a common error condition that should not require the overhead of an exception. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="74" column="5" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="74" bodyend="77"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="276">mdt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="280">mt0</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1af8982109d3caaeee15bb5b3a63b89317" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::endtime</definition>
        <argsstring>() const noexcept</argsstring>
        <name>endtime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the end time (time associated with last data sample) of this data object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="82" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="82" bodyend="85"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="276">mdt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="280">mt0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="284">nsamp</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a1e83b446d82202d808504429b0257eb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicTimeSeries::shifted</definition>
        <argsstring>() const</argsstring>
        <name>shifted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if a time shift has been applied to the data. Never true if data were never in an absolute time frame (i.e.UTC) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="88" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a1d49cd81d43cded641b84864081cb74a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::get_t0shift</definition>
        <argsstring>() const</argsstring>
        <name>get_t0shift</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the current value of the t0shift attribute - argument to restore to UTC </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="93" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a83c9a758b4a05ebddf09e17373b1e656" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::time_reference</definition>
        <argsstring>() const</argsstring>
        <name>time_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the reference time.</para>
<para>We distinguish relative and UTC time by a time shift constant stored with the object. This returns the time shift to return data to an epoch time.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>SeisppError</parametername>
</parameternamelist>
<parameterdescription>
<para>object if the request is not rational. That is this request only makes sense if the data began with an absolute time and was converted with the ator method. Some cross checks are made for consistency that can throw an error in this condition. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="107" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/BasicTimeSeries.cc" bodystart="86" bodyend="100"/>
        <references refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2a9234324ddf6b4176b57d803a925b7961">mspass::seismic::UTC</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1ab87672dc6adffed90b0dc9c144219d44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicTimeSeries::force_t0_shift</definition>
        <argsstring>(const double t)</argsstring>
        <name>force_t0_shift</name>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Force a t0 shift value on data. </para>
        </briefdescription>
        <detaileddescription>
<para>This is largely an interface routine for constructors that need to handle data in relative time that are derived from an absolute base. It can also be used to fake processing routines that demand data be in absolute time when the original data were not. It was added for MsPASS to support reads and writes to MongoDB where we want to be able to read and write data that had been previously time shifted (e.g. ArrivalTimeReference).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>is the time shift to force </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="120" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1adfb9a7a1162b72d5d33e7e3430117611" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicTimeSeries::ator</definition>
        <argsstring>(const double tshift)</argsstring>
        <name>ator</name>
        <reimplementedby refid="classmspass_1_1seismic_1_1_time_series_w_gaps_1ac0738e8e0441f49d3c03b504dc7e44b9">ator</reimplementedby>
        <param>
          <type>const double</type>
          <declname>tshift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Absolute to relative time conversion. Sometimes we want to convert data from absolute time (epoch times) to a relative time standard. Examples are conversions to travel time using an event origin time or shifting to an arrival time reference frame. This operation simply switches the tref variable and alters t0 by tshift. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tshift</parametername>
</parameternamelist>
<parameterdescription>
<para>- time shift applied to data before switching data to relative time mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="134" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/BasicTimeSeries.cc" bodystart="9" bodyend="18"/>
        <references refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2a2ca9469819fb0fb61ff98e914a7ccca0">mspass::seismic::Relative</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a21faa1455f1b3a0b723e7ee136ac4d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicTimeSeries::rtoa</definition>
        <argsstring>()</argsstring>
        <name>rtoa</name>
        <reimplementedby refid="classmspass_1_1seismic_1_1_time_series_w_gaps_1a51eefbc8e6a034148da8f36e21870fe2">rtoa</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Relative to absolute time conversion. Sometimes we want to convert data from relative time to to an UTC time standard. An example would be converting segy shot data to something that could be processed like earthquake data in a css3.0 database.</para>
<para>This method returns data previously converted to relative back to UTC using the internally stored time shift attribute. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="143" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/BasicTimeSeries.cc" bodystart="21" bodyend="40"/>
        <references refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2a9234324ddf6b4176b57d803a925b7961">mspass::seismic::UTC</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a35bf7426cc825e9b3dcf3226816d8316" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicTimeSeries::shift</definition>
        <argsstring>(const double dt)</argsstring>
        <name>shift</name>
        <reimplementedby refid="classmspass_1_1seismic_1_1_time_series_w_gaps_1a42f1e02964fb1b689e40bc6e4e3d2ac3">shift</reimplementedby>
        <param>
          <type>const double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shift the reference time.</para>
<para>Sometimes we need to shift the reference time t0. An example is a moveout correction. This method shifts the reference time by dt. Note a positive dt means data aligned to zero will be shifted left because relative time is t-t0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="150" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/BasicTimeSeries.cc" bodystart="76" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a8aae898b7cf2f75d111b3eb6d8184396" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicTimeSeries::live</definition>
        <argsstring>() const</argsstring>
        <name>live</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true of data are marked valid (live). <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="152" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="152" bodyend="152"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="272">mlive</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicTimeSeries::dead</definition>
        <argsstring>() const</argsstring>
        <name>dead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the data have been marked bad (killed) - inverse of <ref refid="classmspass_1_1seismic_1_1_basic_time_series_1a8aae898b7cf2f75d111b3eb6d8184396" kindref="member">live()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="154" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="154" bodyend="154"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="272">mlive</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1acc56784b2aaadf8223a9e189830ae3dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicTimeSeries::kill</definition>
        <argsstring>()</argsstring>
        <name>kill</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark these data bad. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="156" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="156" bodyend="156"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="272">mlive</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a1ca7ba8bcd8337bd49d438664e74966d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicTimeSeries::set_live</definition>
        <argsstring>()</argsstring>
        <name>set_live</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inverse of kill - marks data live overriding anything set before. Use to resurrect data improperly killed (useful only for interactive editing) or creating data pieces outside constructors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="160" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="160" bodyend="160"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="272">mlive</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1af31c96c0e2173d7581e1c3a3f8bcfde8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::dt</definition>
        <argsstring>() const</argsstring>
        <name>dt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the data sample interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="162" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="162" bodyend="162"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="276">mdt</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1aaf47da6a5d44415cf8a3b70e9a0bc5d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicTimeSeries::time_is_UTC</definition>
        <argsstring>() const</argsstring>
        <name>time_is_UTC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if the time standard is UTC. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="164" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="164" bodyend="170"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" compoundref="_basic_time_series_8h" startline="294">tref</references>
        <references refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2a9234324ddf6b4176b57d803a925b7961">mspass::seismic::UTC</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a858bde44fbc9801ba833970604c965d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::BasicTimeSeries::time_is_relative</definition>
        <argsstring>() const</argsstring>
        <name>time_is_relative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="171" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="171" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1ac0f23a3d725302665f4ff0c576b39237" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2" kindref="member">TimeReferenceType</ref></type>
        <definition>TimeReferenceType mspass::seismic::BasicTimeSeries::timetype</definition>
        <argsstring>() const</argsstring>
        <name>timetype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="178" column="19" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a21bbb21d3debe26b9c185dc0c93651d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::samprate</definition>
        <argsstring>() const</argsstring>
        <name>samprate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return sample rate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="183" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="183" bodyend="186"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="276">mdt</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mspass::seismic::BasicTimeSeries::npts</definition>
        <argsstring>() const</argsstring>
        <name>npts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of points in the data series. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="188" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="188" bodyend="188"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="284">nsamp</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a472074f3074d59f794d18017b010ab81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::BasicTimeSeries::t0</definition>
        <argsstring>() const</argsstring>
        <name>t0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return time of first data sample. An epoch time or relative time depending on TimeReferenceType private variable tref </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="191" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="191" bodyend="191"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="280">mt0</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a8bcb6a1e85d833514d7e9bd28a04d3e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; mspass::seismic::BasicTimeSeries::time_axis</definition>
        <argsstring>() const</argsstring>
        <name>time_axis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a vector with the time of each sample.</para>
<para>There are times when it is desirable to have a parallel vector to sample data that contains the actual times of each sample rather than using the implicit time t0+n*dt. A case in point is graphics where time is the x axis in a standard plot. This function returns an nsamp length std::vector of the time values of each sample. <linebreak/>
 Note this is a base class method that makes sense only in subclasses that have data in a sample vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="202" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/BasicTimeSeries.cc" bodystart="101" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a1813dfea28479ff50528e8ed008e62e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void mspass::seismic::BasicTimeSeries::set_dt</definition>
        <argsstring>(const double sample_interval)</argsstring>
        <name>set_dt</name>
        <reimplementedby refid="classmspass_1_1seismic_1_1_core_seismogram_1a5e51c2c6d3a1aa02281ba242a1d15bf2">set_dt</reimplementedby>
        <reimplementedby refid="classmspass_1_1seismic_1_1_core_time_series_1a97ff6732aa816b0c327c5bf667ffe841">set_dt</reimplementedby>
        <param>
          <type>const double</type>
          <declname>sample_interval</declname>
        </param>
        <briefdescription>
<para>Set the sample interval. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a simple setter for the sample interval attribute. It is virtual because children may want to do more than just set the attribute in this base class. In MsPASS that means keeping the Metadata attributes that define sample interval in sync with the data. Aliases further complicate that issue so it is not trivial. Other data objects that could be derived form this base could have similar issues.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new data sample interval to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="214" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="214" bodyend="217"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="276">mdt</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1a4101771f4d687d43f4ae79bfebef3f7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void mspass::seismic::BasicTimeSeries::set_npts</definition>
        <argsstring>(const size_t npts)</argsstring>
        <name>set_npts</name>
        <reimplementedby refid="classmspass_1_1seismic_1_1_core_seismogram_1ae94bac250fe5928ced41babc322c2c79">set_npts</reimplementedby>
        <reimplementedby refid="classmspass_1_1seismic_1_1_core_time_series_1ae538485ac0aed2f8691477dffce6cda8">set_npts</reimplementedby>
        <param>
          <type>const size_t</type>
          <declname>npts</declname>
        </param>
        <briefdescription>
<para>Set the number of samples attribute for data. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a simple setter for the number of samples attribute. It is virtual because children may want to do more than just set the attribute in this base class. In MsPASS that means keeping the Metadata attributes that define the number of points in sync with the data. Aliases further complicate that issue so it is not trivial. Other data objects that could be derived form this base could have similar issues.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>npts</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new number of points to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="229" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="229" bodyend="232"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="188" endline="188">npts</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="284">nsamp</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1abe29da17a295b2b439951d3ab6378caf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void mspass::seismic::BasicTimeSeries::set_t0</definition>
        <argsstring>(const double t0in)</argsstring>
        <name>set_t0</name>
        <reimplementedby refid="classmspass_1_1seismic_1_1_core_seismogram_1a7724b7cfa40eebf0b15e0d2b39ae615e">set_t0</reimplementedby>
        <reimplementedby refid="classmspass_1_1seismic_1_1_core_time_series_1ae90b28cff0bc1997aa65a1693d8562d0">set_t0</reimplementedby>
        <param>
          <type>const double</type>
          <declname>t0in</declname>
        </param>
        <briefdescription>
<para>Set the data start time. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a simple setter for the start time attribute. It is virtual because children may want to do more than just set the attribute in this base class. In MsPASS that means keeping the Metadata attributes that define t0 in sync with the data. Aliases further complicate that issue so it is not trivial. Other data objects that could be derived form this base could have similar issues.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t0in</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new data sample interval to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="244" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="244" bodyend="247"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="280">mt0</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1ac3f8c8200710fe0d3ef211c7c758e864" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::BasicTimeSeries::set_tref</definition>
        <argsstring>(const TimeReferenceType newtref)</argsstring>
        <name>set_tref</name>
        <param>
          <type>const <ref refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2" kindref="member">TimeReferenceType</ref></type>
          <declname>newtref</declname>
        </param>
        <briefdescription>
<para>Force the time standard. </para>
        </briefdescription>
        <detaileddescription>
<para>Time series data may have multiple concepts of what the time standard is. In MsPASS the allowed values currently are UTC and relative defined by the TimeReferenceType enum class. Other implementations might need to use some other standard (e.g. raw gps time is not utc). This method allows forcing a standard. It is not recommended for normal use, but only as a brutal solution for assembling a data object outside normal constructors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newtref</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new time standard to set for these data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="259" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="259" bodyend="262"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" compoundref="_basic_time_series_8h" startline="294">tref</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1aaf05bc1fe471e194bec093906c1a607c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> &amp;</type>
        <definition>BasicTimeSeries &amp; mspass::seismic::BasicTimeSeries::operator=</definition>
        <argsstring>(const BasicTimeSeries &amp;parent)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="264" column="19" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/BasicTimeSeries.cc" bodystart="62" bodyend="75"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="276">mdt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="272">mlive</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="280">mt0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="284">nsamp</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" compoundref="_basic_time_series_8h" startline="294">tref</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_basic_time_series_1aff7a04b56570c6261be83c854a55a53b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mspass::seismic::BasicTimeSeries::serialize</definition>
        <argsstring>(Archive &amp;ar, const unsigned int version)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="305" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="305" bodyend="314"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for time series objects. </para>
    </briefdescription>
    <detaileddescription>
<para>This is a mostly abstract class defining data and methods shared by all data objects that are time series. In MsPASS time series means data sampled on a 1d, uniform grid defined by a sample rate, start time, and number of samples. Derived types can be scalar, vector, complex, or any data that is uniformly sampled.</para>
<para>The seispp version of this class had public attributes for key data are essential for defining any time series data (e.g. sample interval). This was revised in MsPASS to use getters and putters to provide a cleaner interface to python with pybind11.</para>
<para><simplesect kind="author"><para>Gary L. Pavlis </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>mspass::seismic::TimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_time_series"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>mspass::seismic::BasicTimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_basic_time_series"/>
      </node>
      <node id="2">
        <label>mspass::seismic::CoreSeismogram</label>
        <link refid="classmspass_1_1seismic_1_1_core_seismogram"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>mspass::seismic::TimeSeriesWGaps</label>
        <link refid="classmspass_1_1seismic_1_1_time_series_w_gaps"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mspass::seismic::SeismogramWGaps</label>
        <link refid="classmspass_1_1seismic_1_1_seismogram_w_gaps"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>mspass::seismic::Seismogram</label>
        <link refid="classmspass_1_1seismic_1_1_seismogram"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>mspass::seismic::CoreTimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_core_time_series"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" line="34" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/BasicTimeSeries.h" bodystart="35" bodyend="315"/>
    <listofallmembers>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1adfb9a7a1162b72d5d33e7e3430117611" prot="public" virt="virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>ator</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a02072f2001d400e7f7ab5f9463e236c8" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>BasicTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a8945a16bf52101d89dbc6f7b907b3fd9" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>BasicTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>dead</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1af31c96c0e2173d7581e1c3a3f8bcfde8" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1af8982109d3caaeee15bb5b3a63b89317" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>endtime</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ab87672dc6adffed90b0dc9c144219d44" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>force_t0_shift</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a1d49cd81d43cded641b84864081cb74a" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>get_t0shift</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1acc56784b2aaadf8223a9e189830ae3dc" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>kill</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a8aae898b7cf2f75d111b3eb6d8184396" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>live</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>mdt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>mlive</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>mt0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>nsamp</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aaf05bc1fe471e194bec093906c1a607c" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a21faa1455f1b3a0b723e7ee136ac4d2b" prot="public" virt="virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>rtoa</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>sample_number</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a21bbb21d3debe26b9c185dc0c93651d0" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>samprate</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aff7a04b56570c6261be83c854a55a53b" prot="private" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>serialize</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a1813dfea28479ff50528e8ed008e62e8" prot="public" virt="virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>set_dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a1ca7ba8bcd8337bd49d438664e74966d" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>set_live</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a4101771f4d687d43f4ae79bfebef3f7c" prot="public" virt="virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>set_npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1abe29da17a295b2b439951d3ab6378caf" prot="public" virt="virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>set_t0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ac3f8c8200710fe0d3ef211c7c758e864" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>set_tref</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a35bf7426cc825e9b3dcf3226816d8316" prot="public" virt="virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>shift</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a1e83b446d82202d808504429b0257eb0" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>shifted</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a472074f3074d59f794d18017b010ab81" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>t0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ae79b68bf89b4cd4e6001bbf2c491f539" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>t0shift</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1af749170531556c0c39ba6916057d2b17" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>t0shift_is_valid</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a438b4f6453a4ff2a46de53dfdf3599c2" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>time</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a8bcb6a1e85d833514d7e9bd28a04d3e8" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>time_axis</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a858bde44fbc9801ba833970604c965d1" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>time_is_relative</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aaf47da6a5d44415cf8a3b70e9a0bc5d5" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>time_is_UTC</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a83c9a758b4a05ebddf09e17373b1e656" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>time_reference</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ac0f23a3d725302665f4ff0c576b39237" prot="public" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>timetype</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" prot="protected" virt="non-virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>tref</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a2839e2405b168e0f1ad4d236f31eac8e" prot="public" virt="virtual"><scope>mspass::seismic::BasicTimeSeries</scope><name>~BasicTimeSeries</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
