<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_processing_history_8cc" kind="file" language="C++">
    <compoundname>ProcessingHistory.cc</compoundname>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">list</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">sstream</includes>
    <includes refid="_ms_p_a_s_s_error_8h" local="yes">mspass/utility/MsPASSError.h</includes>
    <includes refid="_processing_history_8h" local="yes">mspass/utility/ProcessingHistory.h</includes>
    <incdepgraph>
      <node id="4">
        <label>list</label>
      </node>
      <node id="13">
        <label>boost/serialization/map.hpp</label>
      </node>
      <node id="19">
        <label>boost/archive/text_iarchive.hpp</label>
      </node>
      <node id="21">
        <label>mspass/utility/ErrorLogger.h</label>
        <link refid="_error_logger_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>mspass/utility/MsPASSError.h</label>
        <link refid="_ms_p_a_s_s_error_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>boost/uuid/uuid_io.hpp</label>
      </node>
      <node id="10">
        <label>mspass/utility/ProcessingHistory.h</label>
        <link refid="_processing_history_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc</label>
        <link refid="_processing_history_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="2">
        <label>map</label>
      </node>
      <node id="9">
        <label>exception</label>
      </node>
      <node id="20">
        <label>boost/archive/text_oarchive.hpp</label>
      </node>
      <node id="22">
        <label>unistd.h</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="16">
        <label>boost/uuid/uuid_generators.hpp</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
      <node id="18">
        <label>boost/uuid/uuid_serialize.hpp</label>
      </node>
      <node id="24">
        <label>boost/serialization/list.hpp</label>
      </node>
      <node id="15">
        <label>boost/uuid/uuid.hpp</label>
      </node>
      <node id="3">
        <label>set</label>
      </node>
      <node id="14">
        <label>boost/serialization/serialization.hpp</label>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="23">
        <label>boost/archive/basic_archive.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmspass_1_1utility_1_1sort__by__stage" prot="public">mspass::utility::sort_by_stage</innerclass>
    <innernamespace refid="namespacemspass">mspass</innernamespace>
    <innernamespace refid="namespacemspass_1_1utility">mspass::utility</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mspass/utility/MsPASSError.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mspass/utility/ProcessingHistory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mspass::utility{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>an<sp/>internal<sp/>function<sp/>that<sp/>returns<sp/>a<sp/>string<sp/>description<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment">ProcessingStatus<sp/>enum<sp/>class<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>status_to_words(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ProcessingStatus<sp/>status)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>word;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(status)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ProcessingStatus::RAW:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word=string(</highlight><highlight class="stringliteral">&quot;RAW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ProcessingStatus::ORIGIN:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word=string(</highlight><highlight class="stringliteral">&quot;ORIGIN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ProcessingStatus::VOLATILE:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word=string(</highlight><highlight class="stringliteral">&quot;VOLATILE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ProcessingStatus::SAVED:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word=string(</highlight><highlight class="stringliteral">&quot;SAVED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word=string(</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Start<sp/>of<sp/>NodeData<sp/>implementations<sp/>-<sp/>all<sp/>of<sp/>these<sp/>could<sp/>have<sp/>probably</highlight></codeline>
<codeline lineno="36"><highlight class="comment">been<sp/>defaulted,<sp/>but<sp/>defined<sp/>here<sp/>for<sp/>clarity.<sp/><sp/>Default<sp/>constructor</highlight></codeline>
<codeline lineno="37"><highlight class="comment">definitely<sp/>does<sp/>something<sp/>different<sp/>from<sp/>default<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">NodeData::NodeData()</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>status=ProcessingStatus::UNDEFINED;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>uuid=</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>type=AtomicType::UNDEFINED;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>stage=-1;<sp/><sp/><sp/></highlight><highlight class="comment">//Invalid<sp/>value<sp/>could<sp/>be<sp/>used<sp/>as<sp/>a<sp/>hint<sp/>of<sp/>uninitialized<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">NodeData::NodeData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeData&amp;<sp/>parent)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>uuid(parent.uuid),algorithm(parent.algorithm),algid(parent.algid)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>status=parent.status;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>type=parent.type;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>stage=parent.stage;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">NodeData&amp;<sp/>NodeData::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeData&amp;<sp/>parent)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(&amp;parent<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>status=parent.status;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>type=parent.type;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>stage=parent.stage;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>uuid=parent.uuid;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>algorithm=parent.algorithm;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>algid=parent.algid;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NodeData::operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeData&amp;<sp/>other)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Not<sp/>sure<sp/>if<sp/>this<sp/>will<sp/>generate<sp/>the<sp/>most<sp/>compact<sp/>code.<sp/>Alternative</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>is<sp/>a<sp/>string<sp/>of<sp/>&amp;&amp;<sp/>conditionsals.<sp/><sp/>The<sp/>advantage<sp/>here<sp/>is<sp/>these<sp/>were</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/>organized<sp/>by<sp/>a<sp/>guess<sp/>of<sp/>which<sp/>would<sp/>most<sp/>likely<sp/>yield<sp/>a<sp/>false<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(this-&gt;algorithm)<sp/>!=<sp/>(other.algorithm)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(this-&gt;uuid)<sp/>!=<sp/>(other.uuid)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(this-&gt;status)<sp/>!=<sp/>(other.status)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(this-&gt;type)<sp/>!=<sp/>(other.type)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(this-&gt;stage)<sp/>!=<sp/>(other.stage)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(this-&gt;algid)<sp/>!=<sp/>(other.algid)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NodeData::operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeData&amp;<sp/>other)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!((*this)==other);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Start<sp/>of<sp/>ProcessingHistory<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>all<sp/>constructors<sp/>need<sp/>to<sp/>define<sp/>the<sp/>head<sp/>of<sp/>the<sp/>chain<sp/>as</highlight></codeline>
<codeline lineno="84"><highlight class="comment">undefined.<sp/><sp/>That<sp/>assures<sp/>valid<sp/>initialization<sp/>and<sp/>is<sp/>needed<sp/>to<sp/>assure</highlight></codeline>
<codeline lineno="85"><highlight class="comment">everything<sp/>behaves<sp/>if<sp/>history<sp/>is<sp/>not<sp/>ignored.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classmspass_1_1utility_1_1_processing_history_1a78c4def2e3503ba2fbdadf3c02b733a7" refkind="member"><highlight class="normal">ProcessingHistory::ProcessingHistory():elog()</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>current_status=ProcessingStatus::UNDEFINED;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>current_id=</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>current_stage=-1;<sp/><sp/></highlight><highlight class="comment">//illegal<sp/>value<sp/>that<sp/>could<sp/>be<sp/>used<sp/>as<sp/>signal<sp/>for<sp/>uninitalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>mytype=AtomicType::UNDEFINED;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>algorithm=</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>algid=</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_processing_history_1a78c4def2e3503ba2fbdadf3c02b733a7" kindref="member">ProcessingHistory::ProcessingHistory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>jobnm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>jid)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classmspass_1_1utility_1_1_basic_processing_history" kindref="compound">BasicProcessingHistory</ref>(jobnm,jid),elog()</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>current_status=ProcessingStatus::UNDEFINED;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>current_id=</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>current_stage=-1;<sp/><sp/></highlight><highlight class="comment">//illegal<sp/>value<sp/>that<sp/>could<sp/>be<sp/>used<sp/>as<sp/>signal<sp/>for<sp/>uninitalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>mytype=AtomicType::UNDEFINED;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>algorithm=</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>algid=</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105" refid="classmspass_1_1utility_1_1_processing_history_1a80dc3ba4e28743d0b13c105dc62428aa" refkind="member"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_processing_history_1a78c4def2e3503ba2fbdadf3c02b733a7" kindref="member">ProcessingHistory::ProcessingHistory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>&amp;<sp/>parent)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="classmspass_1_1utility_1_1_basic_processing_history" kindref="compound">BasicProcessingHistory</ref>(parent),elog(parent.elog),nodes(parent.nodes),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>algorithm(parent.algorithm),algid(parent.algid)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>current_status=parent.current_status;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>current_id=parent.current_id;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>current_stage=parent.current_stage;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>mytype=parent.mytype;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114" refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" kindref="member">ProcessingHistory::is_empty</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="115"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(current_status==ProcessingStatus::UNDEFINED)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(nodes.empty())<sp/>)</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120" refid="classmspass_1_1utility_1_1_processing_history_1a440cedfda00fd0b7211ed4673f09426e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a440cedfda00fd0b7211ed4673f09426e" kindref="member">ProcessingHistory::is_raw</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="121"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_status==ProcessingStatus::RAW)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127" refid="classmspass_1_1utility_1_1_processing_history_1a477b2020ad7e3c753999e3906cd8eb58" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a477b2020ad7e3c753999e3906cd8eb58" kindref="member">ProcessingHistory::is_origin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="128"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_status==ProcessingStatus::RAW<sp/>||<sp/>current_status==ProcessingStatus::ORIGIN)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134" refid="classmspass_1_1utility_1_1_processing_history_1a8cfd15514483fc2701e53ba1be8412e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a8cfd15514483fc2701e53ba1be8412e9" kindref="member">ProcessingHistory::is_volatile</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="135"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_status==ProcessingStatus::VOLATILE)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141" refid="classmspass_1_1utility_1_1_processing_history_1a35cd2643171f354ded06e1a34681961d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a35cd2643171f354ded06e1a34681961d" kindref="member">ProcessingHistory::is_saved</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="142"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_status==ProcessingStatus::SAVED)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148" refid="classmspass_1_1utility_1_1_processing_history_1a04eaa592369744d85f54da21b8de9776" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a04eaa592369744d85f54da21b8de9776" kindref="member">ProcessingHistory::number_of_stages</ref>()</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_stage;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>next<sp/>set<sp/>of<sp/>methods<sp/>are<sp/>the<sp/>primary<sp/>methdods<sp/>for<sp/>managing<sp/>the<sp/>history</highlight></codeline>
<codeline lineno="154"><highlight class="comment">data.<sp/><sp/><sp/>A<sp/>key<sp/>implementation<sp/>detail<sp/>is<sp/>when<sp/>data<sp/>marked<sp/>current<sp/>is<sp/>pushed<sp/>to</highlight></codeline>
<codeline lineno="155"><highlight class="comment">the<sp/>multimaps<sp/>that<sp/>handle<sp/>the<sp/>history.<sp/><sp/>In<sp/>all<sp/>cases<sp/>the<sp/>model<sp/>is<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="156"><highlight class="comment">are<sp/>pushed<sp/>to<sp/>the<sp/>maps<sp/>when<sp/>and<sp/>only<sp/>they<sp/>become<sp/>a<sp/>parent.<sp/><sp/><sp/>That<sp/>means</highlight></codeline>
<codeline lineno="157"><highlight class="comment">all<sp/>the<sp/>methods<sp/>named<sp/>&quot;map&quot;<sp/>something.<sp/><sp/><sp/><sp/>A<sp/>corollary<sp/>is<sp/>that<sp/>when<sp/>an<sp/>object</highlight></codeline>
<codeline lineno="158"><highlight class="comment">is<sp/>an<sp/>origin<sp/>the<sp/>multimaps<sp/>must<sp/>be<sp/>empty.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>we<sp/>don&apos;t<sp/>distinguish<sp/>raw<sp/>and<sp/>origin<sp/>here<sp/>-<sp/>rec<sp/>must<sp/>define<sp/>it<sp/>one</highlight></codeline>
<codeline lineno="160"><highlight class="comment">way<sp/>or<sp/>the<sp/>other.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classmspass_1_1utility_1_1_processing_history_1a0621aa8adf8ebaab44a375a299c14fd8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a0621aa8adf8ebaab44a375a299c14fd8" kindref="member">ProcessingHistory::set_as_origin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>alg,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>algid_in,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>uuid,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AtomicType<sp/>typ,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>define_as_raw)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>base_error(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::set_as_origin:<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>nodes.size()&gt;0<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(alg+</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">+algid_in,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_error<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Illegal<sp/>usage.<sp/><sp/>History<sp/>chain<sp/>was<sp/>not<sp/>empty.<sp/><sp/><sp/>Calling<sp/>clear<sp/>method<sp/>and<sp/>continuing&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a42865512c68a26b85b394825a1629729" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(define_as_raw)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>current_status=ProcessingStatus::RAW;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>current_status=ProcessingStatus::ORIGIN;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>algorithm=alg;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>algid=algid_in;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>current_id=uuid;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>mytype=typ;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Origin/raw<sp/>are<sp/>always<sp/>defined<sp/>as<sp/>stage<sp/>0<sp/>even<sp/>after<sp/>a<sp/>save.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>current_stage=0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187" refid="classmspass_1_1utility_1_1_processing_history_1a986da6a438099a371a0b0a9556f2c8b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a986da6a438099a371a0b0a9556f2c8b3" kindref="member">ProcessingHistory::new_ensemble_process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>alg,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>algid_in,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AtomicType<sp/>typ,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;ProcessingHistory*&gt;<sp/>parents,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>create_newid)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(create_newid)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" kindref="member">newid</ref>();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>clear<sp/>the<sp/>tree<sp/>contents<sp/>because<sp/>all<sp/>the<sp/>parents<sp/>will</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/>branch<sp/>from<sp/>this.<sp/><sp/>Hence,<sp/>we<sp/>have<sp/>to<sp/>put<sp/>the<sp/>node<sp/>data<sp/>into<sp/>an<sp/>empty</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/>container<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a42865512c68a26b85b394825a1629729" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>algorithm=alg;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>algid=algid_in;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>mytype=typ;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>current<sp/>stage<sp/>but<sp/>assume<sp/>it<sp/>will<sp/>be<sp/>updated<sp/>as<sp/>max<sp/>of</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>parents<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>current_stage=0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>multimap&lt;string,NodeData&gt;::const_iterator<sp/>nptr,nl,nu;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>current_stage<sp/>can<sp/>be<sp/>ambiguous<sp/>from<sp/>multiple<sp/>inputs.<sp/><sp/>We<sp/>define</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/>the<sp/>current<sp/>stage<sp/>from<sp/>a<sp/>reduce<sp/>as<sp/>the<sp/>largest<sp/>stage<sp/>value<sp/>found</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/>in<sp/>all<sp/>inputs.<sp/><sp/>Note<sp/>we<sp/>only<sp/>test<sp/>the<sp/>stage<sp/>value<sp/>at<sp/>the<sp/>head<sp/>for</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/>each<sp/>parent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_stage(0);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;parents.size();++i)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parents[i]-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" kindref="member">is_empty</ref>())</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>member<sp/>number<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;i&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>uuid=&quot;</highlight><highlight class="normal">&lt;&lt;parents[i]-&gt;id()</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>an<sp/>empty<sp/>history<sp/>chain&quot;</highlight><highlight class="normal">&lt;&lt;endl</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;At<sp/>best<sp/>the<sp/>processing<sp/>history<sp/>data<sp/>will<sp/>be<sp/>incomplete&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::new_ensemble_process&quot;</highlight><highlight class="normal">,ss.str(),</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;string,NodeData&gt;<sp/>parent_node_data(parents[i]-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" kindref="member">get_nodes</ref>());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>also<sp/>have<sp/>to<sp/>get<sp/>the<sp/>head<sp/>data<sp/>with<sp/>this<sp/>method<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>nd=parents[i]-&gt;current_nodedata();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" kindref="member">stage</ref>&gt;max_stage)<sp/>max_stage=nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" kindref="member">stage</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(nptr=parent_node_data.begin();nptr!=parent_node_data.end();++nptr)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Adding<sp/>to<sp/>nodes<sp/>multimap<sp/>has<sp/>a<sp/>complication.<sp/><sp/>It<sp/>is<sp/>possible<sp/>in</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>some<sp/>situations<sp/>to<sp/>have<sp/>duplicate<sp/>node<sp/>data<sp/>coming<sp/>from<sp/>different</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>inputs.<sp/><sp/>The<sp/>method<sp/>we<sp/>use<sp/>to<sp/>reconstruct<sp/>the<sp/>processing<sp/>history<sp/>tree</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>be<sp/>confused<sp/>by<sp/>such<sp/>duplicates<sp/>so<sp/>we<sp/>need<sp/>to<sp/>test<sp/>for<sp/>pure</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>duplicates<sp/>in<sp/>NodeData<sp/>values.<sp/>This<sp/>algorithm<sp/>would<sp/>not<sp/>scale<sp/>well</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>the<sp/>number<sp/>of<sp/>values<sp/>with<sp/>a<sp/>common<sp/>key<sp/>is<sp/>large<sp/>for<sp/>either</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>or<sp/>parent[i]*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>key(nptr-&gt;first);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;nodes.count(key)&gt;0)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nl=this-&gt;nodes.lower_bound(key);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nu=this-&gt;nodes.upper_bound(key);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr=nl;ptr!=nu;++ptr)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>ndtest(ptr-&gt;second);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ndtest<sp/>!=<sp/>(nptr-&gt;second))</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(*nptr);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>problem<sp/>just<sp/>inserting<sp/>a<sp/>node<sp/>if<sp/>there<sp/>were<sp/>no<sp/>previous</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(*nptr);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Also<sp/>insert<sp/>the<sp/>head<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>pair&lt;string,NodeData&gt;<sp/>pnd(current_id,nd);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(pnd);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>current_stage=max_stage;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>reset<sp/>the<sp/>current<sp/>contents<sp/>to<sp/>make<sp/>it<sp/>the<sp/>base<sp/>of<sp/>the<sp/>history<sp/>tree.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/>Be<sp/>careful<sp/>of<sp/>uninitialized<sp/>current_stage*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_stage&gt;=0)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>++current_stage;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::new_ensemble_process&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;current_stage<sp/>for<sp/>none<sp/>of<sp/>the<sp/>parents<sp/>was<sp/>initialized\nImproper<sp/>usage<sp/>will<sp/>create<sp/>an<sp/>invalid<sp/>history<sp/>chain<sp/>that<sp/>may<sp/>cause<sp/>downstream<sp/>problems&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>current_stage=0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>algorithm=alg;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>algid=algid_in;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>this<sp/>is<sp/>output<sp/>type<sp/>-<sp/>inputs<sp/>can<sp/>be<sp/>variable<sp/>and<sp/>defined<sp/>by<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>mytype=typ;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>current_status=ProcessingStatus::VOLATILE;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_id;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Companion<sp/>to<sp/>new_ensemble_process<sp/>that<sp/>appends<sp/>the<sp/>history<sp/>of<sp/>one<sp/>datum<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="282"><highlight class="comment">multimap<sp/>containers.<sp/><sp/>It<sp/>does<sp/>not<sp/>alter<sp/>the<sp/>current<sp/>values<sp/>the<sp/>new_ensemble_process<sp/>method</highlight></codeline>
<codeline lineno="283"><highlight class="comment">MUST<sp/>have<sp/>been<sp/>called<sp/>before<sp/>calling<sp/>this<sp/>method<sp/>or<sp/>the<sp/>history<sp/>chain<sp/>will</highlight></codeline>
<codeline lineno="284"><highlight class="comment">become<sp/>corrupted.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="classmspass_1_1utility_1_1_processing_history_1abf871538f6024bebc2b1512ba1e58ff7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1abf871538f6024bebc2b1512ba1e58ff7" kindref="member">ProcessingHistory::add_one_input</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>&amp;<sp/>data_to_add)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_to_add.<ref refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" kindref="member">is_empty</ref>())</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>ss&lt;&lt;</highlight><highlight class="stringliteral">&quot;Data<sp/>with<sp/>uuid=&quot;</highlight><highlight class="normal">&lt;&lt;data_to_add.<ref refid="classmspass_1_1utility_1_1_processing_history_1adf60368ca5c699cc9186fa145d04376d" kindref="member">id</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>an<sp/>empty<sp/>history<sp/>chain&quot;</highlight><highlight class="normal">&lt;&lt;endl</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;At<sp/>best<sp/>this<sp/>will<sp/>leave<sp/>ProcessingHistory<sp/>incomplete&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::add_one_input&quot;</highlight><highlight class="normal">,ss.str(),</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;string,NodeData&gt;::iterator<sp/>nptr;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;string,NodeData&gt;<sp/>newhistory<sp/>=<sp/>data_to_add.<ref refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" kindref="member">get_nodes</ref>();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;string,NodeData&gt;::iterator<sp/>nl,nu;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>above<sp/>this<sp/>one<sp/>needs<sp/>check<sp/>for<sp/>duplicates<sp/>and<sp/>only<sp/>add</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/>a<sp/>node<sp/>if<sp/>the<sp/>data<sp/>are<sp/>unique.<sp/><sp/>This<sp/>is<sp/>simple<sp/>compared<sp/>to<sp/>new_ensemble_process</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/>because<sp/>we<sp/>just<sp/>have<sp/>to<sp/>check<sp/>one<sp/>object&apos;s<sp/>history<sp/>at<sp/>a<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(nptr=newhistory.begin();nptr!=newhistory.end();++nptr)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>key(nptr-&gt;first);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;nodes.count(key)&gt;0)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nl=this-&gt;nodes.lower_bound(key);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nu=this-&gt;nodes.upper_bound(key);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr=nl;ptr!=nu;++ptr)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>ndtest(ptr-&gt;second);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ndtest<sp/>!=<sp/>(nptr-&gt;second))</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(*nptr);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(*nptr);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>forget<sp/>head<sp/>node<sp/>data*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>nd=data_to_add.<ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">current_nodedata</ref>();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>ndhere=this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">current_nodedata</ref>();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>pair&lt;string,NodeData&gt;<sp/>pnd(current_id,nd);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(pnd);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>one<sp/>also<sp/>doesn&apos;t<sp/>change<sp/>the<sp/>current<sp/>contents<sp/>because<sp/>it<sp/>is<sp/>just<sp/>a</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>front<sp/>end<sp/>to<sp/>a<sp/>loop<sp/>calling<sp/>add_one_input<sp/>for<sp/>each<sp/>vector<sp/>component<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="classmspass_1_1utility_1_1_processing_history_1a667e046c02eb06959c3632c9157161b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a667e046c02eb06959c3632c9157161b6" kindref="member">ProcessingHistory::add_many_inputs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;ProcessingHistory*&gt;&amp;<sp/>d)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>vector&lt;ProcessingHistory*&gt;::const_iterator<sp/>dptr;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(dptr=d.begin();dptr!=d.end();++dptr)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref><sp/>*ptr;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr=(*dptr);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1abf871538f6024bebc2b1512ba1e58ff7" kindref="member">add_one_input</ref>(*ptr);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>pair<sp/>of<sp/>methods<sp/>always<sp/>creates<sp/>a<sp/>new<sp/>id<sp/>which<sp/>is<sp/>the<sp/>return.</highlight></codeline>
<codeline lineno="345"><highlight class="comment">Be<sp/>careful<sp/>not<sp/>to<sp/>mix<sp/>that<sp/>up<sp/>with<sp/>the<sp/>uuid<sp/>of<sp/>the<sp/>parent.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">There<sp/>are<sp/>two<sp/>overloaded<sp/>versions<sp/>of<sp/>this<sp/>method.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"></highlight></codeline>
<codeline lineno="349"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a75af2861c06a905968cc9c727b8cc877" kindref="member">ProcessingHistory::new_map</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>alg,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>algid_in,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AtomicType<sp/>typ,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ProcessingStatus<sp/>newstatus)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" kindref="member">is_empty</ref>())</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>call<sp/>this<sp/>method<sp/>on<sp/>an<sp/>empty<sp/>history<sp/>chain<sp/>for<sp/>uuid=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1adf60368ca5c699cc9186fa145d04376d" kindref="member">id</ref>()&lt;&lt;endl</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>preserve<sp/>history<sp/>for<sp/>algorithm=&quot;</highlight><highlight class="normal">&lt;&lt;alg&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>id=&quot;</highlight><highlight class="normal">&lt;&lt;algid&lt;&lt;endl;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::new_map&quot;</highlight><highlight class="normal">,ss.str(),ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_id;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>this<sp/>case<sp/>we<sp/>have<sp/>to<sp/>push<sp/>current<sp/>data<sp/>to<sp/>the<sp/>history<sp/>chain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>NodeData<sp/>nd;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>nd=this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">current_nodedata</ref>();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>always<sp/>need<sp/>a<sp/>new<sp/>id<sp/>here<sp/>for<sp/>this<sp/>object<sp/>we<sp/>are<sp/>handling<sp/>as<sp/>the<sp/>child<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>current_id=this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" kindref="member">newid</ref>();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>new<sp/>id<sp/>is<sp/>now<sp/>the<sp/>key<sp/>to<sp/>link<sp/>back<sp/>to<sp/>previous<sp/>record<sp/>so<sp/>we<sp/>insert</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/>nd<sp/>with<sp/>the<sp/>new<sp/>key<sp/>to<sp/>define<sp/>that<sp/>link<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>pair&lt;string,NodeData&gt;<sp/>pn(current_id,nd);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>this-&gt;nodes.insert(pn);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>algorithm=alg;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>algid=algid_in;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>current_status=newstatus;<sp/><sp/><sp/></highlight><highlight class="comment">//Probably<sp/>should<sp/>default<sp/>in<sp/>include<sp/>file<sp/>to<sp/>VOLATILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_stage&gt;=0)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>++current_stage;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::new_map&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;current_stage<sp/>on<sp/>entry<sp/>had<sp/>not<sp/>been<sp/>initialized\nImproper<sp/>usage<sp/>will<sp/>create<sp/>an<sp/>invalid<sp/>history<sp/>chain<sp/>that<sp/>may<sp/>cause<sp/>downstream<sp/>problems&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>current_stage=0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>mytype=typ;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_id;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a75af2861c06a905968cc9c727b8cc877" kindref="member">ProcessingHistory::new_map</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>alg,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>algid_in,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AtomicType<sp/>typ,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ProcessingHistory&amp;<sp/>copy_to_clone,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ProcessingStatus<sp/>newstatus)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>must<sp/>be<sp/>sure<sp/>the<sp/>chain<sp/>is<sp/>empty<sp/>before<sp/>we<sp/>push<sp/>the<sp/>clone&apos;s<sp/>data<sp/>there*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a42865512c68a26b85b394825a1629729" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>works<sp/>because<sp/>get_nodes<sp/>pushes<sp/>the<sp/>current<sp/>data<sp/>to<sp/>the<sp/>nodes</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/>multimap.<sp/><sp/>We<sp/>intentionally<sp/>do<sp/>not<sp/>test<sp/>for<sp/>an<sp/>empty<sp/>nodes<sp/>map</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/>assuming<sp/>one<sp/>wouldn&apos;t<sp/>call<sp/>this<sp/>without<sp/>knowing<sp/>that<sp/>was<sp/>necessary.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/>That<sp/>may<sp/>be<sp/>an<sp/>incorrect<sp/>assumption,<sp/>but<sp/>will<sp/>use<sp/>it<sp/>until<sp/>proven<sp/>otherwise*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>nodes=copy_to_clone.get_nodes();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>NodeData<sp/>nd;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>nd=this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">current_nodedata</ref>();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>always<sp/>need<sp/>a<sp/>new<sp/>id<sp/>here<sp/>for<sp/>this<sp/>object<sp/>we<sp/>are<sp/>handling<sp/>as<sp/>the<sp/>child<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>current_id=this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" kindref="member">newid</ref>();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>pair&lt;string,NodeData&gt;<sp/>pn(current_id,nd);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>this-&gt;nodes.insert(pn);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>algorithm=alg;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>algid=algid_in;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>current_status=newstatus;<sp/><sp/><sp/></highlight><highlight class="comment">//Probably<sp/>should<sp/>default<sp/>in<sp/>include<sp/>file<sp/>to<sp/>VOLATILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_stage&gt;=0)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>++current_stage;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::new_map&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;current_stage<sp/>on<sp/>entry<sp/>had<sp/>not<sp/>been<sp/>initialized\nImproper<sp/>usage<sp/>will<sp/>create<sp/>an<sp/>invalid<sp/>history<sp/>chain<sp/>that<sp/>may<sp/>cause<sp/>downstream<sp/>problems&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>current_stage=0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>mytype=typ;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_id;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>we<sp/>always<sp/>trust<sp/>that<sp/>the<sp/>parent<sp/>history<sp/>data<sp/>is<sp/>ok<sp/>in<sp/>this<sp/>case</highlight></codeline>
<codeline lineno="419"><highlight class="comment">assuming<sp/>this<sp/>would<sp/>only<sp/>be<sp/>called<sp/>immediately<sp/>after<sp/>a<sp/>save.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="classmspass_1_1utility_1_1_processing_history_1ab5152d2f6a4706e635d6ca16e68b9bcc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1ab5152d2f6a4706e635d6ca16e68b9bcc" kindref="member">ProcessingHistory::map_as_saved</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>alg,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>algid_in,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AtomicType<sp/>typ)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" kindref="member">is_empty</ref>())</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>call<sp/>this<sp/>method<sp/>on<sp/>an<sp/>empty<sp/>history<sp/>chain<sp/>for<sp/>uuid=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1adf60368ca5c699cc9186fa145d04376d" kindref="member">id</ref>()&lt;&lt;endl</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>preserve<sp/>history<sp/>for<sp/>writer=&quot;</highlight><highlight class="normal">&lt;&lt;alg&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>id=&quot;</highlight><highlight class="normal">&lt;&lt;algid&lt;&lt;endl;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::map_as_saved&quot;</highlight><highlight class="normal">,ss.str(),ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_id;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>essentially<sp/>pushing<sp/>current<sp/>data<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>history<sp/>chain</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/>but<sp/>using<sp/>a<sp/>special<sp/>id<sp/>that<sp/>may<sp/>or<sp/>may<sp/>not<sp/>be<sp/>saved<sp/>by<sp/>the<sp/>caller.</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>We<sp/>use<sp/>a<sp/>fixed<sp/>keyword<sp/>defined<sp/>in<sp/>ProcessingHistory.h<sp/>assuming<sp/>saves</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/>are<sp/>always<sp/>a<sp/>one-to-one<sp/>operation<sp/>(definition<sp/>of<sp/>atomic<sp/>really)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>nd(this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">current_nodedata</ref>());</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>pair&lt;string,NodeData&gt;<sp/>pn(SAVED_ID_KEY,nd);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>this-&gt;nodes.insert(pn);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>we<sp/>reset<sp/>current<sp/>to<sp/>define<sp/>it<sp/>as<sp/>the<sp/>saver.<sp/><sp/>Then<sp/>calls<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>getters<sp/>for<sp/>the<sp/>multimap<sp/>will<sp/>properly<sp/>insert<sp/>this<sp/>data<sp/>as<sp/>the<sp/>end<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/>chain.<sp/><sp/>Note<sp/>a<sp/>key<sp/>difference<sp/>from<sp/>new_map<sp/>is<sp/>we<sp/>don&apos;t<sp/>create<sp/>a<sp/>new<sp/>uuid.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/>I<sp/>don&apos;t<sp/>think<sp/>that<sp/>will<sp/>cause<sp/>an<sp/>ambiguity,<sp/>but<sp/>it<sp/>might<sp/>be<sp/>better<sp/>to</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/>just<sp/>create<sp/>a<sp/>new<sp/>one<sp/>here<sp/>-<sp/>will<sp/>do<sp/>it<sp/>this<sp/>way<sp/>unless<sp/>that<sp/>proves<sp/>a<sp/>problem</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/>as<sp/>the<sp/>equality<sp/>of<sp/>the<sp/>two<sp/>might<sp/>be<sp/>a<sp/>useful<sp/>test<sp/>for<sp/>other<sp/>purposes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>algorithm=alg;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>algid=algid_in;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>current_status=ProcessingStatus::SAVED;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>current_id=SAVED_ID_KEY;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_stage&gt;=0)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>++current_stage;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::map_as_saved&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;current_stage<sp/>on<sp/>entry<sp/>had<sp/>not<sp/>been<sp/>initialized\nImproper<sp/>usage<sp/>will<sp/>create<sp/>an<sp/>invalid<sp/>history<sp/>chain<sp/>that<sp/>may<sp/>cause<sp/>downstream<sp/>problems&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>current_stage=0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>mytype=typ;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_id;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Merge<sp/>in<sp/>the<sp/>history<sp/>nodes<sp/>from<sp/>another.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="classmspass_1_1utility_1_1_processing_history_1a4f2cb1d5af0500a526fa8745aa52db36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a4f2cb1d5af0500a526fa8745aa52db36" kindref="member">ProcessingHistory::merge</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>&amp;<sp/>data_to_add)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_to_add.<ref refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" kindref="member">is_empty</ref>())</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>ss&lt;&lt;</highlight><highlight class="stringliteral">&quot;Data<sp/>with<sp/>uuid=&quot;</highlight><highlight class="normal">&lt;&lt;data_to_add.<ref refid="classmspass_1_1utility_1_1_processing_history_1adf60368ca5c699cc9186fa145d04376d" kindref="member">id</ref>()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>an<sp/>empty<sp/>history<sp/>chain&quot;</highlight><highlight class="normal">&lt;&lt;endl</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;At<sp/>best<sp/>this<sp/>will<sp/>leave<sp/>ProcessingHistory<sp/>incomplete&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>elog.<ref refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" kindref="member">log_error</ref>(</highlight><highlight class="stringliteral">&quot;ProcessingHistory::merge&quot;</highlight><highlight class="normal">,ss.str(),</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Complaint);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;string,NodeData&gt;::iterator<sp/>nptr;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;string,NodeData&gt;<sp/>newhistory<sp/>=<sp/>data_to_add.<ref refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" kindref="member">get_nodes</ref>();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;string,NodeData&gt;::iterator<sp/>nl,nu;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(nptr=newhistory.begin();nptr!=newhistory.end();++nptr)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>key(nptr-&gt;first);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>the<sp/>data_to_add&apos;s<sp/>key<sp/>matches<sp/>its<sp/>current<sp/>id,</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>merge<sp/>all<sp/>the<sp/>nodes<sp/>under<sp/>the<sp/>current<sp/>id<sp/>of<sp/>*this.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(key<sp/>==<sp/>data_to_add.current_id)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(std::make_pair(this-&gt;current_id,<sp/>nptr-&gt;second));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;nodes.count(key)&gt;0)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nl=this-&gt;nodes.lower_bound(key);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nu=this-&gt;nodes.upper_bound(key);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr=nl;ptr!=nu;++ptr)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>ndtest(ptr-&gt;second);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ndtest<sp/>!=<sp/>(nptr-&gt;second))</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(*nptr);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(*nptr);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="classmspass_1_1utility_1_1_processing_history_1afc16a9d2c81e0fce08669573ffa8d741" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1afc16a9d2c81e0fce08669573ffa8d741" kindref="member">ProcessingHistory::accumulate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>algin,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>algidin,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AtomicType<sp/>typ,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>&amp;<sp/>ni)</highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref><sp/>newinput(ni);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((newinput.algorithm<sp/>!=<sp/>algin)<sp/>||<sp/>(newinput.algid<sp/>!=<sp/>algidin)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>(newinput.jid<sp/><sp/>!=<sp/>newinput.jobid())<sp/>||<sp/>(newinput.jnm<sp/>!=<sp/>newinput.jobname()))</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>nd;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>nd=newinput.<ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">current_nodedata</ref>();</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>newinput.<ref refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" kindref="member">newid</ref>();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>pair&lt;string,NodeData&gt;<sp/>pn(newinput.current_id,nd);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>newinput.nodes.insert(pn);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>newinput.jid=newinput.jobid();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>newinput.jnm=newinput.jobname();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>newinput.algorithm=algin;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>newinput.algid=algidin;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>newinput.current_status=ProcessingStatus::VOLATILE;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>newinput.current_stage=nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" kindref="member">stage</ref>+1;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>newinput.mytype=typ;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>have<sp/>to<sp/>detect<sp/>an<sp/>initialization<sp/>condition<sp/>without<sp/>losing<sp/>the</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/>stored<sp/>history.<sp/><sp/><sp/>There<sp/>are<sp/>two<sp/>conditions<sp/>we<sp/>need<sp/>to<sp/>handle.<sp/><sp/>First,</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/>if<sp/>we<sp/>create<sp/>an<sp/>empty<sp/>container<sp/>to<sp/>hold<sp/>the<sp/>accmulator<sp/>and<sp/>put<sp/>it<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/>left<sp/>hand<sp/>side<sp/>we<sp/>will<sp/>want<sp/>to<sp/>clear<sp/>the<sp/>history<sp/>chain<sp/>or<sp/>we<sp/>will</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/>accumulate<sp/>random<sp/>junk.<sp/><sp/><sp/>The<sp/>second<sp/>condition<sp/>is<sp/>if<sp/>we<sp/>accumulate<sp/>in</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/>a<sp/>way<sp/>were<sp/>the<sp/>left<sp/>hand<sp/>side<sp/>is<sp/>some<sp/>existing<sp/>data<sp/>where<sp/>we<sp/>do<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/>preserve<sp/>the<sp/>history.<sp/><sp/><sp/>For<sp/>the<sp/>is_empty<sp/>logic:<sp/><sp/><sp/>we<sp/>just<sp/>copy<sp/>the</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/>newinput&apos;s<sp/>history<sp/>and<sp/>add<sp/>make<sp/>its<sp/>current<sp/>node<sp/>data<sp/>the<sp/>connection</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/>backward<sp/>-<sp/>i.e.<sp/>we<sp/>have<sp/>to<sp/>make<sp/>a<sp/>new<sp/>uuid<sp/>and<sp/>add<sp/>an<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" kindref="member">is_empty</ref>())</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" kindref="member">newid</ref>();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes=ni.<ref refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" kindref="member">get_nodes</ref>();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>nd;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>nd=ni.<ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">current_nodedata</ref>();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>pair&lt;string,NodeData&gt;<sp/>pn(current_id,nd);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(pn);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_jobid(ni.jobid());</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_jobname(ni.jobname());</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>algorithm=algin;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>algid=algidin;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>current_status=ProcessingStatus::VOLATILE;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>current_stage=nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" kindref="member">stage</ref>+1;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>mytype=typ;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>condition<sp/>for<sp/>a<sp/>left<sp/>hand<sp/>side<sp/>that<sp/>is<sp/>not<sp/>empty<sp/>but<sp/>not</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/>yet<sp/>initialized.<sp/><sp/><sp/>We<sp/>detect<sp/>this<sp/>condition<sp/>by<sp/>a<sp/>mismatch<sp/>in<sp/>all<sp/>the<sp/>unique</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/>names<sp/>and<sp/>ids<sp/>that<sp/>mark<sp/>the<sp/>current<sp/>process<sp/>define<sp/>this<sp/>reduce<sp/>operation*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((this-&gt;algorithm<sp/>!=<sp/>algin)<sp/>||<sp/>(this-&gt;algid<sp/>!=<sp/>algidin)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>(this-&gt;jid<sp/><sp/>!=<sp/>newinput.jobid())<sp/>||<sp/>(this-&gt;jnm<sp/>!=<sp/>newinput.jobname()))</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>similar<sp/>to<sp/>the<sp/>block<sp/>above,<sp/>but<sp/>the<sp/>key<sp/>difference<sp/>here<sp/>is<sp/>we</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/>have<sp/>to<sp/>push<sp/>this&apos;s<sp/>history<sp/>data<sp/>to<sp/>convert<sp/>it&apos;s<sp/>current<sp/>data<sp/>to<sp/>define<sp/>an<sp/>input.</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/><sp/>That<sp/>means<sp/>getting<sp/>a<sp/>new<sp/>uuid<sp/>and<sp/>pushing<sp/>current<sp/>node<sp/>data<sp/>to<sp/>the<sp/>nodes<sp/>map</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/>as<sp/>an<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>nd;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>nd=this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">current_nodedata</ref>();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" kindref="member">newid</ref>();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>pair&lt;string,NodeData&gt;<sp/>pn(current_id,nd);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;nodes.insert(pn);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;jid=newinput.jobid();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;jnm=newinput.jobname();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;algorithm=algin;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;algid=algidin;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;current_status=ProcessingStatus::VOLATILE;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;current_stage=nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" kindref="member">stage</ref>+1;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;mytype=typ;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a4f2cb1d5af0500a526fa8745aa52db36" kindref="member">merge</ref>(newinput);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a4f2cb1d5af0500a526fa8745aa52db36" kindref="member">merge</ref>(newinput);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="classmspass_1_1utility_1_1_processing_history_1afbcd32c36bbabff34fb51e382da69d83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1afbcd32c36bbabff34fb51e382da69d83" kindref="member">ProcessingHistory::clean_accumulate_uuids</ref>()</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>undefined<sp/>immediately<sp/>if<sp/>the<sp/>history<sp/>chain<sp/>is<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" kindref="member">is_empty</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>ndthis=this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">current_nodedata</ref>();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>alg(ndthis.<ref refid="classmspass_1_1utility_1_1_node_data_1a040189091bc8458cc84b7a3781856643" kindref="member">algorithm</ref>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>algidtest(ndthis.<ref refid="classmspass_1_1utility_1_1_node_data_1aa51f302e3e070fd072255e1d1af9073f" kindref="member">algid</ref>);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>algorithm<sp/>here<sp/>finds<sp/>all<sp/>entries<sp/>for<sp/>which<sp/>algorithm<sp/>is<sp/>alg<sp/>and</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/>algid<sp/>matches<sp/>aldid.<sp/><sp/>We<sp/>build<sp/>a<sp/>list<sp/>of<sp/>uuids<sp/>(keys)<sp/>linked<sp/>to<sp/>that<sp/>unique</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/>algorithm.<sp/><sp/>We<sp/>then<sp/>use<sp/>the<sp/>id<sp/>in<sp/>ndthis<sp/>as<sp/>the<sp/>master*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>set&lt;string&gt;<sp/>matching_ids;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>matching_ids.insert(ndthis.<ref refid="classmspass_1_1utility_1_1_node_data_1a0f0df95910b9712e36d3a8389c0c9f38" kindref="member">uuid</ref>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>approach<sp/>of<sp/>pushing<sp/>iterators<sp/>to<sp/>this<sp/>list<sp/>that<sp/>match<sp/>seemed<sp/>to</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/>be<sp/>the<sp/>only<sp/>way<sp/>I<sp/>could<sp/>make<sp/>this<sp/>work<sp/>correctly.<sp/><sp/><sp/>Not<sp/>sure<sp/>why,<sp/>but</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/>the<sp/>added<sp/>cost<sp/>over<sp/>handling<sp/>this<sp/>correctly<sp/>in<sp/>the<sp/>loops<sp/>is<sp/>small.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>std::list&lt;multimap&lt;string,NodeData&gt;::iterator&gt;<sp/>need_to_erase;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nptr=this-&gt;nodes.begin();nptr!=this-&gt;nodes.end();++nptr)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>copy<sp/>operation<sp/>is<sp/>somewhat<sp/>inefficient,<sp/>but<sp/>the<sp/>cost<sp/>is<sp/>small</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/>compared<sp/>to<sp/>how<sp/>obscure<sp/>the<sp/>code<sp/>will<sp/>look<sp/>if<sp/>we<sp/>directly<sp/>manipulate<sp/>the</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/><sp/><sp/>second<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>nd(nptr-&gt;second);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>depends<sp/>upon<sp/>the<sp/>distinction<sp/>between<sp/>set<sp/>and<sp/>multiset.<sp/><sp/>i.e.<sp/>an<sp/>insert</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>a<sp/>duplicate<sp/>does<sp/>nothing*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((alg==nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a040189091bc8458cc84b7a3781856643" kindref="member">algorithm</ref>)<sp/>&amp;&amp;<sp/>(algidtest==nd.<ref refid="classmspass_1_1utility_1_1_node_data_1aa51f302e3e070fd072255e1d1af9073f" kindref="member">algid</ref>))</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matching_ids.insert(nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a0f0df95910b9712e36d3a8389c0c9f38" kindref="member">uuid</ref>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>need_to_erase.push_back(nptr);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>no<sp/>match<sp/>situation<sp/>gracefully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matching_ids.empty())</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nothing<sp/>more<sp/>to<sp/>do<sp/>but<sp/>return<sp/>the<sp/>uuid<sp/>if<sp/>there<sp/>is<sp/>only<sp/>one*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matching_ids.size()==1)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(matching_ids.begin());</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sptr=need_to_erase.begin();sptr!=need_to_erase.end();++sptr)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes.erase(*sptr);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>need_to_erase.clear();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here<sp/>is<sp/>the<sp/>complicated<sp/>case.<sp/><sp/>We<sp/>use<sp/>the<sp/>uuid<sp/>from<sp/>ndthis<sp/>as<sp/>the<sp/>master</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/>and<sp/>change<sp/>all<sp/>the<sp/>others.<sp/><sp/><sp/>This<sp/>operation<sp/>works<sp/>ONLY<sp/>because<sp/>in<sp/>a<sp/>multimap</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/>erase<sp/>only<sp/>invalidates<sp/>the<sp/>iterator<sp/>it<sp/>points<sp/>to<sp/>and<sp/>others<sp/>remain<sp/>valid.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>master_uuid=ndthis.<ref refid="classmspass_1_1utility_1_1_node_data_1a0f0df95910b9712e36d3a8389c0c9f38" kindref="member">uuid</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sptr=matching_ids.begin();sptr!=matching_ids.end();++sptr)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>this<sp/>test<sp/>is<sp/>necessary<sp/>to<sp/>stip<sp/>the<sp/>master_uuid<sp/>-<sp/>no<sp/>else<sp/>needed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*sptr)!=master_uuid)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>multimap&lt;string,NodeData&gt;::iterator<sp/>nl,nu;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nl=this-&gt;nodes.lower_bound(*sptr);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nu=this-&gt;nodes.upper_bound(*sptr);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nptr=nl;nptr!=nu;++nptr)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>nd;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd=(nptr-&gt;second);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>need_to_erase.push_back(nptr);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes.insert(pair&lt;string,NodeData&gt;(master_uuid,nd));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sptr=need_to_erase.begin();sptr!=need_to_erase.end();++sptr)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes.erase(*sptr);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>master_uuid;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657" refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" refkind="member"><highlight class="normal">multimap&lt;string,NodeData&gt;<sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" kindref="member">ProcessingHistory::get_nodes</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="658"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>empty<sp/>map<sp/>if<sp/>it<sp/>has<sp/>no<sp/>data<sp/>-<sp/>necessary<sp/>or<sp/>the<sp/>logic</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/>below<sp/>will<sp/>insert<sp/>an<sp/>empty<sp/>head<sp/>to<sp/>the<sp/>chain.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" kindref="member">is_empty</ref>())</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nodes;<sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>way<sp/>to<sp/>return<sp/>an<sp/>empty<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>wrong,<sp/>I<sp/>think,<sp/>but<sp/>retained<sp/>to<sp/>test<sp/>before<sp/>removing.</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/>remove<sp/>this<sp/>once<sp/>current<sp/>idea<sp/>is<sp/>confirmed.<sp/>Note<sp/>if<sp/>that</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/>proves<sp/>true<sp/>we<sp/>can<sp/>also<sp/>remove<sp/>the<sp/>two<sp/>lines<sp/>above<sp/>as<sp/>they<sp/>do</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/>nothing<sp/>useful*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/>NodeData<sp/>nd;</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/>nd=this-&gt;current_nodedata();</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/>pair&lt;string,NodeData&gt;<sp/>pn(current_id,nd);</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/>multimap&lt;string,NodeData&gt;<sp/>result(this-&gt;nodes);</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/>result.insert(pn);</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nodes;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677" refid="classmspass_1_1utility_1_1_processing_history_1a42865512c68a26b85b394825a1629729" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a42865512c68a26b85b394825a1629729" kindref="member">ProcessingHistory::clear</ref>()</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>nodes.clear();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>current_status=ProcessingStatus::UNDEFINED;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>current_stage=0;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>mytype=AtomicType::UNDEFINED;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>algorithm=</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>algid=</highlight><highlight class="stringliteral">&quot;UNDEFINED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>really<sp/>just<sp/>a<sp/>wrapper<sp/>around<sp/>the<sp/>count<sp/>method.<sp/><sp/>We<sp/>do<sp/>it</highlight></codeline>
<codeline lineno="688"><highlight class="comment">because<sp/>it<sp/>is<sp/>an<sp/>implementation<sp/>detail<sp/>to<sp/>use<sp/>a<sp/>multimap<sp/>in<sp/>this<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a82d681c60d2e64fab12b92e3244ce052" kindref="member">ProcessingHistory::number_inputs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>testuuid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="690"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>result<sp/>is<sp/>int<sp/>to<sp/>mesh<sp/>better<sp/>with<sp/>python<sp/>even<sp/>though</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>returns<sp/>size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=nodes.count(testuuid);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696" refid="classmspass_1_1utility_1_1_processing_history_1a82d681c60d2e64fab12b92e3244ce052" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a82d681c60d2e64fab12b92e3244ce052" kindref="member">ProcessingHistory::number_inputs</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="697"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_processing_history_1a82d681c60d2e64fab12b92e3244ce052" kindref="member">number_inputs</ref>(current_id);</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700" refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" kindref="member">ProcessingHistory::newid</ref>()</highlight></codeline>
<codeline lineno="701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>boost::uuids::random_generator<sp/>gen;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>boost::uuids::uuid<sp/>uuidval;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>uuidval=gen();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>this-&gt;current_id=boost::uuids::to_string(uuidval);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_id;</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708" refid="classmspass_1_1utility_1_1_processing_history_1aec67690fe76c0d6c41dc096bc2f400ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1aec67690fe76c0d6c41dc096bc2f400ae" kindref="member">ProcessingHistory::set_id</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>newid)</highlight></codeline>
<codeline lineno="709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>this-&gt;current_id=<ref refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" kindref="member">newid</ref>;</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712" refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" refkind="member"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" kindref="member">ProcessingHistory::current_nodedata</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="713"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>nd;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a3dab2773c306f1d9977dccb455beec59" kindref="member">status</ref>=current_status;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a0f0df95910b9712e36d3a8389c0c9f38" kindref="member">uuid</ref>=current_id;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>nd.<ref refid="classmspass_1_1utility_1_1_node_data_1aa7c6f56ceca095d0af31f456d75954a4" kindref="member">type</ref>=mytype;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" kindref="member">stage</ref>=current_stage;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>nd.<ref refid="classmspass_1_1utility_1_1_node_data_1a040189091bc8458cc84b7a3781856643" kindref="member">algorithm</ref>=algorithm;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>nd.<ref refid="classmspass_1_1utility_1_1_node_data_1aa51f302e3e070fd072255e1d1af9073f" kindref="member">algid</ref>=algid;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nd;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="classmspass_1_1utility_1_1_processing_history_1aec695e46a390b9cf55f1919af803fb33" refkind="member"><highlight class="normal">list&lt;NodeData&gt;<sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1aec695e46a390b9cf55f1919af803fb33" kindref="member">ProcessingHistory::inputs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>id_to_find)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="725"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>list&lt;NodeData&gt;<sp/>result;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>empty<sp/>list<sp/>immediately<sp/>if<sp/>key<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nodes.count(id_to_find)&lt;=0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>these<sp/>have<sp/>to<sp/>be<sp/>const_iterators<sp/>because<sp/>method<sp/>is<sp/>tagged<sp/>const*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>multimap&lt;string,NodeData&gt;::const_iterator<sp/>upper,lower;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>lower=nodes.lower_bound(id_to_find);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>upper=nodes.upper_bound(id_to_find);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>multimap&lt;string,NodeData&gt;::const_iterator<sp/>mptr;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(mptr=lower;mptr!=upper;++mptr)</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>result.push_back(mptr-&gt;second);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="739"><highlight class="normal">};</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741" refid="classmspass_1_1utility_1_1_processing_history_1ab6203063df0564c57f28d76f8d5969ac" refkind="member"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>&amp;<sp/><ref refid="classmspass_1_1utility_1_1_processing_history_1ab6203063df0564c57f28d76f8d5969ac" kindref="member">ProcessingHistory::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>&amp;<sp/>parent)</highlight></codeline>
<codeline lineno="742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">!=(&amp;parent))</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;BasicProcessingHistory::operator=(parent);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes=parent.nodes;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>current_status=parent.current_status;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>current_id=parent.current_id;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>current_stage=parent.current_stage;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>mytype=parent.mytype;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>algorithm=parent.algorithm;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>algid=parent.algid;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>elog=parent.elog;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="comment">/*<sp/>This<sp/>pair<sp/>of<sp/>functions<sp/>in<sp/>an<sp/>earlier<sp/>version<sp/>were<sp/>members<sp/>of</highlight></codeline>
<codeline lineno="759"><highlight class="comment">ProcessingHistory.<sp/><sp/><sp/>They<sp/>were<sp/>made<sp/>functions<sp/>to<sp/>reduce<sp/>unnecessary<sp/>baggage</highlight></codeline>
<codeline lineno="760"><highlight class="comment">in<sp/>the<sp/>low<sp/>level<sp/>ProcessingHistory<sp/>object<sp/>that<sp/>is<sp/>a<sp/>base<sp/>class<sp/>of<sp/>all</highlight></codeline>
<codeline lineno="761"><highlight class="comment">atomic<sp/>data<sp/>in<sp/>mspass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>used<sp/>for<sp/>sorting<sp/>tuple<sp/>in<sp/>set<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::tuple&lt;int,std::string,std::string&gt;<sp/>Algdata;</highlight></codeline>
<codeline lineno="764" refid="classmspass_1_1utility_1_1sort__by__stage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmspass_1_1utility_1_1sort__by__stage" kindref="compound">sort_by_stage</ref></highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Algdata<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Algdata<sp/>B)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="768"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=std::get&lt;0&gt;(A);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=std::get&lt;0&gt;(B);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i&lt;j;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="773"><highlight class="normal">};</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>uses<sp/>a<sp/>completely<sp/>different<sp/>algorithm<sp/>than<sp/>the<sp/>prototype</highlight></codeline>
<codeline lineno="776"><highlight class="comment">that<sp/>was<sp/>once<sp/>a<sp/>method.<sp/><sp/><sp/>It<sp/>also<sp/>returns<sp/>a<sp/>lsit<sp/>of<sp/>tuples<sp/>while<sp/>the<sp/>original</highlight></codeline>
<codeline lineno="777"><highlight class="comment">only<sp/>returned<sp/>a<sp/>list<sp/>of<sp/>names.<sp/><sp/>The<sp/>order<sp/>of<sp/>the<sp/>tuple<sp/>returned<sp/>is:</highlight></codeline>
<codeline lineno="778"><highlight class="comment">stage<sp/>:<sp/>algorithm<sp/>:<sp/>algid</highlight></codeline>
<codeline lineno="779"><highlight class="comment"></highlight></codeline>
<codeline lineno="780"><highlight class="comment">Note<sp/>the<sp/>list<sp/>is<sp/>sorted<sp/>into<sp/>ascending<sp/>order<sp/>by<sp/>stage*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal">list&lt;Algdata&gt;<sp/>algorithm_history(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>&amp;<sp/>h)</highlight></codeline>
<codeline lineno="782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>use<sp/>this<sp/>set<sp/>container<sp/>to<sp/>sort<sp/>out<sp/>unique<sp/>combinations<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/>tuple<sp/>of<sp/>3<sp/>pieces<sp/>of<sp/>NodeData<sp/>that<sp/>form<sp/>the<sp/>ouput.<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>std::set&lt;Algdata&gt;<sp/>algset;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>multimap&lt;string,NodeData&gt;<sp/>hmap=h.<ref refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" kindref="member">get_nodes</ref>();</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>multimap&lt;string,NodeData&gt;::iterator<sp/>mptr;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(mptr=hmap.begin();mptr!=hmap.end();++mptr)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref><sp/>n=mptr-&gt;second;<sp/><sp/></highlight><highlight class="comment">//created<sp/>only<sp/>to<sp/>make<sp/>this<sp/>more<sp/>readable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>Algdata<sp/>work(n.<ref refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" kindref="member">stage</ref>,n.<ref refid="classmspass_1_1utility_1_1_node_data_1a040189091bc8458cc84b7a3781856643" kindref="member">algorithm</ref>,n.<ref refid="classmspass_1_1utility_1_1_node_data_1aa51f302e3e070fd072255e1d1af9073f" kindref="member">algid</ref>);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Intentionally<sp/>ignore<sp/>the<sp/>return<sp/>of<sp/>insert.<sp/><sp/><sp/>We<sp/>expect</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>to<sp/>return<sp/>true<sp/>and<sp/>false<sp/>for<sp/>different<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>algset.insert(work);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>sort<sp/>is<sp/>creating<sp/>a<sp/>mysterious<sp/>compilation<sp/>so<sp/>will</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/>temporarily<sp/>disable<sp/>it<sp/>to<sp/>work<sp/>on<sp/>testing<sp/>main<sp/>class<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::sort(algset.begin(),algset.end(),sort_by_stage);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>list&lt;Algdata&gt;<sp/>result;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>set&lt;Algdata&gt;::iterator<sp/>aptr;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(aptr=algset.begin();aptr!=algset.end();++aptr)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>result.push_back(*aptr);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>also<sp/>uses<sp/>a<sp/>completely<sp/>differnet<sp/>algorithm<sp/>than<sp/>that<sp/>prototype</highlight></codeline>
<codeline lineno="808"><highlight class="comment">that<sp/>was<sp/>a<sp/>method.<sp/><sp/>This<sp/>is<sp/>a<sp/>simple<sp/>linear<sp/>scan<sp/>pulling<sp/>all<sp/>uuids<sp/>that</highlight></codeline>
<codeline lineno="809"><highlight class="comment">match<sp/>alg<sp/>and<sp/>algid.<sp/><sp/>The<sp/>original<sp/>method<sp/>had<sp/>a<sp/>different<sp/>name</highlight></codeline>
<codeline lineno="810"><highlight class="comment">(data_processed_by)<sp/>that<sp/>only<sp/>made<sp/>sense<sp/>if<sp/>the<sp/>function<sp/>were<sp/>a<sp/>member.</highlight></codeline>
<codeline lineno="811"><highlight class="comment">This<sp/>function<sp/>does<sp/>the<sp/>same<sp/>thing<sp/>but<sp/>has<sp/>a<sp/>different<sp/>name<sp/>that</highlight></codeline>
<codeline lineno="812"><highlight class="comment">hopefully<sp/>is<sp/>closer<sp/>to<sp/>describing<sp/>what<sp/>it<sp/>does<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal">list&lt;string&gt;<sp/>algorithm_outputs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ProcessingHistory&amp;<sp/>h,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>alg,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>aid)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>list&lt;string&gt;<sp/>result;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>multimap&lt;string,NodeData&gt;<sp/>hmap=h.get_nodes();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>multimap&lt;string,NodeData&gt;::iterator<sp/>hptr;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(hptr=hmap.begin();hptr!=hmap.end();++hptr)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>NodeData<sp/>n=hptr-&gt;second;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(alg==n.algorithm)<sp/>&amp;&amp;<sp/>(aid==n.algid))<sp/>result.push_back(hptr-&gt;first);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight><highlight class="comment">//End<sp/>mspass<sp/>namespace<sp/>encapsulation</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc"/>
  </compounddef>
</doxygen>
