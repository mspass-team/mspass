<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmspass_1_1utility_1_1_processing_history" kind="class" language="C++" prot="public">
    <compoundname>mspass::utility::ProcessingHistory</compoundname>
    <basecompoundref refid="classmspass_1_1utility_1_1_basic_processing_history" prot="public" virt="non-virtual">mspass::utility::BasicProcessingHistory</basecompoundref>
    <derivedcompoundref refid="classmspass_1_1seismic_1_1_seismogram" prot="public" virt="non-virtual">mspass::seismic::Seismogram</derivedcompoundref>
    <derivedcompoundref refid="classmspass_1_1seismic_1_1_time_series" prot="public" virt="non-virtual">mspass::seismic::TimeSeries</derivedcompoundref>
    <includes refid="_processing_history_8h" local="no">ProcessingHistory.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_processing_history_1a6e1075575bf136ef4639c6b45f9c5402" prot="public" static="no" mutable="no">
        <type><ref refid="classmspass_1_1utility_1_1_error_logger" kindref="compound">ErrorLogger</ref></type>
        <definition>ErrorLogger mspass::utility::ProcessingHistory::elog</definition>
        <argsstring></argsstring>
        <name>elog</name>
        <qualifiedname>mspass::utility::ProcessingHistory::elog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="228" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="228" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_processing_history_1a31ee1661077d22932b4002f617b19a8f" prot="protected" static="no" mutable="no">
        <type>std::multimap&lt; std::string, <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">mspass::utility::NodeData</ref> &gt;</type>
        <definition>std::multimap&lt;std::string, mspass::utility::NodeData&gt; mspass::utility::ProcessingHistory::nodes</definition>
        <argsstring></argsstring>
        <name>nodes</name>
        <qualifiedname>mspass::utility::ProcessingHistory::nodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="650" column="17" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="650" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_processing_history_1ae6fb28d5ceee0c60ca244e288ea5bf2f" prot="private" static="no" mutable="no">
        <type>ProcessingStatus</type>
        <definition>ProcessingStatus mspass::utility::ProcessingHistory::current_status</definition>
        <argsstring></argsstring>
        <name>current_status</name>
        <qualifiedname>mspass::utility::ProcessingHistory::current_status</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="657" column="20" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_processing_history_1a7d9804de5348bfa124076fa9c1027e09" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mspass::utility::ProcessingHistory::current_id</definition>
        <argsstring></argsstring>
        <name>current_id</name>
        <qualifiedname>mspass::utility::ProcessingHistory::current_id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="659" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_processing_history_1a078af2bfa6413d5633871c3f1ded57b1" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int mspass::utility::ProcessingHistory::current_stage</definition>
        <argsstring></argsstring>
        <name>current_stage</name>
        <qualifiedname>mspass::utility::ProcessingHistory::current_stage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="660" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_processing_history_1a5026ea51bd2592b0d9e10661cef79743" prot="private" static="no" mutable="no">
        <type>AtomicType</type>
        <definition>AtomicType mspass::utility::ProcessingHistory::mytype</definition>
        <argsstring></argsstring>
        <name>mytype</name>
        <qualifiedname>mspass::utility::ProcessingHistory::mytype</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="661" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_processing_history_1a633328c234ab21f42bf6cb406bb238d9" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mspass::utility::ProcessingHistory::algorithm</definition>
        <argsstring></argsstring>
        <name>algorithm</name>
        <qualifiedname>mspass::utility::ProcessingHistory::algorithm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="662" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_processing_history_1af5fec4a10c976422e7041b7d5c85c911" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mspass::utility::ProcessingHistory::algid</definition>
        <argsstring></argsstring>
        <name>algid</name>
        <qualifiedname>mspass::utility::ProcessingHistory::algid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="663" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="663" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a78c4def2e3503ba2fbdadf3c02b733a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::ProcessingHistory::ProcessingHistory</definition>
        <argsstring>()</argsstring>
        <name>ProcessingHistory</name>
        <qualifiedname>mspass::utility::ProcessingHistory::ProcessingHistory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="230" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a225e2e1941f342f3764c2c27854ad2f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::ProcessingHistory::ProcessingHistory</definition>
        <argsstring>(const std::string jobnm, const std::string jid)</argsstring>
        <name>ProcessingHistory</name>
        <qualifiedname>mspass::utility::ProcessingHistory::ProcessingHistory</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>jobnm</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>jid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct and fill in <ref refid="classmspass_1_1utility_1_1_basic_processing_history" kindref="compound">BasicProcessingHistory</ref> job attributes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jobnm</parametername>
</parameternamelist>
<parameterdescription>
<para>- set as jobname </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jid</parametername>
</parameternamelist>
<parameterdescription>
<para>- set as jobid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="236" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a80dc3ba4e28743d0b13c105dc62428aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::ProcessingHistory::ProcessingHistory</definition>
        <argsstring>(const ProcessingHistory &amp;parent)</argsstring>
        <name>ProcessingHistory</name>
        <qualifiedname>mspass::utility::ProcessingHistory::ProcessingHistory</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="238" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::ProcessingHistory::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <qualifiedname>mspass::utility::ProcessingHistory::is_empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the processing chain is empty.</para>
<para>This method provides a standard test for an invalid, empty processing chain. Constructors except the copy constructor will all put this object in an invalid state that will cause this method to return true. Only if the chain is initialized properly with a call to set_as_origin will this method return a false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="246" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a440cedfda00fd0b7211ed4673f09426e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::ProcessingHistory::is_raw</definition>
        <argsstring>() const</argsstring>
        <name>is_raw</name>
        <qualifiedname>mspass::utility::ProcessingHistory::is_raw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the current data is in state defined as &quot;raw&quot; - see class description </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="249" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a477b2020ad7e3c753999e3906cd8eb58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::ProcessingHistory::is_origin</definition>
        <argsstring>() const</argsstring>
        <name>is_origin</name>
        <qualifiedname>mspass::utility::ProcessingHistory::is_origin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the current data is in state defined as &quot;origin&quot; - see class description </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="252" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a8cfd15514483fc2701e53ba1be8412e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::ProcessingHistory::is_volatile</definition>
        <argsstring>() const</argsstring>
        <name>is_volatile</name>
        <qualifiedname>mspass::utility::ProcessingHistory::is_volatile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the current data is in state defined as &quot;volatile&quot; - see class description </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="255" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="127" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a35cd2643171f354ded06e1a34681961d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::ProcessingHistory::is_saved</definition>
        <argsstring>() const</argsstring>
        <name>is_saved</name>
        <qualifiedname>mspass::utility::ProcessingHistory::is_saved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the current data is in state defined as &quot;saved&quot; - see class description </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="258" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="133" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a04eaa592369744d85f54da21b8de9776" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t mspass::utility::ProcessingHistory::number_of_stages</definition>
        <argsstring>() override</argsstring>
        <name>number_of_stages</name>
        <qualifiedname>mspass::utility::ProcessingHistory::number_of_stages</qualifiedname>
        <reimplements refid="classmspass_1_1utility_1_1_basic_processing_history_1ac02ca16b83b616ade105d6694ffb6f7d">number_of_stages</reimplements>
        <briefdescription>
<para>Return number of processing stages that have been applied to this object. </para>
        </briefdescription>
        <detaileddescription>
<para>One might want to know how many processing steps have been previously applied to produce the current data. For linear algorithms that would be useful only in debugging, but for an iterative algorithm it can be essential to avoid infinite loops with a loop limit parameter. This method returns how many times something has been done to alter the associated data. It returns 0 if the data are raw.</para>
<para>Important note is that the number return is the number of processing steps since the last save. Because a save operation is assumed to save the history chain then flush it there is not easy way at present to keep track of the total number of stages. If we really need this functionality it could be easily retrofitted with another private variable that is not reset when the clear method is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="276" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a0621aa8adf8ebaab44a375a299c14fd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::ProcessingHistory::set_as_origin</definition>
        <argsstring>(const std::string alg, const std::string algid, const std::string uuid, const AtomicType typ, bool define_as_raw=false)</argsstring>
        <name>set_as_origin</name>
        <qualifiedname>mspass::utility::ProcessingHistory::set_as_origin</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>algid</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>uuid</declname>
        </param>
        <param>
          <type>const AtomicType</type>
          <declname>typ</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>define_as_raw</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set to define this as the top origin of a history chain.</para>
<para>This method should be called when a new object is created to initialize the history as an origin. Note again an origin may be raw but not all origins are define as raw. This interface controls that through the boolean define_as_raw (false by default). python wrappers should define an alternate set_as_raw method that calls this method with define_as_raw set true.</para>
<para>It is VERY IMPORTANT to realize that the uuid argument passed to this method is if fundamental importance. That string is assumed to be a uuid that can be linked to either a parent data object read from storage and/or linked to a history chain saved by a prior run. It becomes the current_id for the data to which this object is a parent. This method also always does two things that define how the contents can be used. current_stage is ALWAYS set 0. We distinguish a pure origin from an intermediate save ONLY by the status value saved in the history chain. That is, only uuids with status set to RAW are viewed as guaranteed to be stored. A record marked ORIGIN is assumed to passed through save operation. To retrieve the history chain from multiple runs the pieces have to be pieced together by history data stored in MongoDB.</para>
<para>The contents of the history data structures should be empty when this method is called. That would be the norm for any constructor except those that make a deep copy. If unsure the clear method should be called before this method is called. If it isn&apos;t empty it will be cleared anyway and a complaint message will be posted to elog.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the algorithm names to assign to the origin node. This would normally be a reader name, but it could be a synthetic generator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algid</parametername>
</parameternamelist>
<parameterdescription>
<para>is an id designator to uniquely define an instance of algorithm. Note that algid must itself be a unique keyword or the history chains will get scrambled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uuid</parametername>
</parameternamelist>
<parameterdescription>
<para>unique if for this data object (see note above) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data type (C++ class) &quot;this&quot; points to. It might be possible to determine this dynamically, but a design choice was to only allow registered classes through this mechanism. i.e. the enum class typ implements has a finite number of C++ classes it accepts. The type must be a child <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>define_as_raw</parametername>
</parameternamelist>
<parameterdescription>
<para>sets status as RAW if true and ORIGIN otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Never</parametername>
</parameternamelist>
<parameterdescription>
<para>throws an exception BUT this method will post a complaint to elog if the history data structures are not empty and it the clear method needs to be called internally. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="323" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="149" bodyend="171"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a42865512c68a26b85b394825a1629729" compoundref="_processing_history_8cc" startline="631" endline="638">clear</references>
        <references refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" compoundref="_error_logger_8cc" startline="72" endline="76">mspass::utility::ErrorLogger::log_error</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a986da6a438099a371a0b0a9556f2c8b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::ProcessingHistory::new_ensemble_process</definition>
        <argsstring>(const std::string alg, const std::string algid, const AtomicType typ, const std::vector&lt; ProcessingHistory * &gt; parents, const bool create_newid=true)</argsstring>
        <name>new_ensemble_process</name>
        <qualifiedname>mspass::utility::ProcessingHistory::new_ensemble_process</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>algid</declname>
        </param>
        <param>
          <type>const AtomicType</type>
          <declname>typ</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> * &gt;</type>
          <declname>parents</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>create_newid</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define history chain for an algorithm with multiple inputs in an ensemble.</para>
<para>Use this method to define the history chain for an algorithm that has multiple inputs for each output. Each output needs to call this method to build the connections that define how all inputs link to the the new data being created by the algorithm that calls this method. Use this method for map operators that have an ensemble object as input and a single data object as output. This method should be called in creation of the output object. If the algorthm builds multiple outputs to build an output ensemble call this method for each output before pushing it to the output ensemble container.</para>
<para>This method should not be used for a reduce operation in spark. It does not satisfy the associative rule for reduce. Use accumulate for reduce operations.</para>
<para>Normally, it makes sense to have the boolean create_newid true so it is guaranteed the current_id is unique. There is little cost in creating a new one if there is any doubt the current_id is not a duplicate. The false option is there only for rare cases where the current id value needs to be preserved.</para>
<para>Note the vector of data passed is raw pointers for efficiency to avoid excessive copying. For normal use this should not create memory leaks but make sure you don&apos;t try to free what the pointers point to or problems are guaranteed. It is VERY IMPORTANT to realize that all the pointers are presumed to point to the <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> component of a set of larger data object (Seismogram or TimeSeries). The parents do not all have be a common type as if they have valid history data within them their current type will be defined.</para>
<para>This method ALWAYS marks the status as VOLATILE.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the algorithm names to assign to the origin node. This would normally be name defining the algorithm that makes sense to a human. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algid</parametername>
</parameternamelist>
<parameterdescription>
<para>is an id designator to uniquely define an instance of algorithm. Note that algid must itself be a unique keyword or the history chains will get scrambled. alg is mostly carried as baggage to make output more easily comprehended without additional lookups. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data type (C++ class) the algorithm that is generating this data will create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>create_newid</parametername>
</parameternamelist>
<parameterdescription>
<para>is a boolean defining how the current id is handled. As described above, if true the method will call newid and set that as the current id of this data object. If false the current value is left intact. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a string representation of the uuid of the data to which this <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> is now attached. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="374" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="172" bodyend="258"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a42865512c68a26b85b394825a1629729" compoundref="_processing_history_8cc" startline="631" endline="638">clear</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" compoundref="_processing_history_8cc" startline="612" endline="630">get_nodes</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" compoundref="_processing_history_8cc" startline="109" endline="113">is_empty</references>
        <references refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" compoundref="_error_logger_8cc" startline="72" endline="76">mspass::utility::ErrorLogger::log_error</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" compoundref="_processing_history_8cc" startline="651" endline="657">newid</references>
        <references refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" compoundref="_processing_history_8h" startline="123">mspass::utility::NodeData::stage</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1abf871538f6024bebc2b1512ba1e58ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::ProcessingHistory::add_one_input</definition>
        <argsstring>(const ProcessingHistory &amp;data_to_add)</argsstring>
        <name>add_one_input</name>
        <qualifiedname>mspass::utility::ProcessingHistory::add_one_input</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>data_to_add</declname>
        </param>
        <briefdescription>
<para>Add one datum as an input for current data. </para>
        </briefdescription>
        <detaileddescription>
<para>This method MUST ONLY be called after a call to new_ensemble_process in the situation were additional inputs need to be defined that were not available at the time new_ensemble_process was called. An example might be a stack that was created within the scope of &quot;algorithm&quot; and then used in some way to create the output data. In any case it differs fundamentally from new_ensemble_process in that it does not touch attributes that define the current state of &quot;this&quot;. It simply says this is another input to the data &quot;this&quot; contains.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_to_add</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> of the data object to be defined as input. Note the type of the data to which it is linked will be saved as the base of the input chain from data_to_add. It can be different from the type of &quot;this&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="394" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="263" bodyend="301"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" compoundref="_processing_history_8cc" startline="659" endline="668">current_nodedata</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" compoundref="_processing_history_8cc" startline="612" endline="630">get_nodes</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1adf60368ca5c699cc9186fa145d04376d" compoundref="_processing_history_8h" startline="579" endline="579">id</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" compoundref="_processing_history_8cc" startline="109" endline="113">is_empty</references>
        <references refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" compoundref="_error_logger_8cc" startline="72" endline="76">mspass::utility::ErrorLogger::log_error</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a667e046c02eb06959c3632c9157161b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::ProcessingHistory::add_many_inputs</definition>
        <argsstring>(const std::vector&lt; ProcessingHistory * &gt; &amp;d)</argsstring>
        <name>add_many_inputs</name>
        <qualifiedname>mspass::utility::ProcessingHistory::add_many_inputs</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> * &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Define several data objects as inputs. </para>
        </briefdescription>
        <detaileddescription>
<para>This method acts like add_one_input in that it alters only the inputs chain. In fact it is nothing more than a loop over the components of the vector calling add_one_input for each component.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the vector of data to define as inputs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="403" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="304" bodyend="311"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1abf871538f6024bebc2b1512ba1e58ff7" compoundref="_processing_history_8cc" startline="263" endline="301">add_one_input</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a4f2cb1d5af0500a526fa8745aa52db36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::ProcessingHistory::merge</definition>
        <argsstring>(const ProcessingHistory &amp;data_to_add)</argsstring>
        <name>merge</name>
        <qualifiedname>mspass::utility::ProcessingHistory::merge</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>data_to_add</declname>
        </param>
        <briefdescription>
<para>Merge the history nodes from another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_to_add</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> of the data object to be merged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="410" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="439" bodyend="472"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" compoundref="_processing_history_8cc" startline="612" endline="630">get_nodes</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1adf60368ca5c699cc9186fa145d04376d" compoundref="_processing_history_8h" startline="579" endline="579">id</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" compoundref="_processing_history_8cc" startline="109" endline="113">is_empty</references>
        <references refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" compoundref="_error_logger_8cc" startline="72" endline="76">mspass::utility::ErrorLogger::log_error</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1afc16a9d2c81e0fce08669573ffa8d741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::ProcessingHistory::accumulate</definition>
        <argsstring>(const std::string alg, const std::string algid, const AtomicType typ, const ProcessingHistory &amp;newinput)</argsstring>
        <name>accumulate</name>
        <qualifiedname>mspass::utility::ProcessingHistory::accumulate</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>algid</declname>
        </param>
        <param>
          <type>const AtomicType</type>
          <declname>typ</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>newinput</declname>
        </param>
        <briefdescription>
<para>Method to use with a spark reduce algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>A reduce operator in spark utilizes a binary function where two inputs are used to generate a single output object. Because the inputs could be scattered on multiple processor nodes this operation must be associative. The new_ensemble_process method does not satisfy that constraint so this method was necessary to handle that type of algorithm correctly.</para>
<para>The way this algorithm works is it fundamentally branches on two different cases: (1) initialization, which is detected by testing if the node data map is empty or (2) secondary calls. This should work even if multiple inputs are combined at the end of the reduce operation because the copies being merged will not be empty. Note an empty input will create a complaint entry in the error log. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="429" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="474" bodyend="544"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" compoundref="_processing_history_8cc" startline="659" endline="668">current_nodedata</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" compoundref="_processing_history_8cc" startline="612" endline="630">get_nodes</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" compoundref="_processing_history_8cc" startline="109" endline="113">is_empty</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a4f2cb1d5af0500a526fa8745aa52db36" compoundref="_processing_history_8cc" startline="439" endline="472">merge</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" compoundref="_processing_history_8cc" startline="651" endline="657">newid</references>
        <references refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" compoundref="_processing_history_8h" startline="123">mspass::utility::NodeData::stage</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1afbcd32c36bbabff34fb51e382da69d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::ProcessingHistory::clean_accumulate_uuids</definition>
        <argsstring>()</argsstring>
        <name>clean_accumulate_uuids</name>
        <qualifiedname>mspass::utility::ProcessingHistory::clean_accumulate_uuids</qualifiedname>
        <briefdescription>
<para>Clean up inconsistent uuids that can be produced by reduce. </para>
        </briefdescription>
        <detaileddescription>
<para>In a spark reduce operation it is possible to create multiple uuid keys for inputs to the same algorithm instance. That happpens because the mechanism used by <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> to define the process history tree is not associative. When a reduce gets sprayed across multiple nodes multiple initializations can occur that make artifical inconsitent uuids. This method should normally be called after a reduce operator if history is being preserved or the history chain may be foobarred - no invalid just mess up with extra branches in the processing tree.</para>
<para>A VERY IMPORTANT limitation of the algorithm used by this method is that the combination of algorithm and algid in &quot;this&quot; MUST be unique for a given job run when a reduce is called. i.e. if an earlier workflow had used alg and algid but with a different jobid and jobname the distintion cannot be detected with this algorithm. This means our global history handling must guarantee algid is unique for each run.</para>
<para><simplesect kind="return"><para>unique uuid for alg,algid match set in the history chain. Note if there are no duplicates it simply returns the only one it finds. If there are duplicates it returns the lexically smallest (first in alphabetic order) uuid. Most importantly if there is no match or if history is empty it returns the string UNDEFINED. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="456" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="546" bodyend="611"/>
        <references refid="classmspass_1_1utility_1_1_node_data_1aa51f302e3e070fd072255e1d1af9073f" compoundref="_processing_history_8h" startline="142">mspass::utility::NodeData::algid</references>
        <references refid="classmspass_1_1utility_1_1_node_data_1a040189091bc8458cc84b7a3781856643" compoundref="_processing_history_8h" startline="132">mspass::utility::NodeData::algorithm</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" compoundref="_processing_history_8cc" startline="659" endline="668">current_nodedata</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" compoundref="_processing_history_8cc" startline="109" endline="113">is_empty</references>
        <references refid="classmspass_1_1utility_1_1_node_data_1a0f0df95910b9712e36d3a8389c0c9f38" compoundref="_processing_history_8h" startline="118">mspass::utility::NodeData::uuid</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a75af2861c06a905968cc9c727b8cc877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mspass::utility::ProcessingHistory::new_map</definition>
        <argsstring>(const std::string alg, const std::string algid, const AtomicType typ, const ProcessingStatus newstatus=ProcessingStatus::VOLATILE)</argsstring>
        <name>new_map</name>
        <qualifiedname>mspass::utility::ProcessingHistory::new_map</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>algid</declname>
        </param>
        <param>
          <type>const AtomicType</type>
          <declname>typ</declname>
        </param>
        <param>
          <type>const ProcessingStatus</type>
          <declname>newstatus</declname>
          <defval>ProcessingStatus::VOLATILE</defval>
        </param>
        <briefdescription>
<para>Define this algorithm as a one-to-one map of same type data. </para>
        </briefdescription>
        <detaileddescription>
<para>Many algorithms define a one-to-one map where each one input data object creates one output data object. This (overloaded) version of this method is most appropriate when input and output are the same type and the history chain (<ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>) is what the new algorithm will alter to make the result when it finishes. Use the overloaded version with a separate <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> copy if the current object&apos;s data are not correct. In this algorithm the chain for this algorithm is simply appended with new definitions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the algorithm names to assign to the origin node. This would normally be name defining the algorithm that makes sense to a human. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algid</parametername>
</parameternamelist>
<parameterdescription>
<para>is an id designator to uniquely define an instance of algorithm. Note that algid must itself be a unique keyword or the history chains will get scrambled. alg is mostly carried as baggage to make output more easily comprehended without additional lookups. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data type (C++ class) the algorithm that is generating this data will create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newstatus</parametername>
</parameternamelist>
<parameterdescription>
<para>is how the status marking for the output. Normal (default) would be VOLATILE. This argument was included mainly for flexibility in case we wanted to extend the allowed entries in ProcessingStatus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="481" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1ae0225ef6ba03dc64ebb711bb54b1554d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mspass::utility::ProcessingHistory::new_map</definition>
        <argsstring>(const std::string alg, const std::string algid, const AtomicType typ, const ProcessingHistory &amp;data_to_clone, const ProcessingStatus newstatus=ProcessingStatus::VOLATILE)</argsstring>
        <name>new_map</name>
        <qualifiedname>mspass::utility::ProcessingHistory::new_map</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>algid</declname>
        </param>
        <param>
          <type>const AtomicType</type>
          <declname>typ</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>data_to_clone</declname>
        </param>
        <param>
          <type>const ProcessingStatus</type>
          <declname>newstatus</declname>
          <defval>ProcessingStatus::VOLATILE</defval>
        </param>
        <briefdescription>
<para>Define this algorithm as a one-to-one map. </para>
        </briefdescription>
        <detaileddescription>
<para>Many algorithms define a one-to-one map where each one input data object creates one output data object. This class allows the input and output to be different data types requiring only that one input will map to one output. It differs from the overloaded method with fewer arguments in that it should be used if you need to clear and refresh the history chain for any reason. Known examples are creating simulation waveforms for testing within a workflow that have no prior history data loaded but which clone some properties of another piece of data. This method should be used in any situation where the history chain in the current data is wrong but the contents are the linked to some other process chain. It is supplied to cover odd cases, but use will likely be rare.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the algorithm names to assign to the origin node. This would normally be name defining the algorithm that makes sense to a human. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algid</parametername>
</parameternamelist>
<parameterdescription>
<para>is an id designator to uniquely define an instance of algorithm. Note that algid must itself be a unique keyword or the history chains will get scrambled. alg is mostly carried as baggage to make output more easily comprehended without additional lookups. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data type (C++ class) the algorithm that is generating this data will create. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_to_clone</parametername>
</parameternamelist>
<parameterdescription>
<para>is reference to the <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> section of a parent data object that should be used to override the existing history chain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newstatus</parametername>
</parameternamelist>
<parameterdescription>
<para>is how the status marking for the output. Normal (default) would be VOLATILE. This argument was included mainly for flexibility in case we wanted to extend the allowed entries in ProcessingStatus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="512" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1ab5152d2f6a4706e635d6ca16e68b9bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::ProcessingHistory::map_as_saved</definition>
        <argsstring>(const std::string alg, const std::string algid, const AtomicType typ)</argsstring>
        <name>map_as_saved</name>
        <qualifiedname>mspass::utility::ProcessingHistory::map_as_saved</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>algid</declname>
        </param>
        <param>
          <type>const AtomicType</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Prepare the current data for saving. </para>
        </briefdescription>
        <detaileddescription>
<para>Saving data is treated as a special form of map operation. That is because a save by our definition is always a one-to-one operation with an index entry for each atomic object. This method pushes a new entry in the history chain tagged by the algorithm/algid field for the writer. It differs from new_map in the important sense that the uuid is not changed. The record this sets in the nodes multimap will then have the same uuid for the key as the that in <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref>. That along with the status set SAVED can be used downstream to recognize save records.</para>
<para>It is VERY IMPORTANT for use of this method to realize this method saves nothing. It only preps the history chain data so calls that follow will retrieve the right information to reconstruct the full history chain. Writers should follow this sequence:<orderedlist>
<listitem><para>call map_as_saved with the writer name for algorithm definition</para>
</listitem><listitem><para>save the data and history chain to MongoDB.</para>
</listitem><listitem><para>be sure you have a copy of the uuid string of the data just saved and call the clear method.</para>
</listitem><listitem><para>call the set_as_origin method using the uuid saved with the algorithm/id the same as used for earlier call to map_as_saved. This makes the put <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> in a state identical to that produced by a reader.</para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the algorithm names to assign to the ouput. This would normally be name defining the writer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algid</parametername>
</parameternamelist>
<parameterdescription>
<para>is an id designator to uniquely define an instance of algorithm. Note that algid must itself be a unique keyword or the history chains will get scrambled. alg is mostly carried as baggage to make output more easily comprehended without additional lookups. Note one model to distinguish records of actual save and redefinition of the data as an origin (see above) is to use a different id for the call to map_as_saved and later call to set_as_origin. This code doesn&apos;t care, but that is an implementation detail in how this will work with MongoDB. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data type (C++ class) that was just saved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="551" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="395" bodyend="436"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" compoundref="_processing_history_8cc" startline="659" endline="668">current_nodedata</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1adf60368ca5c699cc9186fa145d04376d" compoundref="_processing_history_8h" startline="579" endline="579">id</references>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" compoundref="_processing_history_8cc" startline="109" endline="113">is_empty</references>
        <references refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" compoundref="_error_logger_8cc" startline="72" endline="76">mspass::utility::ErrorLogger::log_error</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a42865512c68a26b85b394825a1629729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::ProcessingHistory::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>mspass::utility::ProcessingHistory::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear this history chain - use with caution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="554" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="631" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::multimap&lt; std::string, <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">mspass::utility::NodeData</ref> &gt;</type>
        <definition>multimap&lt; string, NodeData &gt; mspass::utility::ProcessingHistory::get_nodes</definition>
        <argsstring>() const</argsstring>
        <name>get_nodes</name>
        <qualifiedname>mspass::utility::ProcessingHistory::get_nodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the nodes multimap that defines the tree stucture branches.</para>
<para>This method does more than just get the protected multimap called nodes. It copies the map and then pushes the &quot;current&quot; contents to the map before returning the copy. This allows the data defines as current to not be pushed into the tree until they are needed. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="561" column="17" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="612" bodyend="630"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" compoundref="_processing_history_8cc" startline="109" endline="113">is_empty</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1afe65cff0547c9b75ea3ce9a7aa6b20f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::utility::ProcessingHistory::stage</definition>
        <argsstring>() const</argsstring>
        <name>stage</name>
        <qualifiedname>mspass::utility::ProcessingHistory::stage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the current stage count for this object.</para>
<para>We maintain a counter of the number of processing steps that have been applied to produce this data object. This simple method returns that counter. With this implementation this is identical to number_of_stages. We retain it in the API in the event we want to implement an accumulating counter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="571" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="571" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a1ef35389afcd6d4305442a3720398a34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ProcessingStatus</type>
        <definition>ProcessingStatus mspass::utility::ProcessingHistory::status</definition>
        <argsstring>() const</argsstring>
        <name>status</name>
        <qualifiedname>mspass::utility::ProcessingHistory::status</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the current status definition (an enum). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="573" column="20" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="573" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1adf60368ca5c699cc9186fa145d04376d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mspass::utility::ProcessingHistory::id</definition>
        <argsstring>() const</argsstring>
        <name>id</name>
        <qualifiedname>mspass::utility::ProcessingHistory::id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the id of this object set for this history chain.</para>
<para>We maintain the uuid for a data object inside this class. This method fetches the string representation of the uuid of this data object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="579" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="579" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a89df41edb1ff1e92abd5a4f864c36673" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>std::pair&lt; std::string, std::string &gt; mspass::utility::ProcessingHistory::created_by</definition>
        <argsstring>() const</argsstring>
        <name>created_by</name>
        <qualifiedname>mspass::utility::ProcessingHistory::created_by</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the algorithm name and id that created current node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="581" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref></type>
        <definition>NodeData mspass::utility::ProcessingHistory::current_nodedata</definition>
        <argsstring>() const</argsstring>
        <name>current_nodedata</name>
        <qualifiedname>mspass::utility::ProcessingHistory::current_nodedata</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return all the attributes of current.</para>
<para>This is a convenience method strictly for the C++ interface (it too nonpythonic to be useful to wrap for python). It returns a <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> class containing the attributes of the head of the chain. Like the getters above that is needed to save that data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="591" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="659" bodyend="668"/>
        <references refid="classmspass_1_1utility_1_1_node_data_1aa51f302e3e070fd072255e1d1af9073f" compoundref="_processing_history_8h" startline="142">mspass::utility::NodeData::algid</references>
        <references refid="classmspass_1_1utility_1_1_node_data_1a040189091bc8458cc84b7a3781856643" compoundref="_processing_history_8h" startline="132">mspass::utility::NodeData::algorithm</references>
        <references refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" compoundref="_processing_history_8h" startline="123">mspass::utility::NodeData::stage</references>
        <references refid="classmspass_1_1utility_1_1_node_data_1a3dab2773c306f1d9977dccb455beec59" compoundref="_processing_history_8h" startline="116">mspass::utility::NodeData::status</references>
        <references refid="classmspass_1_1utility_1_1_node_data_1aa7c6f56ceca095d0af31f456d75954a4" compoundref="_processing_history_8h" startline="120">mspass::utility::NodeData::type</references>
        <references refid="classmspass_1_1utility_1_1_node_data_1a0f0df95910b9712e36d3a8389c0c9f38" compoundref="_processing_history_8h" startline="118">mspass::utility::NodeData::uuid</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::ProcessingHistory::newid</definition>
        <argsstring>()</argsstring>
        <name>newid</name>
        <qualifiedname>mspass::utility::ProcessingHistory::newid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new id.</para>
<para>This creates a new uuid - how is an implementation detail but here we use boost&apos;s random number generator uuid generator that has some absurdly small probability of generating two equal ids. It returns the string representation of the id created. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="598" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="651" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a82d681c60d2e64fab12b92e3244ce052" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::utility::ProcessingHistory::number_inputs</definition>
        <argsstring>() const</argsstring>
        <name>number_inputs</name>
        <qualifiedname>mspass::utility::ProcessingHistory::number_inputs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of inputs used to create current data.</para>
<para>In a number of contexts it can be useful to know the number of inputs defined for the current object. This returns that count. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="604" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="648" bodyend="650"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a82d681c60d2e64fab12b92e3244ce052" compoundref="_processing_history_8cc" startline="648" endline="650">number_inputs</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a95006e7f8009c6d9a5c43d7e086c441b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::utility::ProcessingHistory::number_inputs</definition>
        <argsstring>(const std::string uuidstr) const</argsstring>
        <name>number_inputs</name>
        <qualifiedname>mspass::utility::ProcessingHistory::number_inputs</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>uuidstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of inputs defined for any data in the process chain.</para>
<para>This overloaded version of number_inputs asks for the number of inputs defined for an arbitrary uuid. This is useful only if backtracing the ancestory of a child.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uuidstr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the uuid string to check in the ancestory record. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="613" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1aec67690fe76c0d6c41dc096bc2f400ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::ProcessingHistory::set_id</definition>
        <argsstring>(const std::string newid)</argsstring>
        <name>set_id</name>
        <qualifiedname>mspass::utility::ProcessingHistory::set_id</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>newid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the uuid manually.</para>
<para>It may occasionally be necessary to create a uuid by some other mechanism. This allows that, but this method should be used with caution and only if you understand the consequences.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newid</parametername>
</parameternamelist>
<parameterdescription>
<para>is string definition to use for the id. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="623" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="658" bodyend="658"/>
        <references refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" compoundref="_processing_history_8cc" startline="651" endline="657">newid</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1aec695e46a390b9cf55f1919af803fb33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">mspass::utility::NodeData</ref> &gt;</type>
        <definition>list&lt; NodeData &gt; mspass::utility::ProcessingHistory::inputs</definition>
        <argsstring>(const std::string id_to_find) const</argsstring>
        <name>inputs</name>
        <qualifiedname>mspass::utility::ProcessingHistory::inputs</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>id_to_find</declname>
        </param>
        <briefdescription>
<para>Return a list of data that define the inputs to a give uuids. </para>
        </briefdescription>
        <detaileddescription>
<para>This low level getter returns the <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> objects that define the inputs to the uuid of some piece of data that was used as input at some stage for the current object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id_to_find</parametername>
</parameternamelist>
<parameterdescription>
<para>is the uuid for which input data is desired.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list of <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> that define the inputs. Will silently return empty list if the key is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="638" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="670" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1ab6203063df0564c57f28d76f8d5969ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
        <definition>ProcessingHistory &amp; mspass::utility::ProcessingHistory::operator=</definition>
        <argsstring>(const ProcessingHistory &amp;parent)</argsstring>
        <name>operator=</name>
        <qualifiedname>mspass::utility::ProcessingHistory::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment operator. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="641" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="687" bodyend="700"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_processing_history_1a4a0d4eb6fdf47096bcb78caff961c0dd" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mspass::utility::ProcessingHistory::serialize</definition>
        <argsstring>(Archive &amp;ar, const unsigned int version)</argsstring>
        <name>serialize</name>
        <qualifiedname>mspass::utility::ProcessingHistory::serialize</qualifiedname>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="667" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="667" bodyend="677"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Lightweight class to preserve procesing chain of atomic objects. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is intended to be used as a parent for any data object in MsPASS that should be considered atomic. It is designed to completely preserve the chain of processing algorithms applied to any atomic data to put it in it&apos;s current state. It is designed to save that information during processing with the core information that can then be saved to define the state. Writers for atomic objects inheriting this class should arrange to save the data contained in it to history collection in MongoDB. Note that actually doing the inverse is a different problem that are expected to be implemented as extesions of this class to be used in special programs used to reconstrut a data workflow and the processing chain applied to produce any final output.</para>
<para>The design was complicated by the need to keep the history data from causing memory bloat. A careless implementation could be prone to that problem even for modest chains, but we were particularly worried about iterative algorithms that could conceivably multiply the size of out of control. There was also the fundamental problem of dealing with transient versus data stored in longer term storage instead of just in memory. Our implementation was simplified by using the concept of a unique id with a Universal Unique IDentifier. (UUID) Our history mechanism assumes each data object has a uuid assigned to it on creation by an implementation id of the one object this particular record is associated with on dependent mechanism. That is, whenever a new object is created in MsPASS using the history feature one of these records will be created for each data object that is defined as atomic. This string defines unique key for the object it could be connected to with the this pointer. The parents of the current object are defined by the inputs data structure below.</para>
<para>In the current implementation id is string representation of a uuid maintained by each atomic object. We use a string to maximize flexibility at a minor cost for storage.</para>
<para>Names used imply the following concepts: raw - means the data is new input to mspass (raw data from data center, field experiment, or simulation). That tag means no prior history can be reconstructed. origin - top-level ancestor of current data. The top of a processing chain is always tagged as an origin. A top level can also be &quot;raw&quot; but not necessarily. In particular, readers that load partially processed data should mark the data read as an origin, but not raw. stage - all processed data objects that are volatile elements within a workflow are defined as a stage. They are presumed to leave their existence known only through ancestory preserved in the processing chain. A stage becomes a potential root only when it is saved by a writer where the writer will mark that position as a save. Considered calling this a branch, but that doesn&apos;t capture the concept right since we require this mechanism to correctly perserve splits into multiple outputs. We preserve that cleanly for each data object. That is, the implementation make it easy to reconstruct the history of a single final data object, but reconstructing interlinks between objects in an overall processing flow will be a challenge. That was a necessary compomise to avoid memory bloat. The history is properly viewed as a tree branching from a single root (the final output) to leaves that define all it&apos;s parents.</para>
<para>The concepts of raw, origin, and stage are implemented with the enum class defined above called ProcessingStatus. Each history record has that as an attribute, but each call to new_stage updates a copy kept inside this object to simplify the python wrappers. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>mspass::seismic::Seismogram</label>
        <link refid="classmspass_1_1seismic_1_1_seismogram"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mspass::seismic::SeismogramWGaps</label>
        <link refid="classmspass_1_1seismic_1_1_seismogram_w_gaps"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>mspass::seismic::TimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_time_series"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>mspass::seismic::TimeSeriesWGaps</label>
        <link refid="classmspass_1_1seismic_1_1_time_series_w_gaps"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>mspass::utility::BasicProcessingHistory</label>
        <link refid="classmspass_1_1utility_1_1_basic_processing_history"/>
      </node>
      <node id="1">
        <label>mspass::utility::ProcessingHistory</label>
        <link refid="classmspass_1_1utility_1_1_processing_history"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>mspass::utility::BasicProcessingHistory</label>
        <link refid="classmspass_1_1utility_1_1_basic_processing_history"/>
      </node>
      <node id="3">
        <label>mspass::utility::ErrorLogger</label>
        <link refid="classmspass_1_1utility_1_1_error_logger"/>
      </node>
      <node id="1">
        <label>mspass::utility::ProcessingHistory</label>
        <link refid="classmspass_1_1utility_1_1_processing_history"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>elog</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="226" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="226" bodyend="678"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_processing_history_1afc16a9d2c81e0fce08669573ffa8d741" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>accumulate</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a667e046c02eb06959c3632c9157161b6" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>add_many_inputs</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1abf871538f6024bebc2b1512ba1e58ff7" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>add_one_input</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1af5fec4a10c976422e7041b7d5c85c911" prot="private" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>algid</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a633328c234ab21f42bf6cb406bb238d9" prot="private" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>algorithm</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1a28dd8e5f6b22ab7b24b522cafb8f91c5" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>BasicProcessingHistory</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1a8b077e34de9e1e0a25c24e781c1d235d" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>BasicProcessingHistory</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1a50db83159f5d5fd204c2a8d74a43649a" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>BasicProcessingHistory</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1afbcd32c36bbabff34fb51e382da69d83" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>clean_accumulate_uuids</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a42865512c68a26b85b394825a1629729" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>clear</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a89df41edb1ff1e92abd5a4f864c36673" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>created_by</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a7d9804de5348bfa124076fa9c1027e09" prot="private" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>current_id</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a110c300dfa2a6f5236a7d254fa7bf663" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>current_nodedata</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a078af2bfa6413d5633871c3f1ded57b1" prot="private" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>current_stage</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1ae6fb28d5ceee0c60ca244e288ea5bf2f" prot="private" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>current_status</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a6e1075575bf136ef4639c6b45f9c5402" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>elog</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a52b0394b444f6db307945284ac6e5f8a" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>get_nodes</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1adf60368ca5c699cc9186fa145d04376d" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>id</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1aec695e46a390b9cf55f1919af803fb33" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>inputs</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a8e42309bb4dfb0c0ea38496a3235f069" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>is_empty</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a477b2020ad7e3c753999e3906cd8eb58" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>is_origin</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a440cedfda00fd0b7211ed4673f09426e" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>is_raw</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a35cd2643171f354ded06e1a34681961d" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>is_saved</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a8cfd15514483fc2701e53ba1be8412e9" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>is_volatile</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1ac3ffa201ded102104675f2daccd379d9" prot="protected" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>jid</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1a6d8756ffc6b2b0a3b068d2014c2f8a6c" prot="protected" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>jnm</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1a42047587403f5f37567a870f23554da6" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>jobid</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1a16963d48a18867fe480a276ac5d32844" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>jobname</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1ab5152d2f6a4706e635d6ca16e68b9bcc" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>map_as_saved</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a4f2cb1d5af0500a526fa8745aa52db36" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>merge</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a5026ea51bd2592b0d9e10661cef79743" prot="private" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>mytype</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a986da6a438099a371a0b0a9556f2c8b3" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>new_ensemble_process</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a75af2861c06a905968cc9c727b8cc877" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>new_map</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1ae0225ef6ba03dc64ebb711bb54b1554d" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>new_map</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a9a8bf8bc3632660c91fd9d82a79f8411" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>newid</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a31ee1661077d22932b4002f617b19a8f" prot="protected" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>nodes</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a82d681c60d2e64fab12b92e3244ce052" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>number_inputs</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a95006e7f8009c6d9a5c43d7e086c441b" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>number_inputs</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a04eaa592369744d85f54da21b8de9776" prot="public" virt="virtual"><scope>mspass::utility::ProcessingHistory</scope><name>number_of_stages</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1ab6203063df0564c57f28d76f8d5969ac" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1a4b552f2657fdad975723d9fc73e7875a" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::BasicProcessingHistory::"><scope>mspass::utility::ProcessingHistory</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a78c4def2e3503ba2fbdadf3c02b733a7" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>ProcessingHistory</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a225e2e1941f342f3764c2c27854ad2f6" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>ProcessingHistory</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a80dc3ba4e28743d0b13c105dc62428aa" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>ProcessingHistory</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a4a0d4eb6fdf47096bcb78caff961c0dd" prot="private" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>serialize</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a0621aa8adf8ebaab44a375a299c14fd8" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>set_as_origin</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1aec67690fe76c0d6c41dc096bc2f400ae" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>set_id</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1abe8702f0b485cea3357b92c9f0226023" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>set_jobid</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1af6c7149734faa2c0b4d51fa8e317db27" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>set_jobname</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1afe65cff0547c9b75ea3ce9a7aa6b20f7" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>stage</name></member>
      <member refid="classmspass_1_1utility_1_1_processing_history_1a1ef35389afcd6d4305442a3720398a34" prot="public" virt="non-virtual"><scope>mspass::utility::ProcessingHistory</scope><name>status</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_processing_history_1a54309603aef4519ce67980b3cf58aef2" prot="public" virt="virtual"><scope>mspass::utility::ProcessingHistory</scope><name>~BasicProcessingHistory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
