<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmspass_1_1utility_1_1_metadata_definitions" kind="class" language="C++" prot="public">
    <compoundname>mspass::utility::MetadataDefinitions</compoundname>
    <includes refid="_metadata_definitions_8h" local="no">MetadataDefinitions.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_metadata_definitions_1af2ad9c68925e22286479ceae792d7124" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, MDtype &gt;</type>
        <definition>std::map&lt;std::string,MDtype&gt; mspass::utility::MetadataDefinitions::tmap</definition>
        <argsstring></argsstring>
        <name>tmap</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::tmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="279" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_metadata_definitions_1ac136a21d8dcfb6faf7aa042fe8ae9ba1" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string,std::string&gt; mspass::utility::MetadataDefinitions::cmap</definition>
        <argsstring></argsstring>
        <name>cmap</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::cmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="280" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_metadata_definitions_1ac0e81201fb7bcd6e821f86d76ae30592" prot="private" static="no" mutable="no">
        <type>std::multimap&lt; std::string, std::string &gt;</type>
        <definition>std::multimap&lt;std::string,std::string&gt; mspass::utility::MetadataDefinitions::aliasmap</definition>
        <argsstring></argsstring>
        <name>aliasmap</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::aliasmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="281" column="17" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_metadata_definitions_1a84a13adfc792ffb99637c77923048e55" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string,std::string&gt; mspass::utility::MetadataDefinitions::alias_xref</definition>
        <argsstring></argsstring>
        <name>alias_xref</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::alias_xref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="282" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_metadata_definitions_1a36c03f5b63429605c32364cd5190de7f" prot="private" static="no" mutable="no">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt;std::string&gt; mspass::utility::MetadataDefinitions::roset</definition>
        <argsstring></argsstring>
        <name>roset</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::roset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="283" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_metadata_definitions_1a83a3f298e0f95bcf1209a867a116278d" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::tuple&lt; std::string, std::string &gt; &gt;</type>
        <definition>std::map&lt;std::string,std::tuple&lt;std::string,std::string&gt; &gt; mspass::utility::MetadataDefinitions::unique_id_data</definition>
        <argsstring></argsstring>
        <name>unique_id_data</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::unique_id_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="289" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" bodystart="289" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a5cca4385b19e235ff08215a6b731dc23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::MetadataDefinitions::MetadataDefinitions</definition>
        <argsstring>()</argsstring>
        <name>MetadataDefinitions</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::MetadataDefinitions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Loads default schema name of mspass. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="34" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="46" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1aa6f1c50f29344550f6726996a60ac3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::MetadataDefinitions::MetadataDefinitions</definition>
        <argsstring>(const std::string mdname)</argsstring>
        <name>MetadataDefinitions</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::MetadataDefinitions</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>mdname</declname>
        </param>
        <briefdescription>
<para>Construct from a namespace title. </para>
        </briefdescription>
        <detaileddescription>
<para>How this is to be implemented is to be determined, but for many uses a simple one line description of the name space for attributes would be a helpful api. At this time it is not implemented and attempts to use this will throw an exception. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="42" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="14" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a02457e4d234a24bbbbde8537963d339a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::MetadataDefinitions::MetadataDefinitions</definition>
        <argsstring>(const std::string mdname, const mspass::utility::MDDefFormat form)</argsstring>
        <name>MetadataDefinitions</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::MetadataDefinitions</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>mdname</declname>
        </param>
        <param>
          <type>const mspass::utility::MDDefFormat</type>
          <declname>form</declname>
        </param>
        <briefdescription>
<para>Construct from a file with variable formats. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor reads from a file to build the object. The API allows multiple formats through the enum class.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mdname</parametername>
</parameternamelist>
<parameterdescription>
<para>is the file to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>form</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the format (limited by MDDefFormat definitions) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="51" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a04131e10864ad00fb773a7dc83129bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::MetadataDefinitions::MetadataDefinitions</definition>
        <argsstring>(const MetadataDefinitions &amp;parent)</argsstring>
        <name>MetadataDefinitions</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::MetadataDefinitions</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="53" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="73" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1adf9c9a40eb60eebb24ec84f2fa961319" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::MetadataDefinitions::is_defined</definition>
        <argsstring>(const std::string key) const noexcept</argsstring>
        <name>is_defined</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::is_defined</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if a key is defined either as a unique key or an alias </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="55" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="79" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a5d131b51d99fb29753295847891ff2de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mspass::utility::MetadataDefinitions::concept</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>concept</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::concept</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a description of the concept this attribute defines.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name that defines the attribute of interest</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a string with a terse description of the concept this attribute defines. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="62" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="102" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a8472df22024cde279e81c84e9129e4fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>mspass::utility::MDtype</type>
        <definition>mspass::utility::MDtype mspass::utility::MetadataDefinitions::type</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>type</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::type</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the type of an attribute.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name that defines the attribute of interest</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MDtype enum that can be used to establish the proper type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="69" column="27" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="116" bodyend="130"/>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a63d73a129374c69d01c9cf23bf4157ed" compoundref="_metadata_definitions_8cc" startline="168" endline="176">is_alias</references>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a7f6f48e89b074e16112475d7d620e747" compoundref="_metadata_definitions_8cc" startline="179" endline="202">unique_name</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a147efc8e0ed9c49d83ec78e4011ce4d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt; std::string &gt; mspass::utility::MetadataDefinitions::keys</definition>
        <argsstring>() const</argsstring>
        <name>keys</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::keys</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="70" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="203" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a555a85e15897c780964a7e4f7018dca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::MetadataDefinitions::add</definition>
        <argsstring>(const std::string key, const std::string concept_, const MDtype mdt)</argsstring>
        <name>add</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::add</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>concept_</declname>
        </param>
        <param>
          <type>const MDtype</type>
          <declname>mdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Basic putter.</para>
<para>Use to add a new entry to the definitions. Note that because this is implemented with C++ map containers if data for the defined key is already present it will be silently replaced.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the key for indexing this attribute </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>concept_</parametername>
</parameternamelist>
<parameterdescription>
<para>is brief description saved as the concept for this key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the type to be defined for this key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="81" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a0debbe39d36bf46eb6ced6de89dc5bd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::MetadataDefinitions::has_alias</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>has_alias</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::has_alias</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Methods to handle aliases. </para>
        </briefdescription>
        <detaileddescription>
<para>Sometimes it is helpful to have alias keys to define a common concept. For instance, if an attribute is loaded from a ralational db one might want to use alias names of the form table.attribute as an alias to attribute. has_alias should be called first to establish if a name has an alias. To get a list of aliases call the aliases method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="90" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="137" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a63d73a129374c69d01c9cf23bf4157ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::MetadataDefinitions::is_alias</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>is_alias</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::is_alias</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Ask if a key is a registered alias. </para>
        </briefdescription>
        <detaileddescription>
<para>This asks the inverse question to has_alias. That is, it yields true of the key is registered as a valid alias. It returns false if the key is not defined at all. Note it will yield false if the key is a registered unique name and not an alias. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="98" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="168" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a8fde4797c14a07b55818a305ef544315" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>list&lt; std::string &gt; mspass::utility::MetadataDefinitions::aliases</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>aliases</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::aliases</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="99" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="146" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a7f6f48e89b074e16112475d7d620e747" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, mspass::utility::MDtype &gt;</type>
        <definition>std::pair&lt; std::string, mspass::utility::MDtype &gt; mspass::utility::MetadataDefinitions::unique_name</definition>
        <argsstring>(const std::string aliasname) const</argsstring>
        <name>unique_name</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::unique_name</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>aliasname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get definitive name for an alias.</para>
<para>This method is used to ask the opposite question as aliases. The aliases method returns all acceptable alternatives to a definitive name defined as the key to get said list. This method asks what definitive key should be used to fetch an attribute and what it&apos;s type is. It does this by returning an std::pair with first being the key and second the type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aliasname</parametername>
</parameternamelist>
<parameterdescription>
<para>is the name of the alias for which we want the definitive key</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair with the definitive key as the first of the pair and the type in the second field. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="112" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="179" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a07447e104a6d689730d53c68a4c1f07a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::MetadataDefinitions::add_alias</definition>
        <argsstring>(const std::string key, const std::string aliasname)</argsstring>
        <name>add_alias</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::add_alias</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>aliasname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an alias for key.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the main key for which an alias is to be defined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aliasname</parametername>
</parameternamelist>
<parameterdescription>
<para>is the the alternative name to define. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="118" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="162" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a2dc9424f37c2535492b34061b8c06e88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::MetadataDefinitions::writeable</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>writeable</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::writeable</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a key:value pair is mutable(writeable). Inverted logic from similar readonly method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is key used to access the parameter to be tested. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the data linked to this not not marked readonly. (if the key is undefined a false is silently returned) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="126" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="271" bodyend="306"/>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a63d73a129374c69d01c9cf23bf4157ed" compoundref="_metadata_definitions_8cc" startline="168" endline="176">is_alias</references>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a7f6f48e89b074e16112475d7d620e747" compoundref="_metadata_definitions_8cc" startline="179" endline="202">unique_name</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1ac86b8ddbe4917e7748698aad348d60ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::MetadataDefinitions::readonly</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>readonly</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::readonly</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a key:value pair is marked readonly. Inverted logic of similar writeable method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is key used to access the parameter to be tested. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true of the data linked to this keys IS marked readonly. (if the key is undefined this method silently returns true) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="134" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="308" bodyend="311"/>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a2dc9424f37c2535492b34061b8c06e88" compoundref="_metadata_definitions_8cc" startline="271" endline="306">writeable</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a434ba3fc278489639212ae2dbe46f3d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::MetadataDefinitions::set_readonly</definition>
        <argsstring>(const std::string key)</argsstring>
        <name>set_readonly</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::set_readonly</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Lock a parameter to assure it will not be saved. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameters can be defined readonly. That is a standard feature of this class, but is normally expected to be set on construction of the object. There are sometimes reason to lock out a parameter to keep it from being saved in output. This method allows this. On the other hand, use this feature only if you fully understand the downstream implications or you may experience unintended consequences.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the key for the attribute with properties to be redefined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="146" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="312" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a883e8edac3715cb830a9fe0487186cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::MetadataDefinitions::set_writeable</definition>
        <argsstring>(const std::string key)</argsstring>
        <name>set_writeable</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::set_writeable</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Force a key:value pair to be writeable. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally some parameters are marked readonly on construction to avoid corrupting the database with inconsistent data defined with a common key. (e.g. sta) This method overrides such definitions for any key so marked. It does nothing except a pointles search if the key hasn&apos;t been marked readonly previously. This method should be used with caution as it could have unintended side effects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is key for the attribute to be redefined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="158" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="320" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1ae4d61c6559d2d239631543b40de1d46d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::MetadataDefinitions::is_normalized</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>is_normalized</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::is_normalized</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Test if a key:value pair is set as normalized. </para>
        </briefdescription>
        <detaileddescription>
<para>In MongoDB a normalized attribute is one that has a master copy in one and only one place. This method returns true if an attribute is marked normalized and false otherwise (It will also return false for any key that is undefined.). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="166" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="330" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a80e9a750135d00f9ca1db95d3986f214" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::MetadataDefinitions::unique_id_key</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>unique_id_key</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::unique_id_key</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns a unique identifier for a normalized attribute. </para>
        </briefdescription>
        <detaileddescription>
<para>In MongoDB a normalized attribute is one that has a master copy in one and only one place. This method returns a unique identifier, which defines a key that can be used to access the attribute used as an index to identify a unique location for an otherwise potentially ambiguous identifier (e.g. sta can be used in may contexts). The type of attribute to which the returned key is linked is expected to normally be acquired by am immediate call to the type method of this class using the return key. It is the callers responsibility to handle errors if the request for the type information fails. Note for MongoDB the most common (and recommended) type for the unique id is an Object_ID. The design of the API, however, should not preclude some other index or an index oriented toward a relational database. (e.g. chanid is an integer key with a one-to-one relation for channel data in the CSS3.0 schema.)</para>
<para>Some unique id specifications require a table/collection qualifier. See related collection method that is designed to handle that.</para>
<para>This method should normally be used only on read operations to select the correct entry for what could otherwise be a potentially ambiguous key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the flat namespace key for which normalizing data is needed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>name for unique id for requested key. Returns an empty string if the key is not defined as normalized. In multiple calls it is more efficient to test for a null return and handle such entries inline instead of a double search required if preceded by is_normalized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="195" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="339" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1ad18055de8c51df811e25d2784eb0db01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::MetadataDefinitions::collection</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>collection</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::collection</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\Brief return the master collection (table) for a key used as a unique id.</para>
<para>Support for normalized <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> requires static tables (collection in MongoDB) that contain the data using normalization. In seismic data type examples are receiver location tables, receiver response tables, and source location data. This method should nearly always be paired with a call to unique_id_key. The idea is to first ask for the unique_id_key and then ask what collection (table) contains the key returned by unique_id_key. This provides a fast and convenient lookup for normalized data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the normally the return from unique_id_key </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string defining the collection(table) the key can be used for locating the unique tuple/document required to access related <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>. String will be empty if the search fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="211" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="353" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1acd20b79e7b66246e186deae88e391b94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>std::pair&lt; std::string, std::string &gt; mspass::utility::MetadataDefinitions::normalize_data</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>normalize_data</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::normalize_data</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Special method for efficiency. </para>
        </briefdescription>
        <detaileddescription>
<para>For mspass using mongodb normalization for all currently supported <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> can be reduced to a collection(table)-attribute name pair. The unique_id_key and collection methods can be called to obtained this information, but doing so requires a purely duplicate (internal map container) search. This convenience method is best used with MongoDB for efficiency.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the flat namespace key for which normalizing data is needed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an std::pair with of strings with first=collection and second=attribute name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="224" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="366" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a282ac6dba59505eac6f2c9a627d89654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt; string &gt; mspass::utility::MetadataDefinitions::apply_aliases</definition>
        <argsstring>(mspass::utility::Metadata &amp;d, const std::list&lt; std::string &gt; aliaslist)</argsstring>
        <name>apply_aliases</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::apply_aliases</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">mspass::utility::Metadata</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::list&lt; std::string &gt;</type>
          <declname>aliaslist</declname>
        </param>
        <briefdescription>
<para>Apply a set of aliases to data. </para>
        </briefdescription>
        <detaileddescription>
<para>This method should be called in processing workflows to apply a series of defined aliases to data. The method uses the is_alias method to verify if an alias name is valid. It will not change the key if the name is not defined as a valid alias. The keys that fail that test will be posted to the std::list that is returned. Callers should test the size of the return and if it is not empty take appropriate action.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the data to alter (usually actually a TimeSeries of Seismogram) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aliaslist</parametername>
</parameternamelist>
<parameterdescription>
<para>is a list of aliases names to apply.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::list of srings of failed changes. Callers should test the size of this return and take action if needed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="240" column="11" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="520" bodyend="544"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1a20c1da469f6e0a073b291a680425f9e8" compoundref="_metadata_8cc" startline="324" endline="334">mspass::utility::Metadata::change_key</references>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a63d73a129374c69d01c9cf23bf4157ed" compoundref="_metadata_definitions_8cc" startline="168" endline="176">is_alias</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="73" endline="85">mspass::utility::Metadata::is_defined</references>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a7f6f48e89b074e16112475d7d620e747" compoundref="_metadata_definitions_8cc" startline="179" endline="202">unique_name</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a4f0cfa4c13b688f301e261c0c404632e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::MetadataDefinitions::clear_aliases</definition>
        <argsstring>(mspass::utility::Metadata &amp;d)</argsstring>
        <name>clear_aliases</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::clear_aliases</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">mspass::utility::Metadata</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Restore any aliases to unique names. </para>
        </briefdescription>
        <detaileddescription>
<para>Aliases are needed to support legacy packages, but can cause downstream problem if left intact. This method clears any aliases and sets them to the unique_name defined by this object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is data to be altered. Normally a Seismogram of TimeSeries but can be a raw <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmspass_1_1utility_1_1_error_logger" kindref="compound">ErrorLogger</ref> containing any problems encountered. This function always returns and treats any problems as nonfatal errors and posts a log entry into this returned object. Caller should test the size of the return and handle or ignore errors as appropriate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="256" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="545" bodyend="560"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1a20c1da469f6e0a073b291a680425f9e8" compoundref="_metadata_8cc" startline="324" endline="334">mspass::utility::Metadata::change_key</references>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a63d73a129374c69d01c9cf23bf4157ed" compoundref="_metadata_definitions_8cc" startline="168" endline="176">is_alias</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a52e2040555616a39b900aa0831c3bd10" compoundref="_metadata_8cc" startline="140" endline="150">mspass::utility::Metadata::keys</references>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a7f6f48e89b074e16112475d7d620e747" compoundref="_metadata_definitions_8cc" startline="179" endline="202">unique_name</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a2d7987fbfff442e9375c7363b1d3fcc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref> &amp;</type>
        <definition>MetadataDefinitions &amp; mspass::utility::MetadataDefinitions::operator=</definition>
        <argsstring>(const MetadataDefinitions &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="258" column="23" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="214" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a71b80f9ce3024698504f06700d2d0cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref> &amp;</type>
        <definition>MetadataDefinitions &amp; mspass::utility::MetadataDefinitions::operator+=</definition>
        <argsstring>(const MetadataDefinitions &amp;other)</argsstring>
        <name>operator+=</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Accumulate additional definitions. </para>
        </briefdescription>
        <detaileddescription>
<para>Appends data in other to current. The behavior or this operator is not really a pure + operation as one would think of it as with arithmetic. Because the model is that we are defining the properties of unique keys handling the case where other has a duplicate key to the instance of the left hand side is ambiguous. We choose the more intuitive case where the right hand side overrides the left. i.e. if other has duplicate data for a key the right hand side version replaces the left. There are two exceptions. Aliases are multivalued so they accumulate. i.e. this mechanism can be used to do little more than add an alias if the others data are the same. The second case is more trivial and rarely of importance. That is, other can have empty concept data for a key and it will be silently set empty. The reason is concept is purely for human readers and is not expected to ever be used by processors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="277" column="23" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="227" bodyend="266"/>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a5d131b51d99fb29753295847891ff2de" compoundref="_metadata_definitions_8cc" startline="102" endline="114">concept</references>
        <references refid="classmspass_1_1utility_1_1_metadata_definitions_1a8472df22024cde279e81c84e9129e4fd" compoundref="_metadata_definitions_8cc" startline="116" endline="130">type</references>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a476e73fc9a422e8dc5c11ff80dd93890" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::MetadataDefinitions::pfreader</definition>
        <argsstring>(const std::string pfname)</argsstring>
        <name>pfreader</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::pfreader</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>pfname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="290" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="426" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_definitions_1a3cb4762e1daf68f598a516637bf3e870" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::MetadataDefinitions::yaml_reader</definition>
        <argsstring>(const std::string fname)</argsstring>
        <name>yaml_reader</name>
        <qualifiedname>mspass::utility::MetadataDefinitions::yaml_reader</qualifiedname>
        <param>
          <type>const std::string</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="291" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="455" bodyend="517"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Define properties of <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> known to mspass. </para>
    </briefdescription>
    <detaileddescription>
<para>The metadata system in mspass was designed to be infinitely flexible. However, to be maintainable and provide some stability we need a method to define the full properties of the keys that define attributes known to the system. This object does that through wwhat I hope is a simple interface. The expectation is the main use of this class is in python code that will read and write to mongo. Mongo is type sensitive but python tries hard to by loosy goosy about types. The main use is then expected that all gets and puts to <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> will be preceded by calls to the type method here. Based on the return the right get or put method can be called.</para>
<para>The overhead of creating this thing is not small. It will likely be recommended as an initialization step for most mspass processing scripts. Ultimately it perhaps should have a database constructor, but initially we will build it only from data file. </para>
    </detaileddescription>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="30" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" bodystart="31" bodyend="293"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a555a85e15897c780964a7e4f7018dca6" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>add</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a07447e104a6d689730d53c68a4c1f07a" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>add_alias</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a84a13adfc792ffb99637c77923048e55" prot="private" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>alias_xref</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a8fde4797c14a07b55818a305ef544315" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>aliases</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1ac0e81201fb7bcd6e821f86d76ae30592" prot="private" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>aliasmap</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a282ac6dba59505eac6f2c9a627d89654" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>apply_aliases</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a4f0cfa4c13b688f301e261c0c404632e" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>clear_aliases</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1ac136a21d8dcfb6faf7aa042fe8ae9ba1" prot="private" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>cmap</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1ad18055de8c51df811e25d2784eb0db01" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>collection</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a5d131b51d99fb29753295847891ff2de" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>concept</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a0debbe39d36bf46eb6ced6de89dc5bd1" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>has_alias</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a63d73a129374c69d01c9cf23bf4157ed" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>is_alias</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1adf9c9a40eb60eebb24ec84f2fa961319" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>is_defined</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1ae4d61c6559d2d239631543b40de1d46d" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>is_normalized</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a147efc8e0ed9c49d83ec78e4011ce4d1" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>keys</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a5cca4385b19e235ff08215a6b731dc23" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>MetadataDefinitions</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1aa6f1c50f29344550f6726996a60ac3d7" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>MetadataDefinitions</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a02457e4d234a24bbbbde8537963d339a" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>MetadataDefinitions</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a04131e10864ad00fb773a7dc83129bbe" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>MetadataDefinitions</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1acd20b79e7b66246e186deae88e391b94" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>normalize_data</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a71b80f9ce3024698504f06700d2d0cd8" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>operator+=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a2d7987fbfff442e9375c7363b1d3fcc1" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a476e73fc9a422e8dc5c11ff80dd93890" prot="private" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>pfreader</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1ac86b8ddbe4917e7748698aad348d60ec" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>readonly</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a36c03f5b63429605c32364cd5190de7f" prot="private" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>roset</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a434ba3fc278489639212ae2dbe46f3d8" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>set_readonly</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a883e8edac3715cb830a9fe0487186cb6" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>set_writeable</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1af2ad9c68925e22286479ceae792d7124" prot="private" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>tmap</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a8472df22024cde279e81c84e9129e4fd" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>type</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a83a3f298e0f95bcf1209a867a116278d" prot="private" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>unique_id_data</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a80e9a750135d00f9ca1db95d3986f214" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>unique_id_key</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a7f6f48e89b074e16112475d7d620e747" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>unique_name</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a2dc9424f37c2535492b34061b8c06e88" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>writeable</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_definitions_1a3cb4762e1daf68f598a516637bf3e870" prot="private" virt="non-virtual"><scope>mspass::utility::MetadataDefinitions</scope><name>yaml_reader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
