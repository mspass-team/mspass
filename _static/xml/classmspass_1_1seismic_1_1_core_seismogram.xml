<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmspass_1_1seismic_1_1_core_seismogram" kind="class" language="C++" prot="public">
    <compoundname>mspass::seismic::CoreSeismogram</compoundname>
    <basecompoundref refid="classmspass_1_1seismic_1_1_basic_time_series" prot="public" virt="non-virtual">mspass::seismic::BasicTimeSeries</basecompoundref>
    <basecompoundref refid="classmspass_1_1utility_1_1_metadata" prot="public" virt="non-virtual">mspass::utility::Metadata</basecompoundref>
    <derivedcompoundref refid="classmspass_1_1seismic_1_1_seismogram" prot="public" virt="virtual">mspass::seismic::Seismogram</derivedcompoundref>
    <includes refid="_core_seismogram_8h" local="no">CoreSeismogram.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" prot="public" static="no" mutable="no">
        <type><ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">mspass::utility::dmatrix</ref></type>
        <definition>mspass::utility::dmatrix mspass::seismic::CoreSeismogram::u</definition>
        <argsstring></argsstring>
        <name>u</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Holds the actual data.</para>
<para>Matrix is 3xns. Thus the rows are the component number and columns define time position. Note there is a redundancy in these definitions that must be watched if you manipulate the contents of this matrix. That is, <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> defines ns, but the u matrix has it&apos;s own internal size definitions. Currently no tests are done to validate this consistency. All constructors handle this, but again because u is public be very careful in altering u. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="53" column="26" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mspass::seismic::CoreSeismogram::components_are_orthogonal</definition>
        <argsstring></argsstring>
        <name>components_are_orthogonal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines if the contents of this object are components of an orthogonal basis.</para>
<para>Most raw 3c seismic data use orthogonal components, but this is not universal. Furthermore, some transformations (e.g. the free surface transformation operator) define transformations to basis sets that are not orthogonal. Because detecting orthogonality from a transformation is a nontrivial thing (rounding error is the complication) this is made a part of the object to simplify a number of algorithms. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="502" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool mspass::seismic::CoreSeismogram::components_are_cardinal</definition>
        <argsstring></argsstring>
        <name>components_are_cardinal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines of the contents of the object are in Earth cardinal coordinates.</para>
<para>Cardinal means the cardinal directions at a point on the earth. That is, x1 is positive east, x2 is positive north, and x3 is positive up. Like the components_are_orthogonal variable the purpose of this variable is to simplify common tests for properties of a given data series. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="511" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double mspass::seismic::CoreSeismogram::tmatrix[3][3]</definition>
        <argsstring>[3][3]</argsstring>
        <name>tmatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transformation matrix.</para>
<para>This is a 3x3 transformation that defines how the data in this object is produced from cardinal coordinates. That is, if u is the contents of this object the data in cardinal directions can be produced by tmatrix^-1 * u. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="519" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a9be7b3811cfcd0b0396b32214d7eab51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::CoreSeismogram::CoreSeismogram</definition>
        <argsstring>()</argsstring>
        <name>CoreSeismogram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor.</para>
<para>Sets ns to zero and builds an empty data matrix. The live variable in <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> is also set false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="61" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="28" bodyend="43"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a5e51c2c6d3a1aa02281ba242a1d15bf2" compoundref="_core_seismogram_8cc" startline="1024" endline="1042">set_dt</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1ae94bac250fe5928ced41babc322c2c79" compoundref="_core_seismogram_8cc" startline="1063" endline="1094">set_npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7724b7cfa40eebf0b15e0d2b39ae615e" compoundref="_core_seismogram_8cc" startline="1043" endline="1062">set_t0</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a88d2aa5099488eb2cbdbd1188c81339e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::CoreSeismogram::CoreSeismogram</definition>
        <argsstring>(const size_t nsamples)</argsstring>
        <name>CoreSeismogram</name>
        <param>
          <type>const size_t</type>
          <declname>nsamples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Simplest parameterized constructor.</para>
<para>Initializes data and sets aside memory for matrix of size 3xnsamples. The data matrix is not initialized and the object is marked as not live. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nsamples</parametername>
</parameternamelist>
<parameterdescription>
<para>number of samples expected for holding data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="70" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="44" bodyend="63"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1ae94bac250fe5928ced41babc322c2c79" compoundref="_core_seismogram_8cc" startline="1063" endline="1094">set_npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a8c7307434dac26ca63ac423b55ecb5ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::CoreSeismogram::CoreSeismogram</definition>
        <argsstring>(const std::vector&lt; mspass::seismic::CoreTimeSeries &gt; &amp;ts, const unsigned int component_to_clone=0)</argsstring>
        <name>CoreSeismogram</name>
        <param>
          <type>const std::vector&lt; <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">mspass::seismic::CoreTimeSeries</ref> &gt; &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>component_to_clone</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a three component seismogram from three <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> objects.</para>
<para>A three component seismogram is commonly assembled from individual single channel components. This constructor does the process taking reasonable care to deal with (potentially) irregular start and end times of the individual components. If the start and end times are all the same it uses a simple copy operation. Otherwise it runs a more complicated (read much slower) algorithm that handles the ragged start and stop times by adding a marked gap.</para>
<para>If start or end times are not constant the algorithm shortens the output to the latest start time and earliest end time respectively.</para>
<para>Note this constructor requires variables hang and vang, which are orientation angles defined in the CSS3.0 schema (NOT spherical coordinates by the way), by set for each component. This is used to construct the transformation matrix for the object that allows, for example, removing raw data orientation errors using rotate_to_standard. The constructor will throw an exception if any component does not have these attributes set in their Metadata area.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>SeisppError</parametername>
</parameternamelist>
<parameterdescription>
<para>exception can be throw for a variety of serious problems. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of 3 <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> objects to be used to assemble this <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref>. Input vector order could be arbitrary because a transformation matrix is computed, but for efficiency standard order (E,N,Z) is advised. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>component_to_clone</parametername>
</parameternamelist>
<parameterdescription>
<para>the auxiliary parameters (Metadata and <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> common parameters) from one of the components is cloned to assure common required parameters are copied to this object. This argument controls which of the three components passed through ts is used. Default is 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a67232df3f9d1e1b5ac245f97478adee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::CoreSeismogram::CoreSeismogram</definition>
        <argsstring>(const mspass::utility::Metadata &amp;md, const bool load_data=true)</argsstring>
        <name>CoreSeismogram</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">mspass::utility::Metadata</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>load_data</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct from Metadata definition that includes data path. </para>
        </briefdescription>
        <detaileddescription>
<para>A Metadata object is sufficiently general that it can contain enough information to contruct an object from attributes contained in it. This constuctor uses that approach, with the actual loading of data being an option (on by default). In mspass this is constructor is used to load data with Metadata constructed from MongoDB and then using the path created from two parameters (dir and dfile used as in css3.0 wfdisc) to read data. The API is general but the implementation in mspass is very rigid. It blindly assumes the data being read are binary doubles in the right byte order and ordered in the native order for dmatrix (Fortran order). i.e. the constuctor does a raw fread of ns*3 doubles into the internal array used in the dmatrix implementation.</para>
<para>A second element of the Metadata that is special for MsPASS is the handling of the transformation matrix by this constructor. In MsPASS the transformation matrix is stored as a python object in MongoDB. This constructor aims to fetch that entity with the key &apos;tmatrix&apos;. To be more robust and simpler to use with data not loaded from mongodb we default tmatrix to assume the data are in standard coordinates. That is, if the key tmatrix is not defined in Metadata passed as arg0, the constructor assumes it should set the transformation matrix to an identity. Use set_transformation_matrix if that assumption is wrong for your data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>is the Metadata used for the construction.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>load_data</parametername>
</parameternamelist>
<parameterdescription>
<para>if true (default) a file name is constructed from dir+&quot;/&quot;+dfile, the file is openned, fseek is called to foff, data are read with fread, and the file is closed. If false a dmatrix for u is still created of size 3xns, but the matrix is only initialized to all zeros.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Will</parametername>
</parameternamelist>
<parameterdescription>
<para>throw a MsPASSError if required metadata are missing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="143" column="9" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="100" bodyend="222"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1ab87672dc6adffed90b0dc9c144219d44" compoundref="_basic_time_series_8h" startline="115" endline="119">mspass::seismic::BasicTimeSeries::force_t0_shift</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a991516933477580b6b59dd578819df06" compoundref="_metadata_8h" startline="283" endline="291">mspass::utility::Metadata::get_any</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1ad69a5786d997104df560775f4f688b02" compoundref="_metadata_8h" startline="135" endline="152">mspass::utility::Metadata::get_double</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a7ace0c05ebb00b3c383cb8cccd225504" compoundref="_metadata_8h" startline="184" endline="202">mspass::utility::Metadata::get_long</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1aa56da98a52f03babd67bf9fb55c40f3a" compoundref="_metadata_8h" startline="213" endline="219">mspass::utility::Metadata::get_string</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="73" endline="85">mspass::utility::Metadata::is_defined</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="260">mspass::seismic::BasicTimeSeries::mdt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="256">mspass::seismic::BasicTimeSeries::mlive</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="264">mspass::seismic::BasicTimeSeries::mt0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="268">mspass::seismic::BasicTimeSeries::nsamp</references>
        <references refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2a2ca9469819fb0fb61ff98e914a7ccca0">mspass::seismic::Relative</references>
        <references refid="namespacemspass_1_1seismic_1a1254f7fb8e1be5b198218604ac9b3c8a">mspass::seismic::SEISMICMD_dfile</references>
        <references refid="namespacemspass_1_1seismic_1ab8ff84666cf6d1c391987306eaad2546">mspass::seismic::SEISMICMD_dir</references>
        <references refid="namespacemspass_1_1seismic_1a3f7a9857fd532d0e6800f2a316b50772">mspass::seismic::SEISMICMD_dt</references>
        <references refid="namespacemspass_1_1seismic_1a17279751e3795fee46d6a3cdfe427c33">mspass::seismic::SEISMICMD_foff</references>
        <references refid="namespacemspass_1_1seismic_1ac848a79911ca1930abf265f01a6d635f">mspass::seismic::SEISMICMD_npts</references>
        <references refid="namespacemspass_1_1seismic_1a1e5b45ce0ed02e9c1d154ea0434138c0">mspass::seismic::SEISMICMD_t0</references>
        <references refid="namespacemspass_1_1seismic_1a0951fef82377e868ee7cfcd4841979cf">mspass::seismic::SEISMICMD_t0_shift</references>
        <references refid="namespacemspass_1_1seismic_1a88a01d6c4e1838b7bac28931b9cc8c58">mspass::seismic::SEISMICMD_time_standard</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1ae94bac250fe5928ced41babc322c2c79" compoundref="_core_seismogram_8cc" startline="1063" endline="1094">set_npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a94e13495475bfb8c1e62f40006f13bdc" compoundref="_core_seismogram_8cc" startline="783" endline="805">set_transformation_matrix</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1ac3f8c8200710fe0d3ef211c7c758e864" compoundref="_basic_time_series_8h" startline="243" endline="246">mspass::seismic::BasicTimeSeries::set_tref</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
        <references refid="namespacemspass_1_1seismic_1a0b8373068c66c7453bd012fe5367dbd2a9234324ddf6b4176b57d803a925b7961">mspass::seismic::UTC</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a9c993726c259d7a6f1c213d0d04db5ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::CoreSeismogram::CoreSeismogram</definition>
        <argsstring>(const CoreSeismogram &amp;)</argsstring>
        <name>CoreSeismogram</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
          <defname>t3c</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="148" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="65" bodyend="75"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a5e51c2c6d3a1aa02281ba242a1d15bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::set_dt</definition>
        <argsstring>(const double sample_interval)</argsstring>
        <name>set_dt</name>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_time_series_1a1813dfea28479ff50528e8ed008e62e8">set_dt</reimplements>
        <param>
          <type>const double</type>
          <declname>sample_interval</declname>
        </param>
        <briefdescription>
<para>Set the sample interval. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is complicated by the need to sync the changed value with Metadata. That is further complicated by the need to support aliases for the keys used to defined dt in Metadata. That is handled by first setting the internal dt value and then going through a fixed list of valid alias keys for dt. Any that exist are changed. If none were previously defined the unique name (see documentation) is added to Metadata.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new data sample interval to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="162" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="1024" bodyend="1042"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="73" endline="85">mspass::utility::Metadata::is_defined</references>
        <references refid="namespacemspass_1_1seismic_1a3f7a9857fd532d0e6800f2a316b50772">mspass::seismic::SEISMICMD_dt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a1813dfea28479ff50528e8ed008e62e8" compoundref="_basic_time_series_8h" startline="198" endline="201">mspass::seismic::BasicTimeSeries::set_dt</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1ae94bac250fe5928ced41babc322c2c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::set_npts</definition>
        <argsstring>(const size_t npts)</argsstring>
        <name>set_npts</name>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_time_series_1a4101771f4d687d43f4ae79bfebef3f7c">set_npts</reimplements>
        <param>
          <type>const size_t</type>
          <declname>npts</declname>
        </param>
        <briefdescription>
<para>Set the number of samples attribute for data. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is complicated by the need to sync the changed value with Metadata. That is further complicated by the need to support aliases for the keys used to defined npts in Metadata. That is handled by first setting the internal npts value (actually ns) and then going through a fixed list of valid alias keys for npts. Any that exist are changed. If none were previously defined the unique name (see documentation) is added to Metadata.</para>
<para>This attribute has an additional complication compared to other setter that are overrides from <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref>. That is, the number of points define the data buffer size to hold the sample data. To guarantee the buffer size and the internal remain consistent this method clears any existing content of the dmatrix u and initializes the 3xnpts matrix to 0s. Note this means if one is using this to assemble a data object in pieces you MUST call this method before loading any data or it will be cleared and you will mysteriously find the data are all zeros.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>npts</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new number of points to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="184" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="1063" bodyend="1094"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="73" endline="85">mspass::utility::Metadata::is_defined</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="183" endline="183">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="namespacemspass_1_1seismic_1ac848a79911ca1930abf265f01a6d635f">mspass::seismic::SEISMICMD_npts</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a4101771f4d687d43f4ae79bfebef3f7c" compoundref="_basic_time_series_8h" startline="213" endline="216">mspass::seismic::BasicTimeSeries::set_npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
        <references refid="classmspass_1_1utility_1_1dmatrix_1ab9e34acc9b193854c5148e8c3d9650c2" compoundref="dmatrix_8cc" startline="215" endline="218">mspass::utility::dmatrix::zero</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a629ae308ad656912abd32d086730f35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::sync_npts</definition>
        <argsstring>()</argsstring>
        <name>sync_npts</name>
        <briefdescription>
<para>Sync the number of samples attribute with actual data size. </para>
        </briefdescription>
        <detaileddescription>
<para>This method syncs the npts attribute with the actual size of the dmatrix u. It also syncs aliases in the same way as the set_npts method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="191" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="1095" bodyend="1117"/>
        <references refid="classmspass_1_1utility_1_1dmatrix_1ac32006f0dff7ca1b59fa8f3889deb9e5" compoundref="dmatrix_8cc" startline="232" endline="235">mspass::utility::dmatrix::columns</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="73" endline="85">mspass::utility::Metadata::is_defined</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="268">mspass::seismic::BasicTimeSeries::nsamp</references>
        <references refid="namespacemspass_1_1seismic_1ac848a79911ca1930abf265f01a6d635f">mspass::seismic::SEISMICMD_npts</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a4101771f4d687d43f4ae79bfebef3f7c" compoundref="_basic_time_series_8h" startline="213" endline="216">mspass::seismic::BasicTimeSeries::set_npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a7724b7cfa40eebf0b15e0d2b39ae615e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::set_t0</definition>
        <argsstring>(const double t0in)</argsstring>
        <name>set_t0</name>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_time_series_1abe29da17a295b2b439951d3ab6378caf">set_t0</reimplements>
        <param>
          <type>const double</type>
          <declname>t0in</declname>
        </param>
        <briefdescription>
<para>Set the data start time. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is complicated by the need to sync the changed value with Metadata. That is further complicated by the need to support aliases for the keys used to defined npts in Metadata. That is handled by first setting the internal t0 value and then going through a fixed list of valid alias keys for it. Any that exist are changed. If none were previously defined the unique name (see documentation) is added to Metadata.</para>
<para>This is a dangerous method to use on real data as it can mess up the time if not handled correctly. It should be used only when that sharp knife is needed such as in assembling data outside of constructors in a test program.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t0in</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new data sample interval to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="208" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="1043" bodyend="1062"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="73" endline="85">mspass::utility::Metadata::is_defined</references>
        <references refid="namespacemspass_1_1seismic_1a1e5b45ce0ed02e9c1d154ea0434138c0">mspass::seismic::SEISMICMD_t0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abe29da17a295b2b439951d3ab6378caf" compoundref="_basic_time_series_8h" startline="228" endline="231">mspass::seismic::BasicTimeSeries::set_t0</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1aaa906f3915cfd8ba04adefedc35032e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
        <definition>CoreSeismogram &amp; mspass::seismic::CoreSeismogram::operator=</definition>
        <argsstring>(const CoreSeismogram &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
          <defname>seisin</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="212" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="892" bodyend="910"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" compoundref="_metadata_8cc" startline="108" endline="116">mspass::utility::Metadata::operator=</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aaf05bc1fe471e194bec093906c1a607c" compoundref="_basic_time_series_8cc" startline="62" endline="75">mspass::seismic::BasicTimeSeries::operator=</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a4824e03f8697c3f36fa7957bb82e122c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
        <definition>CoreSeismogram &amp; mspass::seismic::CoreSeismogram::operator+=</definition>
        <argsstring>(const CoreSeismogram &amp;d)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Summation operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Summing data from signals of irregular length requires handling potential mismatches in size and overlap. This behaves the way a += operator should logically behave in that situation. That is, because the lhs is where the sum is being accumulated, the size is always controlled by the left hand side of the operator. Any portions of the right hand side that are outside the t0 to <ref refid="classmspass_1_1seismic_1_1_core_seismogram_1ae043fa67b9d889965ae473da583a1eb4" kindref="member">endtime()</ref> of the left hand side are silently discarded. If the start time of the right hand side is greater than t0 or the endtime is less than endtime of the lhs there will be discontinuties in the sum there the ends of the rhs are inside the range of the lhs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is other signal to add to this. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>can be thrown if lhs and rhs do not have matching time standards. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="229" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="922" bodyend="963"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" compoundref="_basic_time_series_8h" startline="149" endline="149">mspass::seismic::BasicTimeSeries::dead</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1ae043fa67b9d889965ae473da583a1eb4" compoundref="_core_seismogram_8h" startline="486" endline="489">endtime</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="264">mspass::seismic::BasicTimeSeries::mt0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="183" endline="183">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" compoundref="_basic_time_series_8h" startline="74" endline="77">mspass::seismic::BasicTimeSeries::sample_number</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a472074f3074d59f794d18017b010ab81" compoundref="_basic_time_series_8h" startline="186" endline="186">mspass::seismic::BasicTimeSeries::t0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" compoundref="_basic_time_series_8h" startline="278">mspass::seismic::BasicTimeSeries::tref</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a0254f287fe5fb2217fcda0131b65410f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref></type>
        <definition>const CoreSeismogram mspass::seismic::CoreSeismogram::operator+</definition>
        <argsstring>(const CoreSeismogram &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Addition operator.</para>
<para>This operator is implemented in a standard way utilizing operator+=. For data with irregular start and end times that has an important consequence; the operator is not communative. i.e given x an y z=x+y will not yield the same result as z=y+x. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="237" column="22" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="1012" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1acb19d36d0e3ed2e52eb77da34c65f4f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
        <definition>CoreSeismogram &amp; mspass::seismic::CoreSeismogram::operator*=</definition>
        <argsstring>(const double)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const double</type>
          <defname>scale</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply data by a scalar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="239" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="911" bodyend="921"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" compoundref="_basic_time_series_8h" startline="149" endline="149">mspass::seismic::BasicTimeSeries::dead</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="183" endline="183">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1af749235404f3cf11808598ef133bf781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
        <definition>CoreSeismogram &amp; mspass::seismic::CoreSeismogram::operator-=</definition>
        <argsstring>(const CoreSeismogram &amp;d)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Subtraction operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Differencing data from signals of irregular length requires handling potential mismatches in size and overlap. This behaves the way a -= operator should logically behave in that situation. That is, because the lhs is where the sum is being accumulated, the size is always controlled by the left hand side of the operator. Any portions of the right hand side that are outside the t0 to <ref refid="classmspass_1_1seismic_1_1_core_seismogram_1ae043fa67b9d889965ae473da583a1eb4" kindref="member">endtime()</ref> of the left hand side are silently discarded. If the start time of the right hand side is greater than t0 or the endtime is less than endtime of the lhs there will be discontinuties in the sum there the ends of the rhs are inside the range of the lhs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is other signal to subract from this. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>can be thrown if lhs and rhs do not have matching time standards. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="256" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="968" bodyend="1011"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1ae043fa67b9d889965ae473da583a1eb4" compoundref="_core_seismogram_8h" startline="486" endline="489">endtime</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="256">mspass::seismic::BasicTimeSeries::mlive</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="264">mspass::seismic::BasicTimeSeries::mt0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="183" endline="183">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" compoundref="_basic_time_series_8h" startline="74" endline="77">mspass::seismic::BasicTimeSeries::sample_number</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a472074f3074d59f794d18017b010ab81" compoundref="_basic_time_series_8h" startline="186" endline="186">mspass::seismic::BasicTimeSeries::t0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" compoundref="_basic_time_series_8h" startline="278">mspass::seismic::BasicTimeSeries::tref</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1ac44e27ef57299045b2e0c7a252e32a89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref></type>
        <definition>const CoreSeismogram mspass::seismic::CoreSeismogram::operator-</definition>
        <argsstring>(const CoreSeismogram &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">CoreSeismogram</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtraction operator.</para>
<para>This operator is implemented in a standard way utilizing operator-=. For data with irregular start and end times that has an important consequence; the operator is not communative. i.e given x an y z=x-y will not yield the same result as z=-(y-x). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="264" column="22" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="1018" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a1b8fc85ca5a5e14d2e2cdd51a9697fcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>vector&lt; double &gt; mspass::seismic::CoreSeismogram::operator[]</definition>
        <argsstring>(const int sample) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a sample from data vector.</para>
<para>A sample in this context means a three-vector at a requested sample index. Range checking is implicit because of the internal use of the dmatrix to store the samples of data. This operator is an alternative to extracting samples through indexing of the internal dmatrix u that holds the data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample</parametername>
</parameternamelist>
<parameterdescription>
<para>is the sample number requested (must be in range or an exception will be thrown)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>if the requested sample is outside the range of the data. Note this includes an implicit &quot;outside&quot; defined when the contents are marked dead. Note the code does this by catching an error thrown by dmatrix in this situation, printing the error message from the dmatrix object, and then throwing a new SeisppError with a shorter message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector containing a 3 vector of the samples at requested sample number</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample</parametername>
</parameternamelist>
<parameterdescription>
<para>is the integer sample number of data desired. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="287" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="1119" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1abdf52d3336018194da73d6832150169d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>vector&lt; double &gt; mspass::seismic::CoreSeismogram::operator[]</definition>
        <argsstring>(const double time) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Overloaded version of operator[] for time. </para>
        </briefdescription>
        <detaileddescription>
<para>Sometimes it is useful to ask for data at a specified time without worrying about the time conversion. This simplifies that process. It is still subject to an exception if the the time requested is outside the data range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>is the time of the requested sample </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>3 vector of data samples at requested time </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>will be thrown if the time is outside the data range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="299" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="1129" bodyend="1140"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" compoundref="_basic_time_series_8h" startline="74" endline="77">mspass::seismic::BasicTimeSeries::sample_number</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a22f733f1d159422844f3091450813445" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual mspass::seismic::CoreSeismogram::~CoreSeismogram</definition>
        <argsstring>()</argsstring>
        <name>~CoreSeismogram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="301" column="9" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a756ee542caaa6001f9f40fed3607ff7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::rotate_to_standard</definition>
        <argsstring>()</argsstring>
        <name>rotate_to_standard</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply inverse transformation matrix to return data to cardinal direction components.</para>
<para>It is frequently necessary to make certain a set of three component data are oriented to the standard reference frame (EW, NS, Vertical). This function does this. For efficiency it checks the components_are_cardinal variable and does nothing if it is set true. Otherwise, it applies the inverse transformation and then sets this variable true. Note even if the current transformation matrix is not orthogonal it will be put back into cardinal coordinates. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>SeisppError</parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if the an inversion of the transformation matrix is required and that matrix is singular. This can happen if the transformation matrix is incorrectly defined or the actual data are coplanar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="315" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="400" bodyend="505"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="268">mspass::seismic::BasicTimeSeries::nsamp</references>
        <references refid="classmspass_1_1utility_1_1dmatrix_1aa78dbbdf719f69c8422734612e9a56af" compoundref="dmatrix_8cc" startline="219" endline="225">mspass::utility::dmatrix::size</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1ab52a292c7c7bc8fc5fef68db9eb847e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::rotate</definition>
        <argsstring>(mspass::utility::SphericalCoordinate &amp;sc)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="structmspass_1_1utility_1_1_spherical_coordinate" kindref="compound">mspass::utility::SphericalCoordinate</ref> &amp;</type>
          <declname>sc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotate data using a P wave type coordinate definition.</para>
<para>In seismology the longitudinal motion direction of a P wave defines a direction in space. This method rotates the data into a coordinate system defined by a direction passed through the argument. The data are rotated such that x1 becomes the transverse component, x2 becomes radial, and x3 becomes longitudinal. In the special case for a vector pointing in the x3 direction the data are not altered. The transformation matrix is effectively the matrix product of two coordinate rotations: (1) rotation around x3 by angle phi and (2) rotation around x1 by theta.</para>
<para>The sense of this transformation is confusing because of a difference in convention between spherical coordinates and standard earth coordinates. In particular, orientation on the earth uses a convention with x2 being the x2 axis and bearings are relative to that with a standard azimuth measured clockwise from north. Spherical coordinate angle phi (used here) is measured counterclockwise relative to the x1 axis, which is east in standard earth coordinates. This transformation is computed using a phi angle. To use this then to compute a transformation to standard ray coordinates with x2 pointing in the direction of wavefront advance, phi should be set to pi/2-azimuth which gives the phi angle needed to rotate x2 to radial. This is extremely confusing because in spherical coordinates it would be more intuitive to rotate x1 to radial, but this is NOT the convention used here. In general to use this feature the best way to avoid this confusion is to use the PMHalfSpaceModel procedure to compute a SphericalCoordinate object consistent with given propagation direction defined by a slowness vector. Alternatively, use the free_surface_transformation method defined below.</para>
<para>A VERY IMPORTANT thing to recognize about this tranformation is it will always yield a result relative to cardinal coordinates. i.e. if the data had been previously rotated or were not originally in ENZ form they will be first transformed to ENZ before actually performing this transformation. Use the transform or horizontal rotation method to create cummulative transformations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sc</parametername>
</parameternamelist>
<parameterdescription>
<para>defines final x3 direction (longitudinal) in a spherical coordinate structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="356" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="544" bodyend="614"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" compoundref="_basic_time_series_8h" startline="149" endline="149">mspass::seismic::BasicTimeSeries::dead</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="268">mspass::seismic::BasicTimeSeries::nsamp</references>
        <references refid="structmspass_1_1utility_1_1_spherical_coordinate_1a2c970fd569ae883e5545f81e58458ef9" compoundref="_spherical_coordinate_8h" startline="26">mspass::utility::SphericalCoordinate::phi</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a756ee542caaa6001f9f40fed3607ff7e" compoundref="_core_seismogram_8cc" startline="400" endline="505">rotate_to_standard</references>
        <references refid="classmspass_1_1utility_1_1dmatrix_1aa78dbbdf719f69c8422734612e9a56af" compoundref="dmatrix_8cc" startline="219" endline="225">mspass::utility::dmatrix::size</references>
        <references refid="structmspass_1_1utility_1_1_spherical_coordinate_1ae06e9f7deab80ef715e5a3629fbab2f7" compoundref="_spherical_coordinate_8h" startline="22">mspass::utility::SphericalCoordinate::theta</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a8bfacfda2b33e2df7938695126fbb0db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::rotate</definition>
        <argsstring>(const double nu[3])</argsstring>
        <name>rotate</name>
        <param>
          <type>const double</type>
          <declname>nu</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotate data using a P wave type coordinate definition.</para>
<para>In seismology the longitudinal motion direction of a P wave defines a direction in space. This method rotates the data into a coordinate system defined by a direction passed through the argument. The data are rotated such that x1 becomes the transverse component, x2 becomes radial, and x3 becomes longitudinal. In the special case for a vector pointing in the x3 direction the data are not altered.</para>
<para>This method effectively turns nu into a SphericalCoordinate object and calles the related rotate method that has a SphericalCoordinate object as an argument. The potential confusion of orientation is not as extreme here. After the transformation x3prime will point in the direction of nu, x2 will be in the x3-x3prime plane (rotation by theta) and orthogonal to x3prime, and x1 will be horizontal and perpendicular to x2prime and x3prime.</para>
<para>A VERY IMPORTANT thing to recognize about this tranformation is it will always yield a result relative to cardinal coordinates. i.e. if the data had been previously rotated or were not originally in ENZ form they will be first transformed to ENZ before actually performing this transformation. Use the transform or horizontal rotation method to</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nu</parametername>
</parameternamelist>
<parameterdescription>
<para>defines direction of x3 direction (longitudinal) as a unit vector with three components. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="382" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="615" bodyend="620"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1ab52a292c7c7bc8fc5fef68db9eb847e0" compoundref="_core_seismogram_8cc" startline="544" endline="614">rotate</references>
        <references refid="classmspass_1_1utility_1_1dmatrix_1aa78dbbdf719f69c8422734612e9a56af" compoundref="dmatrix_8cc" startline="219" endline="225">mspass::utility::dmatrix::size</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a895a06c26825e8abe8c8617622cf8d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::rotate</definition>
        <argsstring>(const double phi)</argsstring>
        <name>rotate</name>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
<para>Rotate horizontals by a simple angle in degrees. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>A common transformation in 3C processing is a rotation of the
horizontal components by an angle.  This leaves the vertical
(assumed here x3) unaltered.   This routine rotates the horizontals
by angle phi using with positive phi counterclockwise as in
polar coordinates and the azimuth angle of spherical coordinates.

Note this transformation is cummulative.  i.e. this transformation
is cumulative.  The internal transformation matrix will be updated.
This is a useful feature for things like incremental horizontal
rotation in rotational angle grid searches.

\param phi rotation angle around x3 axis in counterclockwise
  direction (in radians).
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="399" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="625" bodyend="668"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" compoundref="_basic_time_series_8h" startline="149" endline="149">mspass::seismic::BasicTimeSeries::dead</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="268">mspass::seismic::BasicTimeSeries::nsamp</references>
        <references refid="classmspass_1_1utility_1_1dmatrix_1aa78dbbdf719f69c8422734612e9a56af" compoundref="dmatrix_8cc" startline="219" endline="225">mspass::utility::dmatrix::size</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1ae9ea31f9e36577a51660c61e0749d4a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::transform</definition>
        <argsstring>(const double a[3][3])</argsstring>
        <name>transform</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies an arbitrary transformation matrix to the data. i.e. after calling this method the data will have been multiplied by the matrix a and the transformation matrix will be updated. The later allows cascaded transformations to data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>is a C style 3x3 matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="408" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="669" bodyend="704"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" compoundref="_basic_time_series_8h" startline="149" endline="149">mspass::seismic::BasicTimeSeries::dead</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="268">mspass::seismic::BasicTimeSeries::nsamp</references>
        <references refid="classmspass_1_1utility_1_1dmatrix_1aa78dbbdf719f69c8422734612e9a56af" compoundref="dmatrix_8cc" startline="219" endline="225">mspass::utility::dmatrix::size</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1adccfb78a6ebcdf62039e5cb351566438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::CoreSeismogram::free_surface_transformation</definition>
        <argsstring>(const mspass::seismic::SlownessVector u, const double vp0, const double vs0)</argsstring>
        <name>free_surface_transformation</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_slowness_vector" kindref="compound">mspass::seismic::SlownessVector</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vp0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vs0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes and applies the Kennett [1991] free surface transformation matrix.</para>
<para>Kennett [1991] gives the form for a free surface transformation operator that reduces to a nonorthogonal transformation matrix when the wavefield is not evanescent. On output x1 will be transverse, x2 will be SV (radial), and x3 will be longitudinal.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>slowness vector off the incident wavefield </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vp0</parametername>
</parameternamelist>
<parameterdescription>
<para>Surface P wave velocity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vs0</parametername>
</parameternamelist>
<parameterdescription>
<para>Surface S wave velocity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="421" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="719" bodyend="782"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" compoundref="_basic_time_series_8h" startline="149" endline="149">mspass::seismic::BasicTimeSeries::dead</references>
        <references refid="classmspass_1_1seismic_1_1_slowness_vector_1a2e1d2b9fb9e0267ffa99ccf3291f5540" compoundref="_slowness_vector_8cc" startline="63" endline="66">mspass::seismic::SlownessVector::mag</references>
        <references refid="structmspass_1_1utility_1_1_spherical_coordinate_1a2c970fd569ae883e5545f81e58458ef9" compoundref="_spherical_coordinate_8h" startline="26">mspass::utility::SphericalCoordinate::phi</references>
        <references refid="structmspass_1_1utility_1_1_spherical_coordinate_1a8f9f987e89e175fecb85c9cbe5bdbc13" compoundref="_spherical_coordinate_8h" startline="18">mspass::utility::SphericalCoordinate::radius</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1ab52a292c7c7bc8fc5fef68db9eb847e0" compoundref="_core_seismogram_8cc" startline="544" endline="614">rotate</references>
        <references refid="classmspass_1_1utility_1_1dmatrix_1aa78dbbdf719f69c8422734612e9a56af" compoundref="dmatrix_8cc" startline="219" endline="225">mspass::utility::dmatrix::size</references>
        <references refid="structmspass_1_1utility_1_1_spherical_coordinate_1ae06e9f7deab80ef715e5a3629fbab2f7" compoundref="_spherical_coordinate_8h" startline="22">mspass::utility::SphericalCoordinate::theta</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1ae9ea31f9e36577a51660c61e0749d4a6" compoundref="_core_seismogram_8cc" startline="669" endline="704">transform</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
        <references refid="classmspass_1_1seismic_1_1_slowness_vector_1aed8526fcbb32eb86bfb4f193d2ff03f9" compoundref="_slowness_vector_8h" startline="23">mspass::seismic::SlownessVector::ux</references>
        <references refid="classmspass_1_1seismic_1_1_slowness_vector_1a2a7134614117cc5a648a1d292021fab0" compoundref="_slowness_vector_8h" startline="27">mspass::seismic::SlownessVector::uy</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1aae2950b408052bda849ba07c4ea9b018" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">mspass::utility::dmatrix</ref></type>
        <definition>mspass::utility::dmatrix mspass::seismic::CoreSeismogram::get_transformation_matrix</definition>
        <argsstring>() const</argsstring>
        <name>get_transformation_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return current transformation matrix.</para>
<para>The transformation matrix is maintained internally in this object. Transformations like rotations and the transform method can change make this matrix not an identity matrix. It should always be an identity matrix when the coordinates are cardinal (i.e. ENZ).</para>
<para><simplesect kind="return"><para>3x3 transformation matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="431" column="28" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="431" bodyend="437"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a94e13495475bfb8c1e62f40006f13bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::CoreSeismogram::set_transformation_matrix</definition>
        <argsstring>(const mspass::utility::dmatrix &amp;A)</argsstring>
        <name>set_transformation_matrix</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">mspass::utility::dmatrix</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Define the transformaton matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Occasionally we need to set the transformation matrix manually. The type example is input with a format where the component directions are embedded. We use a dmatrix as it is more easily wrapped for python than the raw C 2D array which really doesn&apos;t translate well between the languages.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>is the 3X3 matrix copied to the internal transformation matrix array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the given transformation matrix is an identity meaning components_are_cardinal gets set true. false if the test for an identity matrix fails. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Will</parametername>
</parameternamelist>
<parameterdescription>
<para>throw a MsPASSError if the input matrix is not 3x3. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="455" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="783" bodyend="805"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a1dd1a9469bca89f7e07c6aa928dc4a09" compoundref="_core_seismogram_8h" startline="479" endline="479">cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="namespacemspass_1_1seismic_1ab9de221412c0076cce8197b4f2e9df7a">mspass::seismic::SEISMICMD_tmatrix</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1ad60b2dca7acfd76ff1f8d677ef609f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::CoreSeismogram::set_transformation_matrix</definition>
        <argsstring>(const double a[3][3])</argsstring>
        <name>set_transformation_matrix</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
<para>Define the transformaton matrix with a C style 3x3 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>is a C style 3x3 matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the given transformation matrix is an identity meaning components_are_cardinal gets set true. false if the test for an identity matrix fails. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Will</parametername>
</parameternamelist>
<parameterdescription>
<para>throw a MsPASSError if the input matrix is not 3x3. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="466" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="806" bodyend="828"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a1dd1a9469bca89f7e07c6aa928dc4a09" compoundref="_core_seismogram_8h" startline="479" endline="479">cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
        <references refid="namespacemspass_1_1seismic_1ab9de221412c0076cce8197b4f2e9df7a">mspass::seismic::SEISMICMD_tmatrix</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" compoundref="_core_seismogram_8h" startline="519">tmatrix</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a686a13c4938df315e175cd249a52b74e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::CoreSeismogram::set_transformation_matrix</definition>
        <argsstring>(pybind11::object a)</argsstring>
        <name>set_transformation_matrix</name>
        <param>
          <type>pybind11::object</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Define the transformaton matrix with a python object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>is a python object of 9 elements with types of dmatrix, numpy array, or list.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the given transformation matrix is an identity meaning components_are_cardinal gets set true. false if the test for an identity matrix fails. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Will</parametername>
</parameternamelist>
<parameterdescription>
<para>throw a MsPASSError if the input type or dimension is not recognized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="476" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a1dd1a9469bca89f7e07c6aa928dc4a09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::CoreSeismogram::cardinal</definition>
        <argsstring>() const</argsstring>
        <name>cardinal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true of components are cardinal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="479" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="479" bodyend="479"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" compoundref="_core_seismogram_8h" startline="511">components_are_cardinal</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a41711bd9b0c88089e6e217f318c01de2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::CoreSeismogram::orthogonal</definition>
        <argsstring>() const</argsstring>
        <name>orthogonal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the components are orthogonal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="481" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="481" bodyend="481"/>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" compoundref="_core_seismogram_8h" startline="489">components_are_orthogonal</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1ae043fa67b9d889965ae473da583a1eb4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::seismic::CoreSeismogram::endtime</definition>
        <argsstring>() const noexcept</argsstring>
        <name>endtime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the end time (time associated with last data sample) of this data object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="486" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="486" bodyend="489"/>
        <references refid="classmspass_1_1utility_1_1dmatrix_1ac32006f0dff7ca1b59fa8f3889deb9e5" compoundref="dmatrix_8cc" startline="232" endline="235">mspass::utility::dmatrix::columns</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" compoundref="_basic_time_series_8h" startline="260">mspass::seismic::BasicTimeSeries::mdt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="264">mspass::seismic::BasicTimeSeries::mt0</references>
        <references refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" compoundref="_core_seismogram_8h" startline="53">u</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_seismogram_1a6b524450abe7e5089051a045bb81af5f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::CoreSeismogram::tmatrix_is_cardinal</definition>
        <argsstring>()</argsstring>
        <name>tmatrix_is_cardinal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="523" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreSeismogram.cc" bodystart="76" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Vector (three-component) seismogram data object. </para>
    </briefdescription>
    <detaileddescription>
<para>A three-component seismogram is a common concept in seismology. The concept used here is that a three-component seismogram is a time series with a 3-vector as the data at each time step. As a result the data are stored internally as a matrix with row defining the component number (C indexing 0,1,2) and the column defining the time variable. The object inherits common concepts of a time series through the <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> object. Auxiliary parameters are defined for the object through inheritance of a Metadata object. <simplesect kind="author"><para>Gary L. Pavlis </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>mspass::seismic::BasicTimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_basic_time_series"/>
      </node>
      <node id="1">
        <label>mspass::seismic::CoreSeismogram</label>
        <link refid="classmspass_1_1seismic_1_1_core_seismogram"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>mspass::seismic::SeismogramWGaps</label>
        <link refid="classmspass_1_1seismic_1_1_seismogram_w_gaps"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
      <node id="5">
        <label>mspass::seismic::Seismogram</label>
        <link refid="classmspass_1_1seismic_1_1_seismogram"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>mspass::utility::dmatrix</label>
        <link refid="classmspass_1_1utility_1_1dmatrix"/>
      </node>
      <node id="2">
        <label>mspass::seismic::BasicTimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_basic_time_series"/>
      </node>
      <node id="1">
        <label>mspass::seismic::CoreSeismogram</label>
        <link refid="classmspass_1_1seismic_1_1_core_seismogram"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>u</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" line="40" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreSeismogram.h" bodystart="39" bodyend="524"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa288eb54e6fafb8af13f71e2f3dce4a2" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>append_chain</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1adfb9a7a1162b72d5d33e7e3430117611" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>ator</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a02072f2001d400e7f7ab5f9463e236c8" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>BasicTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a8945a16bf52101d89dbc6f7b907b3fd9" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>BasicTimeSeries</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af9aea7916d2b11f9f1e94b7d84b8db23" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>begin</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a1dd1a9469bca89f7e07c6aa928dc4a09" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>cardinal</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a20c1da469f6e0a073b291a680425f9e8" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>change_key</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1abaa3b11bec830a2ab4f93e79623af591" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>changed_or_set</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a610962d5ca59e48d1b2833e613bbad1d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>clear_modified</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1af87b223c30872f55e8c5a5246da143ba" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>components_are_cardinal</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a7e983515950366013bde880ddb740b36" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>components_are_orthogonal</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a9be7b3811cfcd0b0396b32214d7eab51" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>CoreSeismogram</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a88d2aa5099488eb2cbdbd1188c81339e" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>CoreSeismogram</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a8c7307434dac26ca63ac423b55ecb5ec" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>CoreSeismogram</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a67232df3f9d1e1b5ac245f97478adee9" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>CoreSeismogram</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a9c993726c259d7a6f1c213d0d04db5ba" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>CoreSeismogram</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>dead</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1af31c96c0e2173d7581e1c3a3f8bcfde8" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>dt</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7f1e227ec1acaab97343ecbf47bedac4" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>end</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1ae043fa67b9d889965ae473da583a1eb4" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>endtime</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a096d3ea32cc03c3f9ae9c69cd9ee28ba" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>erase</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ab87672dc6adffed90b0dc9c144219d44" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>force_t0_shift</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1adccfb78a6ebcdf62039e5cb351566438" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>free_surface_transformation</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5d6876ed25c3f5d93052239ec828a3c5" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a991516933477580b6b59dd578819df06" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>get_any</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a2631da9d437572ee0781ed9bd96a3ed3" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>get_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad69a5786d997104df560775f4f688b02" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>get_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a78f3a01e1b1deccd84a0833bea4ef462" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>get_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7ace0c05ebb00b3c383cb8cccd225504" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>get_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa56da98a52f03babd67bf9fb55c40f3a" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>get_string</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1aae2950b408052bda849ba07c4ea9b018" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>get_transformation_matrix</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>is_defined</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a52e2040555616a39b900aa0831c3bd10" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>keys</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1acc56784b2aaadf8223a9e189830ae3dc" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>kill</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a8aae898b7cf2f75d111b3eb6d8184396" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>live</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af564bb9ced4cc480d71a1e13c3fa582e" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>md</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>mdt</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a4a87cd6a6f8fc5cdbee65cb85958cb2c" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5255fc3ae6accb650f221c9065a92eff" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afa617529be5501b6b059091118a1a51f" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>mlive</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a0fec2640022e944afe1ae1180e741da5" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>modified</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>mt0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>nsamp</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1acb19d36d0e3ed2e52eb77da34c65f4f3" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>operator*=</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a0254f287fe5fb2217fcda0131b65410f" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>operator+</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afbd50c491ecc4d42cf2b4213b8bc3327" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::seismic::CoreSeismogram</scope><name>operator+</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a4824e03f8697c3f36fa7957bb82e122c" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>operator+=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afadcdb42814abc1448a78d1d9f3d44aa" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::seismic::CoreSeismogram</scope><name>operator+=</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1ac44e27ef57299045b2e0c7a252e32a89" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>operator-</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1af749235404f3cf11808598ef133bf781" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>operator-=</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1aaa906f3915cfd8ba04adefedc35032e7" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aaf05bc1fe471e194bec093906c1a607c" prot="public" virt="non-virtual" ambiguityscope="mspass::seismic::BasicTimeSeries::"><scope>mspass::seismic::CoreSeismogram</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::seismic::CoreSeismogram</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a1b8fc85ca5a5e14d2e2cdd51a9697fcc" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>operator[]</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1abdf52d3336018194da73d6832150169d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>operator[]</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a41711bd9b0c88089e6e217f318c01de2" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>orthogonal</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab2162ed3e7349998ee06ace77645bf77" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aec776bbbbf8528903432d9b30d1272d8" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aefee14db8cda9c7143a0eb7bf2d1be1f" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a11ef6cbc1adec7964e2d9c3a4ead15b1" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab3989b1152e9b7b3dcce36aaec89f46d" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1adc016a9bb2288f1f0a7687cfa6844ceb" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa60d283b9eaae245294914557c723c30" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a45c295b33cdbcc297b7429235b81de9a" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1add02049febdc316d70d0fb62e96b2e36" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aafaa017f0e16f37a81a6abdb406a1e08" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5fe91d35373564958386f08915b7ce3c" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab1ede27ae9810767832f0879ccbfd234" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa8402af6778236df398ff0fe25911e21" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put_object</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5efd5678db951e3517c5667fefe93ddf" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>put_string</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1ab52a292c7c7bc8fc5fef68db9eb847e0" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>rotate</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a8bfacfda2b33e2df7938695126fbb0db" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>rotate</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a895a06c26825e8abe8c8617622cf8d5e" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>rotate</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a756ee542caaa6001f9f40fed3607ff7e" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>rotate_to_standard</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a21faa1455f1b3a0b723e7ee136ac4d2b" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>rtoa</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>sample_number</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a21bbb21d3debe26b9c185dc0c93651d0" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>samprate</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a5e51c2c6d3a1aa02281ba242a1d15bf2" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>set_dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a1ca7ba8bcd8337bd49d438664e74966d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>set_live</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1ae94bac250fe5928ced41babc322c2c79" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>set_npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a7724b7cfa40eebf0b15e0d2b39ae615e" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>set_t0</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a94e13495475bfb8c1e62f40006f13bdc" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>set_transformation_matrix</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1ad60b2dca7acfd76ff1f8d677ef609f8a" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>set_transformation_matrix</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a686a13c4938df315e175cd249a52b74e" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>set_transformation_matrix</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ac3f8c8200710fe0d3ef211c7c758e864" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>set_tref</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a35bf7426cc825e9b3dcf3226816d8316" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>shift</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a1e83b446d82202d808504429b0257eb0" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>shifted</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a153ca69299a4d70aa0c6e69e8c70a767" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>size</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a629ae308ad656912abd32d086730f35d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>sync_npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a472074f3074d59f794d18017b010ab81" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>t0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ae79b68bf89b4cd4e6001bbf2c491f539" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>t0shift</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1af749170531556c0c39ba6916057d2b17" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>t0shift_is_valid</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a438b4f6453a4ff2a46de53dfdf3599c2" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>time</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a858bde44fbc9801ba833970604c965d1" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>time_is_relative</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aaf47da6a5d44415cf8a3b70e9a0bc5d5" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>time_is_UTC</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a83c9a758b4a05ebddf09e17373b1e656" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>time_reference</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ac0f23a3d725302665f4ff0c576b39237" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>timetype</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a30316a5d8ed7794f0d51da0c96d97882" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>tmatrix</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a6b524450abe7e5089051a045bb81af5f" prot="private" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>tmatrix_is_cardinal</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1ae9ea31f9e36577a51660c61e0749d4a6" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>transform</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>tref</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad5cd3bfc81c7fccd83bbb30ef1c2774c" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>type</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a9ac5c7c060d582b1a399fb066d06779f" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>u</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_metadata_1a1d7a9ab1e25e01694cc733ad2b98c6b7" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>~BasicMetadata</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a2839e2405b168e0f1ad4d236f31eac8e" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>~BasicTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_seismogram_1a22f733f1d159422844f3091450813445" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>~CoreSeismogram</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a6d06560c0b169240031c6a274dc7990f" prot="public" virt="virtual"><scope>mspass::seismic::CoreSeismogram</scope><name>~Metadata</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
