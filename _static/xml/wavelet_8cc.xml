<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="wavelet_8cc" kind="file" language="C++">
    <compoundname>wavelet.cc</compoundname>
    <includes refid="dpss_8h" local="yes">mspass/algorithms/deconvolution/dpss.h</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="2">
        <label>mspass/algorithms/deconvolution/dpss.h</label>
        <link refid="dpss_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/deconvolution/wavelet.cc</label>
        <link refid="wavelet_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemspass">mspass</innernamespace>
    <innernamespace refid="namespacemspass_1_1algorithms">mspass::algorithms</innernamespace>
    <innernamespace refid="namespacemspass_1_1algorithms_1_1deconvolution">mspass::algorithms::deconvolution</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;mspass/algorithms/deconvolution/dpss.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mspass::algorithms::deconvolution<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>a<sp/>vector<sp/>of<sp/>n<sp/>doubles<sp/>contain<sp/>a<sp/>ricker<sp/>wavelet<sp/>defined<sp/>by<sp/>center</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>frequence<sp/>fpeak<sp/>sampled<sp/>at<sp/>dt.<sp/><sp/><sp/>Not<sp/>checking<sp/>is<sp/>done<sp/>to<sp/>assure<sp/>dt<sp/>is</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>rational.<sp/><sp/><sp/>IMPORTANT<sp/>to<sp/>note<sp/>output<sp/>is<sp/>circular<sp/>shifted<sp/>to<sp/>zero<sp/>phase</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>so<sp/>fft<sp/>of<sp/>result<sp/>will<sp/>not<sp/>produce<sp/>a<sp/>time<sp/>shift.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rickerwavelet(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fpeak,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>modified<sp/>from<sp/>http://toto-share.com/2011/05/cc-ricker-wavelets-code/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>k;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nw;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nc;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nw1,<sp/>alpha,<sp/>beta;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>nw1<sp/>=<sp/>2.2<sp/>/<sp/>fpeak<sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>nw<sp/>=<sp/>2<sp/>*<sp/>floor(nw1<sp/>/<sp/>2)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>nc<sp/>=<sp/>floor(nw<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*wricker<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nw;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>(nc<sp/>-<sp/>k<sp/>+<sp/>1)<sp/>*<sp/>fpeak<sp/>*<sp/>dt<sp/>*<sp/>M_PI;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>pow(alpha,<sp/>2.0);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>wricker[i]<sp/>=<sp/>(1<sp/>-<sp/>(beta<sp/>*<sp/>2))<sp/>*<sp/>exp(-beta);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>nw;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>wricker[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ricker<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fpeak<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>ricker[0]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ricker[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nc;<sp/>i++)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ricker[n<sp/>-<sp/>nc<sp/>+<sp/>i]<sp/>=<sp/>wricker[i];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>nc;<sp/>i<sp/>&lt;<sp/>nw;<sp/>i++)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ricker[i<sp/>-<sp/>nc]<sp/>=<sp/>wricker[i];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>nw<sp/>-<sp/>nc;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>nc;<sp/>i++)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ricker[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>wricker;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ricker);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>an<sp/>array<sp/>of<sp/>doubles<sp/>of<sp/>length<sp/>n<sp/>define<sp/>a<sp/>gaussian<sp/>(wavelet)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>function<sp/>with<sp/>peak<sp/>width<sp/>sigma<sp/>in<sp/>time<sp/>domain<sp/>units<sp/><sp/><sp/>(i.e.<sp/>sigma</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>is<sp/>a<sp/>time<sp/>duration,<sp/>not<sp/>frequency).<sp/><sp/><sp/>Output<sp/>is<sp/>uniformly<sp/>sampled</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>at<sp/>interval<sp/>dt<sp/>and<sp/>duration<sp/>(n-1)*dt.<sp/><sp/>Output<sp/>is<sp/>phase<sp/>shifted<sp/>to</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>zero<sp/>phase<sp/>equivalent<sp/>so<sp/>an<sp/>fft<sp/>will<sp/>produce<sp/>no<sp/>time<sp/>shifts.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>That<sp/>means<sp/>the<sp/>actual<sp/>gaussian<sp/>is<sp/>split<sp/>with<sp/>the<sp/>peak<sp/>at<sp/>zero<sp/>and</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>negative<sp/>times<sp/>phase<sp/>shifted<sp/>the<sp/>left<sp/>of<sp/>sample<sp/>n-1<sp/>(circular<sp/>shift</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>data<sp/>vector).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*gaussian(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>dt<sp/>*<sp/>(n<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tover2<sp/>=<sp/>total<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>%<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>tover2<sp/>/<sp/>dt;<sp/>i++)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t[i]<sp/>=<sp/>i<sp/>*<sp/>dt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>tover2<sp/>/<sp/>dt<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t[i]<sp/>=<sp/>-tover2<sp/>+<sp/>(i<sp/>-<sp/>tover2<sp/>/<sp/>dt<sp/>-<sp/>1)<sp/>*<sp/>dt;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>n<sp/>/<sp/>2;<sp/>i++)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t[i]<sp/>=<sp/>i<sp/>*<sp/>dt;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>n<sp/>/<sp/>2<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t[i]<sp/>=<sp/>-(n<sp/>-<sp/>i)<sp/>*<sp/>dt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*gw<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigma<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>gw[0]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gw[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gw[i]<sp/>=<sp/>exp(-(t[i]<sp/>/<sp/>sigma)<sp/>*<sp/>(t[i]<sp/>/<sp/>sigma));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>t;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(gw);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*slepian0(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tbp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*w<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>only<sp/>need<sp/>the<sp/>0th<sp/>order<sp/>taper<sp/>here<sp/>so<sp/>sequ<sp/>and<sp/>seql<sp/>are<sp/>0<sp/>in<sp/>this<sp/>call*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>dpss_calc(n,<sp/>tbp,<sp/>0,<sp/>0,<sp/>w);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>dpss_calc<sp/>does<sp/>not<sp/>normalize<sp/>the<sp/>functions<sp/>returned<sp/>so<sp/>we<sp/>normalize<sp/>the</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/>result<sp/>to<sp/>unit<sp/>L2<sp/>norm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nrm(0.0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>nrm<sp/>+=<sp/>w[i]<sp/>*<sp/>w[i];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>nrm<sp/>=<sp/>sqrt(nrm);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>w[i]<sp/>/=<sp/>nrm;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mspass::algorithms::deconvolution</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/deconvolution/wavelet.cc"/>
  </compounddef>
</doxygen>
