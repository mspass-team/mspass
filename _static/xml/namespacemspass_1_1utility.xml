<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacemspass_1_1utility" kind="namespace" language="C++">
    <compoundname>mspass::utility</compoundname>
    <innerclass refid="classmspass_1_1utility_1_1_antelope_pf" prot="public">mspass::utility::AntelopePf</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_antelope_pf_error" prot="public">mspass::utility::AntelopePfError</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_attribute_cross_reference" prot="public">mspass::utility::AttributeCrossReference</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_attribute_properties" prot="public">mspass::utility::AttributeProperties</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_attribute_map" prot="public">mspass::utility::AttributeMap</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_basic_metadata" prot="public">mspass::utility::BasicMetadata</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1dmatrix__index__error" prot="public">mspass::utility::dmatrix_index_error</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1dmatrix__size__error" prot="public">mspass::utility::dmatrix_size_error</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1dmatrix" prot="public">mspass::utility::dmatrix</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1dvector" prot="public">mspass::utility::dvector</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_log_data" prot="public">mspass::utility::LogData</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_error_logger" prot="public">mspass::utility::ErrorLogger</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_metadata_get_error" prot="public">mspass::utility::MetadataGetError</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_metadata" prot="public">mspass::utility::Metadata</innerclass>
    <innerclass refid="structmspass_1_1utility_1_1_metadata__typedef" prot="public">mspass::utility::Metadata_typedef</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_metadata_definitions" prot="public">mspass::utility::MetadataDefinitions</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" prot="public">mspass::utility::MsPASSError</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_basic_processing_history" prot="public">mspass::utility::BasicProcessingHistory</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_node_data" prot="public">mspass::utility::NodeData</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_processing_history" prot="public">mspass::utility::ProcessingHistory</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_algorithm_definition" prot="public">mspass::utility::AlgorithmDefinition</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_process_manager" prot="public">mspass::utility::ProcessManager</innerclass>
    <innerclass refid="structmspass_1_1utility_1_1_spherical_coordinate" prot="public">mspass::utility::SphericalCoordinate</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1_vector_statistics" prot="public">mspass::utility::VectorStatistics</innerclass>
    <innerclass refid="classmspass_1_1utility_1_1sort__by__stage" prot="public">mspass::utility::sort_by_stage</innerclass>
    <innernamespace refid="namespacemspass_1_1utility_1_1memory__constants">mspass::utility::memory_constants</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3" prot="public" static="no" strong="yes">
        <type></type>
        <name>MDtype</name>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3a7f80fcc452c2f1ed2bb51b39d0864df1" prot="public">
          <name>Real</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3a37c033a29fead212bd12fc7a19e8f405" prot="public">
          <name>Real32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3ad909d38d705ce75386dd86e611a82f5b" prot="public">
          <name>Double</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3aa4ab3dab2f871e1a5389c934fa26a06d" prot="public">
          <name>Real64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3aa0faef0851b4294c06f2b94bb1cb2044" prot="public">
          <name>Integer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3ac06129f6e6e15c09328365e553f1dc31" prot="public">
          <name>Int32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3a8394f0347c184cf156ac5924dccb773b" prot="public">
          <name>Long</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3afbde23b11d7e59af7828e81144c8b487" prot="public">
          <name>Int64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3a27118326006d3829667a400ad23d5d98" prot="public">
          <name>String</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3a27226c864bac7454a8504f8edb15d95b" prot="public">
          <name>Boolean</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3a4b2ab4db4213395205ba0a18bd6c0a0e" prot="public">
          <name>Double_Array</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_8h_1a8e3dcdd4343f59850c331c8b1309c4e3a4bbb8f967da6d1a610596d7257179c2b" prot="public">
          <name>Invalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Define standard types for <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Attributes in <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> here can be any type that boost::any supports. However, 99% of attributes one normally wants to work with can be cast into the stock language types defined by this enum. This is derived form seispp in antelope contrib but adapted to the new form with boost::any. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="509" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" bodystart="509" bodyend="522"/>
      </memberdef>
      <memberdef kind="enum" id="_metadata_definitions_8h_1a1910cc7e89b541e3aac43632522cec55" prot="public" static="no" strong="yes">
        <type></type>
        <name>MDDefFormat</name>
        <enumvalue id="_metadata_definitions_8h_1a1910cc7e89b541e3aac43632522cec55a21080924b5d026e4a6011eb987ae1ec8" prot="public">
          <name>PF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_metadata_definitions_8h_1a1910cc7e89b541e3aac43632522cec55a9463f87bbed1fcdacfb8d40e185ca2bc" prot="public">
          <name>YAML</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" line="7" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h" bodystart="8" bodyend="11"/>
      </memberdef>
      <memberdef kind="enum" id="_ms_p_a_s_s_error_8h_1a5b3d616387780ce356bfde3578e6386a" prot="public" static="no" strong="yes">
        <type></type>
        <name>ErrorSeverity</name>
        <enumvalue id="_ms_p_a_s_s_error_8h_1a5b3d616387780ce356bfde3578e6386aa882384ec38ce8d9582b57e70861730e4" prot="public">
          <name>Fatal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_ms_p_a_s_s_error_8h_1a5b3d616387780ce356bfde3578e6386aa4bbb8f967da6d1a610596d7257179c2b" prot="public">
          <name>Invalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_ms_p_a_s_s_error_8h_1a5b3d616387780ce356bfde3578e6386aa06197f478ef19e4e580f3517579137a3" prot="public">
          <name>Suspect</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_ms_p_a_s_s_error_8h_1a5b3d616387780ce356bfde3578e6386aab510ff4b686f023f81a6b973c8928427" prot="public">
          <name>Complaint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_ms_p_a_s_s_error_8h_1a5b3d616387780ce356bfde3578e6386aaa603905470e2a5b8c13e96b579ef0dba" prot="public">
          <name>Debug</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_ms_p_a_s_s_error_8h_1a5b3d616387780ce356bfde3578e6386aa5391f9a882a54c787b206138ed6d28b0" prot="public">
          <name>Informational</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Severity code for error messages. </para>
        </briefdescription>
        <detaileddescription>
<para>C++11 added the construct of a enum class that we use here. It makes the enum more strongly typed to avoid collisions for these common words that would be trouble otherwise. This class is used in all <ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref> objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MsPASSError.h" line="14" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MsPASSError.h" bodystart="15" bodyend="22"/>
      </memberdef>
      <memberdef kind="enum" id="_processing_history_8h_1a81a390507e7c574e0226915cd1bb1ac3" prot="public" static="no" strong="yes">
        <type></type>
        <name>ProcessingStatus</name>
        <enumvalue id="_processing_history_8h_1a81a390507e7c574e0226915cd1bb1ac3a633d6abff0a3fc22404347728d195059" prot="public">
          <name>RAW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_processing_history_8h_1a81a390507e7c574e0226915cd1bb1ac3a6d7b0f55d14f78a5611f7e00a2e3c2ec" prot="public">
          <name>ORIGIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_processing_history_8h_1a81a390507e7c574e0226915cd1bb1ac3a87129c163298099723f5eb9201684b70" prot="public">
          <name>VOLATILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_processing_history_8h_1a81a390507e7c574e0226915cd1bb1ac3aec09e9e688c30b57cd64c0180da5c34a" prot="public">
          <name>SAVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_processing_history_8h_1a81a390507e7c574e0226915cd1bb1ac3a0db45d2a4141101bdfe48e3314cfbca3" prot="public">
          <name>UNDEFINED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum class is used to define status of processing of a datum. We use this mechanism to help keep the history data from creating memory bloat. It is alwo helpul to build a linked list of a chain of data that have to be handled somewhat differently. See documentation for classes below for further info about how this is used </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="24" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="25" bodyend="31"/>
      </memberdef>
      <memberdef kind="enum" id="_processing_history_8h_1ab5891df6f20b9c8401ed237d8da60683" prot="public" static="no" strong="yes">
        <type></type>
        <name>AtomicType</name>
        <enumvalue id="_processing_history_8h_1ab5891df6f20b9c8401ed237d8da60683a11deb1121651c5b5cc81e4eb1e791c48" prot="public">
          <name>SEISMOGRAM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_processing_history_8h_1ab5891df6f20b9c8401ed237d8da60683a5eb907bdd20f7bdad174e0525e3c4097" prot="public">
          <name>TIMESERIES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_processing_history_8h_1ab5891df6f20b9c8401ed237d8da60683a0db45d2a4141101bdfe48e3314cfbca3" prot="public">
          <name>UNDEFINED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Atomic data type definition for mspass. </para>
        </briefdescription>
        <detaileddescription>
<para>MsPASS has the concept of atomic types. One part of that definition is that such a class must implement this history mechanism. This enum class will need to be expanded if new types are added, but the design goal is to make extension relatively easy - add the data implementation that inherits <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> and add an entry for that type here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="40" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="enum" id="_antelope_pf_8cc_1ae5c17f122618887b008273f04c244f7d" prot="public" static="no" strong="no">
        <type></type>
        <name>PfStyleInputType</name>
        <enumvalue id="_antelope_pf_8cc_1ae5c17f122618887b008273f04c244f7da6493b05cb33fe8436013669c9f850bf1" prot="public">
          <name>PFMDSTRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_antelope_pf_8cc_1ae5c17f122618887b008273f04c244f7dafd9df0c5be320e077326a458de7eab35" prot="public">
          <name>PFMDREAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_antelope_pf_8cc_1ae5c17f122618887b008273f04c244f7da57ba5aa01b71fc321df8e02856d5a9b3" prot="public">
          <name>PFMDINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_antelope_pf_8cc_1ae5c17f122618887b008273f04c244f7dae7dd33bf35177181b067ed26ca759186" prot="public">
          <name>PFMDBOOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_antelope_pf_8cc_1ae5c17f122618887b008273f04c244f7dacf033d665148aa32b5bd7fc159e1ac3e" prot="public">
          <name>PFMDARR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_antelope_pf_8cc_1ae5c17f122618887b008273f04c244f7da43d5f9723fd14ae70a63299ca6f94336" prot="public">
          <name>PFMDTBL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" line="15" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="15" bodyend="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_metadata_8h_1af422eedc4bcae87065cc9b9a48d2766f" prot="public" static="no">
        <type>struct <ref refid="structmspass_1_1utility_1_1_metadata__typedef" kindref="compound">mspass::utility::Metadata_typedef</ref></type>
        <definition>typedef struct mspass::utility::Metadata_typedef mspass::utility::Metadata_typedef</definition>
        <argsstring></argsstring>
        <name>Metadata_typedef</name>
        <briefdescription>
<para>Used in <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> to defined type of <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> associated with a given tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="529" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="_metadata_8h_1a6f794f1b2bc2e5de51e312f79bb75607" prot="public" static="no">
        <type>std::list&lt; <ref refid="structmspass_1_1utility_1_1_metadata__typedef" kindref="compound">Metadata_typedef</ref> &gt;</type>
        <definition>typedef std::list&lt;Metadata_typedef&gt; mspass::utility::MetadataList</definition>
        <argsstring></argsstring>
        <name>MetadataList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Container to drive selected copies.</para>
<para>Often it is necessary to define a list of <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> elements that are to be copied or accessed sequentially. This is common enough we use this typedef to reduce the ugly syntax. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="536" column="19" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_processing_history_8cc_1ae6909235462ad6b1de144ecfcb9e4d98" prot="public" static="no">
        <type>std::tuple&lt; int, std::string, std::string &gt;</type>
        <definition>typedef std::tuple&lt;int,std::string,std::string&gt; mspass::utility::Algdata</definition>
        <argsstring></argsstring>
        <name>Algdata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" line="763" column="20" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="763" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_antelope_pf_8h_1abc62555a5731e1b394f7afb4e96ba4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string mspass::utility::pftbl_key</definition>
        <argsstring>(&quot;AntelopePfTbl&quot;)</argsstring>
        <name>pftbl_key</name>
        <param>
          <type>&quot;AntelopePfTbl&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>key for accessing Tbl and Arr entries.</para>
<para>These are of use only when this object is converted to a <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object using the ConvertToMetadata method. This object holds a representation of Tbl and Arr sections of the input pffile as in map containers that are converted by that method and stored with the boost::any capability. This allows them to be retrieved if desired with these keys and the correct type specification. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="18" column="19" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" declline="18" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8h_1a1ff9af846060ac6d152d1cd534f5d2f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string mspass::utility::pfarr_key</definition>
        <argsstring>(&quot;AntelopePfArr&quot;)</argsstring>
        <name>pfarr_key</name>
        <param>
          <type>&quot;AntelopePfArr&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="19" column="19" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" declline="19" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8h_1aae2c99541e603866784e335b86bacc40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MetadataList</type>
        <definition>MetadataList mspass::utility::get_mdlist</definition>
        <argsstring>(const mspass::utility::AntelopePf &amp;m, const std::string tag)</argsstring>
        <name>get_mdlist</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">mspass::utility::AntelopePf</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Build a MetadataList using <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>A convenient format to define a MetadataList is an Antelope Pf file. <linebreak/>
 This procedure creates a MetadataList from an <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> object (generated from a pf file) keying on tag that defines a pf Tbl&amp; section.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>is the PfStyleMetadata object where you expect to find the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>is the unique tag on the Tbl in the original Pf containing the data defining the MetadataList. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="198" column="14" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" declline="198" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8h_1a668e6cab30a8a825f15bfe143ee339f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref></type>
        <definition>AntelopePf mspass::utility::pfread</definition>
        <argsstring>(const std::string fname)</argsstring>
        <name>pfread</name>
        <param>
          <type>const std::string</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a single pf file and return as an <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="200" column="12" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" declline="200" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_error_logger_8h_1a19f2e16ad15873ff1530ba11933f0ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tdata</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mspass::utility::data_are_valid</definition>
        <argsstring>(const Tdata &amp;d)</argsstring>
        <name>data_are_valid</name>
        <param>
          <type>const Tdata &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Full test of error log for data validity. </para>
        </briefdescription>
        <detaileddescription>
<para>This template can only work on mspass atomic data (TimeSeries and Seismogram objects). It assumes the data have an attribute elog that is an <ref refid="classmspass_1_1utility_1_1_error_logger" kindref="compound">ErrorLogger</ref> object containing the data&apos;s error log. It returns immediately if the data are already marked dead. Otherwise it runs the worst_errors method on elog. If the log is empty it returns false as that implies no errors have been logged. If there are entries it looks for Invalid or Fatal entries and returns true only if there are any entries of that level of severity. i.e. it returns false if the only errors are things like Complaint or less. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ErrorLogger.h" line="135" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ErrorLogger.h" bodystart="135" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="_metadata_8h_1afbf9f742308956d0c62343d415b16734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::demangled_name</definition>
        <argsstring>(const boost::any val)</argsstring>
        <name>demangled_name</name>
        <param>
          <type>const boost::any</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pretty name from a boost any object.</para>
<para>We use a boost::any object as a container to hold any generic object. The type name is complicated by name mangling. This small function returns a human readable type name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>is the boost::any container to be checked for type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>demangled name of type of the entity stored in the container. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/Metadata.cc" line="177" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/Metadata.cc" bodystart="177" bodyend="185" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" declline="500" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_metadata_8h_1ad32da9ff66870e260f4ac5e87f59b02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::utility::copy_selected_metadata</definition>
        <argsstring>(const Metadata &amp;mdin, Metadata &amp;mdout, const MetadataList &amp;mdlist)</argsstring>
        <name>copy_selected_metadata</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> &amp;</type>
          <declname>mdin</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> &amp;</type>
          <declname>mdout</declname>
        </param>
        <param>
          <type>const MetadataList &amp;</type>
          <declname>mdlist</declname>
        </param>
        <briefdescription>
<para>Procedure to copy a subset of a container of <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is often useful to do a selective copy of the contents of a <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> container. e.g. the function ExtractComponent creates a scalar time series object from a three component seismogram extracting a single component. It would make no sense to copy attributes related to the orientation of all three components in the copy. Programs using this feature should build the MetadataList at startup to define the subset. See related procedures that create one of them. (Not presently a class because the MetadataList is just a simple std::list container.)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mdin</parametername>
</parameternamelist>
<parameterdescription>
<para>is the container to retrieve attributes from (commonly a dynamic_cast from a data object). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mdout</parametername>
</parameternamelist>
<parameterdescription>
<para>is the output <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> (also commonly a dynamic_cast from a data object.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mdlist</parametername>
</parameternamelist>
<parameterdescription>
<para>is the list that defines the subset to copy from mdin to mdout.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of items copied</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>will</parametername>
</parameternamelist>
<parameterdescription>
<para>throw an <ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref> if the input is missing one of the attributes defined in mdlist or if there is a type mismatch. This means the copy will be incomplete and not trusted. Handlers need to decide what to do in this condition. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/metadata_helpers.cc" line="51" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/metadata_helpers.cc" bodystart="51" bodyend="122" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" declline="561" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_metadata_8h_1a86e1fa1432b069aa3fcb32c62346ce66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mspass::utility::serialize_metadata</definition>
        <argsstring>(const Metadata &amp;md)</argsstring>
        <name>serialize_metadata</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> to a string. This function is needed to support pickle in the python interface. It is called in the pickle definitions in the wrapper for objects using <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> to provide a way to serialize the contents of the <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object to a string. The data that string contains is expected to restored with the inverse of this function called restore. Serialized output is readable with each entry on one line with this format: key type value where type is restricted to double, long, bool, and the long C++ name for an std::string. Currently this: std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; Note any entry not of the four supported types will generate an error message posted to stderr. That is an ugly approach, but an intentional design decision as this function should normally be called only pickling methods for data objects. Could see no solution to save errors in that environment without throwing an exception and aborting the processing. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object to be serialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string of serialized data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="584" column="13" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" declline="584" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_metadata_8h_1ab26fc2464a71846e3adee3d73ca605f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref></type>
        <definition>Metadata mspass::utility::restore_serialized_metadata</definition>
        <argsstring>(const std::string)</argsstring>
        <name>restore_serialized_metadata</name>
        <param>
          <type>const std::string</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack serialized <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>.</para>
<para>This function is the inverse of the serialize function. It recreates a <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object serialized previous with the serialize function. Note it only supports basic types currently supported by mspass: long ints, double, boolean, and string. Since the output is assumed to be form serialize we do not test for validity of the type assuming serialize didn&apos;t handle anything else. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>is the serialized data to be unpacked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> derived from sd </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="596" column="10" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" declline="596" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="_metadata_8h_1a29ec8b4801ccc61039e7e2349b447f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref></type>
        <definition>Metadata mspass::utility::restore_serialized_metadata_py</definition>
        <argsstring>(const pybind11::object &amp;sd)</argsstring>
        <name>restore_serialized_metadata_py</name>
        <param>
          <type>const pybind11::object &amp;</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack serialized <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>.</para>
<para>This function is the inverse of the serialize function. It recreates a <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object serialized previously with the serialize function. <linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>is the serialized data to be unpacked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> derived from sd </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/Metadata.cc" line="302" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/Metadata.cc" bodystart="302" bodyend="322" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" declline="598" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="_ms_p_a_s_s_error_8h_1afe59e20920eb379ed246c80729d8fd0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mspass::utility::ErrorSeverity</type>
        <definition>mspass::utility::ErrorSeverity mspass::utility::string2severity</definition>
        <argsstring>(const std::string howbad)</argsstring>
        <name>string2severity</name>
        <param>
          <type>const std::string</type>
          <declname>howbad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal used to convert the keyword in a message string to an ErrorSeverity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MsPASSError.h" line="26" column="32" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MsPASSError.h" declline="26" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="_ms_p_a_s_s_error_8h_1a3cf27049cc0b567095529d93ed20ff40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::severity2string</definition>
        <argsstring>(const mspass::utility::ErrorSeverity es)</argsstring>
        <name>severity2string</name>
        <param>
          <type>const mspass::utility::ErrorSeverity</type>
          <declname>es</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inverse of string2severity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" line="42" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" bodystart="42" bodyend="61" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MsPASSError.h" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_ms_p_a_s_s_error_8h_1ac16fc2acdbf90eb66de746af81da73a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::error_says_data_bad</definition>
        <argsstring>(const mspass::utility::MsPASSError &amp;err)</argsstring>
        <name>error_says_data_bad</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">mspass::utility::MsPASSError</ref> &amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Test if a thrown error indicates data are no longer valid. </para>
        </briefdescription>
        <detaileddescription>
<para>Errors vary in severity. Use this function as fast test for an error so severe an algorithm failed and any subsequent use of the data is ill advised. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" line="91" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" bodystart="91" bodyend="97" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MsPASSError.h" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_ms_p_a_s_s_error_8h_1a1ccca35f690cd2a6fd9cd5db9bb68d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string mspass::utility::parse_message_error_severity</definition>
        <argsstring>(const mspass::utility::MsPASSError &amp;err)</argsstring>
        <name>parse_message_error_severity</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">mspass::utility::MsPASSError</ref> &amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Return a string representation of error severity. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the what method to retrieve the message string with the error severity appended. It then simply returns the keyword defining the error code contained in the message. The list is: Fatal,Invalid,suspect, Complaint,Debug, or Informational. It will return Fatal if there is no match to any of the keywords assuming something has corrupted memory for that to happen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" line="69" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" bodystart="69" bodyend="80" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MsPASSError.h" declline="143" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_ms_p_a_s_s_error_8h_1a1210aafbd40926f829a7b9e9245b45b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mspass::utility::ErrorSeverity</type>
        <definition>ErrorSeverity mspass::utility::message_error_severity</definition>
        <argsstring>(const mspass::utility::MsPASSError &amp;err)</argsstring>
        <name>message_error_severity</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">mspass::utility::MsPASSError</ref> &amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>return message severity as an ErrorSeverity enum class. </para>
        </briefdescription>
        <detaileddescription>
<para>ErrorSeverity is bound with pybind11 and provides a way to define the severity of an error. This function is a close companion to parse_message_error_severity. In fact, in the current implementation it calls parse_message_error_severity and converts the result string to an ErrorSeverity it returns. That process has a small overhead and it is largely a decision of asthetics whether or not to use this function of parse_message_error_severity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" line="81" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" bodystart="81" bodyend="85" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MsPASSError.h" declline="153" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="_processing_history_8h_1aea8edb14e5a7beea6524771f4b6d9e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string mspass::utility::SAVED_ID_KEY</definition>
        <argsstring>(&quot;NODEDATA_AT_SAVE&quot;)</argsstring>
        <name>SAVED_ID_KEY</name>
        <param>
          <type>&quot;NODEDATA_AT_SAVE&quot;</type>
        </param>
        <briefdescription>
<para>Special definition of uuid for a saved record. </para>
        </briefdescription>
        <detaileddescription>
<para>We found in the implementation of this that an issue in the use of uuids and a multimap to define the history tree was both endpoints of any chain were problematic. i.e. the root of the tree (end of the chain) and the leaves. Leaves defined by two alternative properties: ProcessingStatus RAW or ORIGIN or uuid of the key equal to the uuid attribute in the <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> struct (class). The head data (= root of the tree in this case) have two cases. During normal processing the head is defined by the current_id value and the <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> attributes stored in the private area of <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>. We found, however, that SAVED had to be treated specially because of the design goal where the normal procedure would be to flush the history record after a save. To do that and have everything else work we adopted a solution where map_as_saved writes a special record to the multimap with the key defined by this const string. This works correctly only if a writer immediately clears the history record after it is saved. If not, duplicate values with this key will appear in the nodes multimap and the history chain will become ambiguous (two trees emerging from the same root). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="65" column="19" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" declline="65" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="_processing_history_8h_1a2d1ba41dfb207890aee38f1b52707bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tdata</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mspass::utility::append_input</definition>
        <argsstring>(const Tdata &amp;d, ProcessingHistory &amp;his)</argsstring>
        <name>append_input</name>
        <param>
          <type>const Tdata &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>his</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append history data from a data object to inputs vector.</para>
<para>This is a convenience template that is a wrapper for add_one_input used as in some contexts in combination with new_ensemble_process. It handles automatically ignoring dead data and the casting operation to <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>. It will only work if d can be dynamically cast to a <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref>. That means it will work for Seismogram and TimeSeries objects but not CoreSeismogram or CoreTimeSeries.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the data to define as an input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>his</parametername>
</parameternamelist>
<parameterdescription>
<para>is the history data to append this record to - IMPORTANT this function blindly assumes this function is called ONLY after a call to his.new_ensemble_process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="731" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="731" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="_processing_history_8h_1a46ead72845fdebd567b6413d166c7f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::tuple&lt; int, std::string, std::string &gt; &gt;</type>
        <definition>list&lt; Algdata &gt; mspass::utility::algorithm_history</definition>
        <argsstring>(const ProcessingHistory &amp;h)</argsstring>
        <name>algorithm_history</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Return a list of algorithms applied to produce this data. </para>
        </briefdescription>
        <detaileddescription>
<para>It is often useful to know just the chain of processes that were applied to produce a data object without the details of the entire tree of what inputs where processed by what algorithm. This function cracks the history chain and returns just such a list as a chain of tuples. Each tuple has the structure: stage, algorithm, algid. The returned list is sorted by stage alone. If multiple algorithms were applied at the same level (stage) the order of the list will be random in algorithm and algid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>is the history chain to be dumped (normally a dynamic cast from a Seismogram or TimeSeries object) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" line="781" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="781" bodyend="806" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" declline="757" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="_processing_history_8h_1ae4f074a82da462a5711e62d731a9eb8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt;std::string&gt; mspass::utility::algorithm_outputs</definition>
        <argsstring>(const ProcessingHistory &amp;h, const std::string alg, const std::string algid)</argsstring>
        <name>algorithm_outputs</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>algid</declname>
        </param>
        <briefdescription>
<para>Return uuids of all data handled by a given processing algorithm that are parents of this object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is an extended version of algorithm_history. It returns a list of uuids matching the algorithm id passed as an argument. Note for interactive data exploration a typical usage would be to call algorithm_history to alg and algid pair of interest and then call this method to get the uuids with which it is associated. For linear workflows the return will be equivalent to all inputs passed through that algorithm. For iterative algorithms the list can be much longer as each pass will be post new uuids for the same algorithm.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>is the algorithm name to search for. (Note: ignored in this implementation but will make any application more readable.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algid</parametername>
</parameternamelist>
<parameterdescription>
<para>is the id string used to uniquely define a algorithm instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list of uuids handled by that instance of that algorithm. Silently returns an empty list if there is no match </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="777" column="11" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" declline="777" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_spherical_coordinate_8h_1adbf243822d45caedcdf4f0b80333b903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmspass_1_1utility_1_1_spherical_coordinate" kindref="compound">SphericalCoordinate</ref></type>
        <definition>SphericalCoordinate mspass::utility::UnitVectorToSpherical</definition>
        <argsstring>(const double nu[3])</argsstring>
        <name>UnitVectorToSpherical</name>
        <param>
          <type>const double</type>
          <declname>nu</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="structmspass_1_1utility_1_1_spherical_coordinate" kindref="compound">SphericalCoordinate</ref> data structure equivalent to one define dby a unit vector nu. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/SphericalCoordinate.cc" line="10" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/SphericalCoordinate.cc" bodystart="10" bodyend="21" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/SphericalCoordinate.h" declline="32" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="_spherical_coordinate_8h_1ab7498a98e270a72f74720cd150c4f3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double * mspass::utility::SphericalToUnitVector</definition>
        <argsstring>(const SphericalCoordinate &amp;sc)</argsstring>
        <name>SphericalToUnitVector</name>
        <param>
          <type>const <ref refid="structmspass_1_1utility_1_1_spherical_coordinate" kindref="compound">SphericalCoordinate</ref> &amp;</type>
          <declname>sc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a unit vector (vector of 3 doubles) equivalent to direction defined in sphereical coordinates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/SphericalCoordinate.cc" line="25" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/SphericalCoordinate.cc" bodystart="25" bodyend="46" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/SphericalCoordinate.h" declline="37" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="_spherical_coordinate_8h_1a86fd7d0ae1e9aade1541ef4b6ea0f484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::utility::rad</definition>
        <argsstring>(const double theta_deg)</argsstring>
        <name>rad</name>
        <param>
          <type>const double</type>
          <declname>theta_deg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert from degrees to radians. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/SphericalCoordinate.cc" line="48" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/SphericalCoordinate.cc" bodystart="48" bodyend="52" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/SphericalCoordinate.h" declline="39" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="_spherical_coordinate_8h_1acf312d444a7f320c0ed463efac1e3b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::utility::deg</definition>
        <argsstring>(const double theta_rad)</argsstring>
        <name>deg</name>
        <param>
          <type>const double</type>
          <declname>theta_rad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert from radians to degrees. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/SphericalCoordinate.cc" line="53" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/SphericalCoordinate.cc" bodystart="53" bodyend="57" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/SphericalCoordinate.h" declline="41" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1a766a427bf503eeb572b7d8a24251cd87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mspass::utility::data_directory</definition>
        <argsstring>()</argsstring>
        <name>data_directory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard method returns a string defining the top level data directory for mspass.</para>
<para>Programs often need a standard set of initialization files. In mspass we group these under a &quot;data&quot; directory. This procedure returns the top of the chain of data directories. Note this is the top of a directory chain and most application will need to add a subdirectory. e.g.</para>
<para>string datadir=mspass::utility::data_directory(); string mydatafile=datadir+&quot;/pf&quot;; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/data_directory.cc" line="5" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/data_directory.cc" bodystart="5" bodyend="17" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/utility.h" declline="20" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1ab6115394dc9bc0e57f7b97159df84668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>vector&lt; double &gt; mspass::utility::normalize_rows</definition>
        <argsstring>(const mspass::utility::dmatrix &amp;d)</argsstring>
        <name>normalize_rows</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">mspass::utility::dmatrix</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Normalize rows of a matrix to unit L2 length. </para>
        </briefdescription>
        <detaileddescription>
<para>Sometimes it is necessary to normalize a matrix by rows or columns. This function normalizes the rows of a matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the matrix to be normalized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector of the computed L2 norms of each row used for normalization. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/normalize.cc" line="9" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/normalize.cc" bodystart="9" bodyend="27" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/utility.h" declline="29" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="utility_8h_1a13a6393c4dc5fa8b256ec3aa67e6f171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>vector&lt; double &gt; mspass::utility::normalize_columns</definition>
        <argsstring>(const mspass::utility::dmatrix &amp;d)</argsstring>
        <name>normalize_columns</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">mspass::utility::dmatrix</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Normalize columns of a matrix to unit L2 length. </para>
        </briefdescription>
        <detaileddescription>
<para>Sometimes it is necessary to normalize a matrix by rows or columns. This function normalizes the columns of a matrix.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the matrix to be normalized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector of the computed L2 norms of each column used for normalization. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/normalize.cc" line="28" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/normalize.cc" bodystart="28" bodyend="46" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/utility.h" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8cc_1a36c120b3770caf7aca500c526141d6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::utility::yesno</definition>
        <argsstring>(string s)</argsstring>
        <name>yesno</name>
        <param>
          <type>string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" line="26" column="5" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="26" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8cc_1a6c4a0860491dfc95255345a99ae9d315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PfStyleInputType</type>
        <definition>PfStyleInputType mspass::utility::arg_type</definition>
        <argsstring>(string token)</argsstring>
        <name>arg_type</name>
        <param>
          <type>string</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" line="44" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="44" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8cc_1a2a5ce0f12acfef650c961f1f9eb87f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::is_comment_line</definition>
        <argsstring>(string testline)</argsstring>
        <name>is_comment_line</name>
        <param>
          <type>string</type>
          <declname>testline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" line="86" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="86" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8cc_1aaf58a5f15b1cb99aebf22238b0a9955d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref></type>
        <definition>AntelopePf mspass::utility::pfread</definition>
        <argsstring>(const string fname)</argsstring>
        <name>pfread</name>
        <param>
          <type>const string</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" line="102" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="102" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8cc_1a3a3e43fc6cdc845b90cd3c949be6c3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::utility::find_end_block</definition>
        <argsstring>(list&lt; string &gt; &amp;alllines, list&lt; string &gt;::iterator first)</argsstring>
        <name>find_end_block</name>
        <param>
          <type>list&lt; string &gt; &amp;</type>
          <declname>alllines</declname>
        </param>
        <param>
          <type>list&lt; string &gt;::iterator</type>
          <declname>first</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" line="146" column="5" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="146" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8cc_1a578f75a9b058d4c505cafd3b816721d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; string, string &gt;</type>
        <definition>pair&lt;string,string&gt; mspass::utility::split_line</definition>
        <argsstring>(string s)</argsstring>
        <name>split_line</name>
        <param>
          <type>string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" line="165" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="165" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="_antelope_pf_8cc_1a49ad35e11043d8df5373c662939ee1bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list&lt; string &gt;</type>
        <definition>list&lt;string&gt; mspass::utility::split_pfpath</definition>
        <argsstring>(string pfbase, char *s)</argsstring>
        <name>split_pfpath</name>
        <param>
          <type>string</type>
          <declname>pfbase</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" line="304" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="304" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_attribute_map_8cc_1a36585dd8a223df325d05f6e59ad500d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; mspass::utility::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;ofs, const AttributeProperties &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>ofs</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_attribute_properties" kindref="compound">AttributeProperties</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" line="116" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeMap.cc" bodystart="116" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="dmatrix_8cc_1ac58255f3e19b6ec5842d5ae507658066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">dmatrix</ref></type>
        <definition>dmatrix mspass::utility::operator*</definition>
        <argsstring>(const dmatrix &amp;x1, const dmatrix &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">dmatrix</ref> &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">dmatrix</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>is the left matrix for the multiply. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>is the right matrix for the multiply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmspass_1_1utility_1_1dmatrix__size__error" kindref="compound">dmatrix_size_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>will be thrown if the columns in A are not equal to the rows in B. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A*B </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" line="139" column="9" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" bodystart="139" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="dmatrix_8cc_1a0615ec9f60b8286bb56b8c46f262cfc0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">dmatrix</ref></type>
        <definition>dmatrix mspass::utility::operator*</definition>
        <argsstring>(const double &amp;x, const dmatrix &amp;zx) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">dmatrix</ref> &amp;</type>
          <declname>zx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This procedure will multiply all elements of a matrix by a constant. The linear algebra concept of scaling a matrix. <linebreak/>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>is the scaling factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>is the matrix to be scaled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sA </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" line="161" column="9" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" bodystart="161" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="dmatrix_8cc_1a8739e544aec387193aa82f8246f24587" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">dmatrix</ref></type>
        <definition>dmatrix mspass::utility::tr</definition>
        <argsstring>(const dmatrix &amp;x1) noexcept</argsstring>
        <name>tr</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">dmatrix</ref> &amp;</type>
          <declname>x1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A standard matrix operation is to transpose a matrix (reversing rows and columns). This takes input A and returns A^T. <linebreak/>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>- matrix to transpose. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A transposed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" line="190" column="9" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" bodystart="190" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="dmatrix_8cc_1a6d6e9cd97b880d140b0212d198a99eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; mspass::utility::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, dmatrix &amp;x1)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">dmatrix</ref> &amp;</type>
          <declname>x1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" line="203" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" bodystart="203" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="dmatrix_8cc_1a1557b3521cdca55be0ed361f89ead996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1dvector" kindref="compound">dvector</ref></type>
        <definition>dvector mspass::utility::operator*</definition>
        <argsstring>(const dmatrix &amp;x1, const dvector &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1dmatrix" kindref="compound">dmatrix</ref> &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1dvector" kindref="compound">dvector</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matrix vector multiple operator.</para>
<para>This operator is used for constructs like y=Ax where x is a vector and A is a matrix. y is the returned vector. <linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>- matrix on right in multiply </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>- vector on left of multiply operation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>product A*x </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmspass_1_1utility_1_1dmatrix__size__error" kindref="compound">dmatrix_size_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if size of A and x do not match. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" line="262" column="9" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/dmatrix.cc" bodystart="262" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="_error_logger_8cc_1a04b3debeaa90b3be0a3ca795dfaf6f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; mspass::utility::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;ofs, LogData &amp;ld)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>ofs</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_log_data" kindref="compound">LogData</ref> &amp;</type>
          <declname>ld</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ErrorLogger.cc" line="25" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ErrorLogger.cc" bodystart="25" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="_metadata_8cc_1a0142d328cb0a3542b30ca5ab60ce8908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostringstream &amp;</type>
        <definition>ostringstream&amp; mspass::utility::operator&lt;&lt;</definition>
        <argsstring>(ostringstream &amp;os, const Metadata &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostringstream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/Metadata.cc" line="195" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/Metadata.cc" bodystart="195" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="_metadata_8cc_1aec30549e9accb78ea40a5675aca3edf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pybind11::object</type>
        <definition>pybind11::object mspass::utility::serialize_metadata_py</definition>
        <argsstring>(const Metadata &amp;md)</argsstring>
        <name>serialize_metadata_py</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> to a python bytes object. This function is needed to support pickle in the python interface. It cast the C++ object to a Python dict and calls pickle against that dict directly to generate a Python bytes object. This may not be the most elegant approach, but it should be bombproof. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object to be serialized </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pickle serialized data object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/Metadata.cc" line="288" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/Metadata.cc" bodystart="288" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="metadata__helpers_8cc_1ab4ca057c0fae8833fd7b793cd3f418dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MetadataList</type>
        <definition>MetadataList mspass::utility::get_mdlist</definition>
        <argsstring>(const AntelopePf &amp;m, const string tag)</argsstring>
        <name>get_mdlist</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/metadata_helpers.cc" line="8" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/metadata_helpers.cc" bodystart="8" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="_metadata_definitions_8cc_1a6a0d1f59bf7c8b58d6aa737a22c8320c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mspass::utility::list_to_1str</definition>
        <argsstring>(list&lt; std::string &gt; &amp;l)</argsstring>
        <name>list_to_1str</name>
        <param>
          <type>list&lt; std::string &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" line="387" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="387" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="_metadata_definitions_8cc_1a5e3e3d2a60aa9b12b88c0fed0da8d3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MDtype</type>
        <definition>MDtype mspass::utility::str2mdt</definition>
        <argsstring>(string tstr)</argsstring>
        <name>str2mdt</name>
        <param>
          <type>string</type>
          <declname>tstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" line="401" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc" bodystart="401" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="_ms_p_a_s_s_error_8cc_1aea52e03c1a67a292b7080b9b72ef3956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ErrorSeverity</type>
        <definition>ErrorSeverity mspass::utility::string2severity</definition>
        <argsstring>(const string howbad)</argsstring>
        <name>string2severity</name>
        <param>
          <type>const string</type>
          <declname>howbad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" line="11" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/MsPASSError.cc" bodystart="11" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="_processing_history_8cc_1a62389fcaa5e15291550b690b46b29049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string mspass::utility::status_to_words</definition>
        <argsstring>(const ProcessingStatus status)</argsstring>
        <name>status_to_words</name>
        <param>
          <type>const ProcessingStatus</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" line="13" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="13" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="_processing_history_8cc_1a2f6f8bc035d9b5dea39ab99c2749944f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>list&lt; string &gt;</type>
        <definition>list&lt;string&gt; mspass::utility::algorithm_outputs</definition>
        <argsstring>(const ProcessingHistory &amp;h, const string alg, const string aid)</argsstring>
        <name>algorithm_outputs</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>alg</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>aid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" line="813" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="813" bodyend="825"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="8" column="1"/>
  </compounddef>
</doxygen>
