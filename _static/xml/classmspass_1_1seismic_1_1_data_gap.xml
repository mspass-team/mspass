<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmspass_1_1seismic_1_1_data_gap" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>mspass::seismic::DataGap</compoundname>
    <derivedcompoundref refid="classmspass_1_1seismic_1_1_seismogram_w_gaps" prot="public" virt="non-virtual">mspass::seismic::SeismogramWGaps</derivedcompoundref>
    <derivedcompoundref refid="classmspass_1_1seismic_1_1_time_series_w_gaps" prot="public" virt="non-virtual">mspass::seismic::TimeSeriesWGaps</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_data_gap_1ab83ccd2842b4d16b437cae78f41a1502" prot="protected" static="no" mutable="no">
        <type>std::set&lt; TimeWindow, <ref refid="classmspass_1_1seismic_1_1_time_window_cmp" kindref="compound">TimeWindowCmp</ref> &gt;</type>
        <definition>std::set&lt;TimeWindow,TimeWindowCmp&gt; mspass::seismic::DataGap::gaps</definition>
        <argsstring></argsstring>
        <name>gaps</name>
        <briefdescription>
<para>Holds data gap definitions. We use an STL set object to define data gaps for any time series object derived from this base class. The set is keyed by a TimeWindow which allows a simple, fast way to define a time range with invalid data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" line="80" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_data_gap_1a2d3e9e782c3422fcde7a022179aadce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::DataGap::is_gap</definition>
        <argsstring>(const int is)</argsstring>
        <name>is_gap</name>
        <param>
          <type>const int</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if a sample defined by an integer offset value is a data gap. Calls like seis.is_gap(is) return true if sample is is a data gap. It also returns true if i is outside the range of the data. (i.e. less than 0 or &gt;= ns). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>- sample number to test. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" line="31" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_data_gap_1adf3621238e5e44ac3c8fb014b24420b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::DataGap::is_gap</definition>
        <argsstring>(const double ttest)</argsstring>
        <name>is_gap</name>
        <param>
          <type>const double</type>
          <declname>ttest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if data at time ttest is a gap or valid data. This function is like the overloaded version with an int argument except it uses a time instead of sample number for the query. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ttest</parametername>
</parameternamelist>
<parameterdescription>
<para>- time to be tested. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" line="38" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_data_gap_1a52dcbddf4937cb18da6e3486ce8cf84c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::DataGap::is_gap</definition>
        <argsstring>(const TimeWindow twin)</argsstring>
        <name>is_gap</name>
        <param>
          <type>const TimeWindow</type>
          <declname>twin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if a given data segment has a gap. For efficiency it is often useful to ask if a whole segment of data is free of gaps. Most time series algorithms cannot process through data gaps so normal practice would be to drop data with any gaps in a requested time segment. <simplesect kind="return"><para>true if time segment has any data gaps </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>twin</parametername>
</parameternamelist>
<parameterdescription>
<para>time window of data to test defined by a TimeWindow object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" line="48" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_data_gap_1a965fe5d75c39296d2ea32641d7d8db69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::seismic::DataGap::has_gap</definition>
        <argsstring>()</argsstring>
        <name>has_gap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Global test to see if data has any gaps defined. Gap processing is expensive and we need this simple method to test to see if the associated object has any gaps defined. <simplesect kind="return"><para>true if the associated object has any gaps defined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" line="55" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" bodystart="55" bodyend="55"/>
        <references refid="classmspass_1_1seismic_1_1_data_gap_1ab83ccd2842b4d16b437cae78f41a1502" compoundref="_data_gap_8h" startline="80">gaps</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_data_gap_1afa1ba5dff45194cf4889131a67640392" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::DataGap::add_gap</definition>
        <argsstring>(const TimeWindow tw)</argsstring>
        <name>add_gap</name>
        <param>
          <type>const TimeWindow</type>
          <declname>tw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a gap to the gap definitions for this data object. Sometimes an algorithm detects or needs to create a gap (e.g. a mute, or a constructor). This function provides a common mechanism to define such a gap in the data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" line="62" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" bodystart="62" bodyend="62"/>
        <references refid="classmspass_1_1seismic_1_1_data_gap_1ab83ccd2842b4d16b437cae78f41a1502" compoundref="_data_gap_8h" startline="80">gaps</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_data_gap_1a8a5b2919df07147fe740a5d4f2af1908" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::seismic::DataGap::clear_gaps</definition>
        <argsstring>()</argsstring>
        <name>clear_gaps</name>
        <briefdescription>
<para>Clear gaps. </para>
        </briefdescription>
        <detaileddescription>
<para>It is sometimes necessary to clear gap definitions. This is particularly important when a descendent of this class is cloned and then morphed into something else. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" line="69" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" bodystart="69" bodyend="69"/>
        <references refid="classmspass_1_1seismic_1_1_data_gap_1ab83ccd2842b4d16b437cae78f41a1502" compoundref="_data_gap_8h" startline="80">gaps</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_data_gap_1ad57272fa5685b99efb01bd4c740900d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void mspass::seismic::DataGap::zero_gaps</definition>
        <argsstring>()=0</argsstring>
        <name>zero_gaps</name>
        <reimplementedby refid="classmspass_1_1seismic_1_1_seismogram_w_gaps_1a976c7e2ae15527497d22fa9e82fcb4ad">zero_gaps</reimplementedby>
        <reimplementedby refid="classmspass_1_1seismic_1_1_time_series_w_gaps_1a1bc9a6c4ae0b21b8acabd0c3ee240761">zero_gaps</reimplementedby>
        <briefdescription>
<para>virtual method for zeroing data gaps. </para>
        </briefdescription>
        <detaileddescription>
<para>Any object using this object needs to implement this method </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" line="73" column="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>mspass::seismic::DataGap</label>
        <link refid="classmspass_1_1seismic_1_1_data_gap"/>
      </node>
      <node id="3">
        <label>mspass::seismic::TimeSeriesWGaps</label>
        <link refid="classmspass_1_1seismic_1_1_time_series_w_gaps"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>mspass::seismic::SeismogramWGaps</label>
        <link refid="classmspass_1_1seismic_1_1_seismogram_w_gaps"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" line="21" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/DataGap.h" bodystart="22" bodyend="81"/>
    <listofallmembers>
      <member refid="classmspass_1_1seismic_1_1_data_gap_1afa1ba5dff45194cf4889131a67640392" prot="public" virt="non-virtual"><scope>mspass::seismic::DataGap</scope><name>add_gap</name></member>
      <member refid="classmspass_1_1seismic_1_1_data_gap_1a8a5b2919df07147fe740a5d4f2af1908" prot="public" virt="non-virtual"><scope>mspass::seismic::DataGap</scope><name>clear_gaps</name></member>
      <member refid="classmspass_1_1seismic_1_1_data_gap_1ab83ccd2842b4d16b437cae78f41a1502" prot="protected" virt="non-virtual"><scope>mspass::seismic::DataGap</scope><name>gaps</name></member>
      <member refid="classmspass_1_1seismic_1_1_data_gap_1a965fe5d75c39296d2ea32641d7d8db69" prot="public" virt="non-virtual"><scope>mspass::seismic::DataGap</scope><name>has_gap</name></member>
      <member refid="classmspass_1_1seismic_1_1_data_gap_1a2d3e9e782c3422fcde7a022179aadce1" prot="public" virt="non-virtual"><scope>mspass::seismic::DataGap</scope><name>is_gap</name></member>
      <member refid="classmspass_1_1seismic_1_1_data_gap_1adf3621238e5e44ac3c8fb014b24420b4" prot="public" virt="non-virtual"><scope>mspass::seismic::DataGap</scope><name>is_gap</name></member>
      <member refid="classmspass_1_1seismic_1_1_data_gap_1a52dcbddf4937cb18da6e3486ce8cf84c" prot="public" virt="non-virtual"><scope>mspass::seismic::DataGap</scope><name>is_gap</name></member>
      <member refid="classmspass_1_1seismic_1_1_data_gap_1ad57272fa5685b99efb01bd4c740900d6" prot="public" virt="pure-virtual"><scope>mspass::seismic::DataGap</scope><name>zero_gaps</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
