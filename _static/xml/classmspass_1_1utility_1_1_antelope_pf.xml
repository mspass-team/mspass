<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmspass_1_1utility_1_1_antelope_pf" kind="class" language="C++" prot="public">
    <compoundname>mspass::utility::AntelopePf</compoundname>
    <basecompoundref refid="classmspass_1_1utility_1_1_metadata" prot="public" virt="non-virtual">mspass::utility::Metadata</basecompoundref>
    <includes refid="_antelope_pf_8h" local="no">AntelopePf.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_antelope_pf_1af68f0652845742a384c6206aca60e489" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::list&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt;std::string,std::list&lt;std::string&gt; &gt; mspass::utility::AntelopePf::pftbls</definition>
        <argsstring></argsstring>
        <name>pftbls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="151" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_antelope_pf_1ae2055483c16df9d35067a3538fe48d8b" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> &gt;</type>
        <definition>std::map&lt;std::string, AntelopePf&gt; mspass::utility::AntelopePf::pfbranches</definition>
        <argsstring></argsstring>
        <name>pfbranches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="153" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1aec63cc4c7b66e36254ee469f09d50abb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AntelopePf::AntelopePf</definition>
        <argsstring>()</argsstring>
        <name>AntelopePf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor - does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="65" column="5" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1a35df43d52aca279262f4cb672cfe13ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AntelopePf::AntelopePf</definition>
        <argsstring>(std::string pfbase)</argsstring>
        <name>AntelopePf</name>
        <param>
          <type>std::string</type>
          <declname>pfbase</declname>
        </param>
        <briefdescription>
<para>Construct from a base pf name. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor acts like the antelope pfread function for parameter files constructed in plain C. That is, the argument is a base name sans the .pf extension. Like antelope&apos;s pfread it will follow the chain of directories defined by PFPATH. As with the antelope pfread procedure the last file read takes precendence. Note if PFPATH is not defined the path defaults to &quot;.&quot;. Further if pfbase begins with a slash (i.e. &quot;/&quot;) it is assumed to be the actual file name to read and the PFPATH feature is disabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfbase</parametername>
</parameternamelist>
<parameterdescription>
<para>is a the base pf name (always adds .pf to each name in PFPATH)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>-</parametername>
</parameternamelist>
<parameterdescription>
<para>throws a <ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref> object with an informative message if constuctor fails for any reason. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="82" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1a768ccdd08e9b1eaebc904852cd36b8b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AntelopePf::AntelopePf</definition>
        <argsstring>(std::list&lt; std::string &gt; lines)</argsstring>
        <name>AntelopePf</name>
        <param>
          <type>std::list&lt; std::string &gt;</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Construct from a set of text lines. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a cruder constructor that could be used for small pf file. Read the contents of a pf file into a vector of lines with each line being one line from the pf. The constructor then sequentially parses this series of lines as it would if reading from a file.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>is the modified version of the text pf file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="91" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1a7661b242706a2845f6b5225f42c8108b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::AntelopePf::AntelopePf</definition>
        <argsstring>(const AntelopePf &amp;parent)</argsstring>
        <name>AntelopePf</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="93" column="5" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="396" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1a64065097fb1ebc22192ce455cbeca3fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>list&lt; string &gt; mspass::utility::AntelopePf::get_tbl</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>get_tbl</name>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>get a Tbl component by key. </para>
        </briefdescription>
        <detaileddescription>
<para>Antelope has the idea of a tbl, which is a list of lines that are parsed independently. This is the get method to extract one of these by its key.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the key for the Tbl desired. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmspass_1_1utility_1_1_antelope_pf_error" kindref="compound">AntelopePfError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>will be thrown if the key is not present. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="103" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="402" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1a7853329ba52cc91460a435057e6a8e85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref></type>
        <definition>AntelopePf mspass::utility::AntelopePf::get_branch</definition>
        <argsstring>(const std::string key) const</argsstring>
        <name>get_branch</name>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>used for subtrees (nested Arrs in antelope) </para>
        </briefdescription>
        <detaileddescription>
<para>This method is used for nested Arr constructs. This returns a copy of the branch defined by key attached to this object. The original from the parent is retained.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the key used to locate this branch. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of the contents of the branch linked to key.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classmspass_1_1utility_1_1_antelope_pf_error" kindref="compound">AntelopePfError</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>will be thrown if the key is not found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="116" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="410" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1a118fb63722ad11707cb2fbd58df5f6e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>list&lt; string &gt; mspass::utility::AntelopePf::arr_keys</definition>
        <argsstring>() const</argsstring>
        <name>arr_keys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a list of keys for branches (Arrs) in the pf file. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="118" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="418" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1ada5c4a1b9407cb17a0fa953946473211" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>list&lt; string &gt; mspass::utility::AntelopePf::tbl_keys</definition>
        <argsstring>() const</argsstring>
        <name>tbl_keys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a list of keys for Tbls in the pf. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="120" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="426" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1adcf3ebf85924a353c9c2d8d6666c4068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref></type>
        <definition>Metadata mspass::utility::AntelopePf::ConvertToMetadata</definition>
        <argsstring>()</argsstring>
        <name>ConvertToMetadata</name>
        <briefdescription>
<para>Return an object with only simple name:value pairs. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> parent of this object only handles name:value pairs. The values can, however, be any object boost::any can handle. <linebreak/>
 The documentation says that means it is copy constructable. <linebreak/>
 For now this method returns an object containin the boost::any values. Any Arr and Tbl entries are pushed directly to the output <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> using boost::any and the two keys defined as const strings at the top of this file (pftbl_key and pfarr_key). <linebreak/>
</para>
<para><simplesect kind="return"><para><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> sans any Arr and Tbl entries. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="133" column="14" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="445" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1ac19f21b1716e98b66ea05fa4c128ce3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> &amp;</type>
        <definition>AntelopePf &amp; mspass::utility::AntelopePf::operator=</definition>
        <argsstring>(const AntelopePf &amp;parent)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator, </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="135" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="434" bodyend="444"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" compoundref="_metadata_8cc" startline="108" endline="116">mspass::utility::Metadata::operator=</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1af61da804652e1b6c6791147ae4b27aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::utility::AntelopePf::pfwrite</definition>
        <argsstring>(std::ostream &amp;ofs)</argsstring>
        <name>pfwrite</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ofs</declname>
        </param>
        <briefdescription>
<para>save result in a pf format. </para>
        </briefdescription>
        <detaileddescription>
<para>This is functionally equivalent to the Antelope pfwrite procedure, but is a member of this object. A feature of the current implementation is that all simply type parameters will usually be listed twice in the output file. The reason is that the constructor attempts to guess type, but to allow for mistakes all simple parameters are also treated as string variables so get methods are more robust.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ofs</parametername>
</parameternamelist>
<parameterdescription>
<para>is a std::ostream (e.g. cout) where the result will be written in pf style. Usually should end in &quot;.pf&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="149" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_antelope_pf_1acf072ded7086019499fa5c0068f38a66" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::utility::AntelopePf::merge_pfmf</definition>
        <argsstring>(AntelopePf &amp;m)</argsstring>
        <name>merge_pfmf</name>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="157" column="9" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AntelopePf.cc" bodystart="269" bodyend="301"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>C++ object version of a parameter file. </para>
    </briefdescription>
    <detaileddescription>
<para>This object encapsulates the Antelope concept of a parameter file in a single wrapper. The main constructor is actually act much like the Antelope pfread procedure. Internally this object does not use an antelope Pf at all directly, but it is a child of <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>. Simple attributes (i.e. key-value pairs) are posted directly to the <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> associative array (map) container. Note that the parser attempts to guess the type of each value given in the obvious ways (periods imply real numbers, e or E imply real numbers, etc.) but the algorithm used may not be foolproof. The get methods are from the <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object. Be warned like the <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object the type of an entry for a key can change and will be the last one set. <linebreak/>
 An Antelope Tbl in a pf file is converted to an stl list container of stl::string&apos;s that contain the input lines. This is a strong divergence from the tbl interface of Antelope, but one I judged a reasonable modernization. Similarly, Arr&apos;s are converted to what I am here calling a &quot;branch&quot;. Branches are map indexed containers with the key pointing to nested versions of this sampe object type. This is in keeping with the way Arr&apos;s are used in antelope, but with an object flavor instead of the pointer style of pfget_arr. Thus, get_branch returns a <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> object instead of a pointer that has to be memory managed. A final note about this beast is that the entire thing was created with a tacit assumption the object itself is not huge. i.e. this implementation may not scale well if applied to very large (millions) line pf files. This is a job for something like MongoDB. View this as a convenient format for building a <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> object. Note, a code fragment to use this to create lower level metadata would go like this: <ref refid="classmspass_1_1utility_1_1_antelope_pf" kindref="compound">AntelopePf</ref> pfdata(&quot;example&quot;); //parameter file constructor <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> md(dynamic_cast&lt;Metadata&amp;&gt;(pfdata);</para>
<para><simplesect kind="author"><para>Gary L. Pavlis, Indiana University</para>
</simplesect>
This version for MsPASS is derived from a similar thing called a PfStyleMetadata object in antelope contrib. <linebreak/>
 </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
      <node id="1">
        <label>mspass::utility::AntelopePf</label>
        <link refid="classmspass_1_1utility_1_1_antelope_pf"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
      <node id="1">
        <label>mspass::utility::AntelopePf</label>
        <link refid="classmspass_1_1utility_1_1_antelope_pf"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" line="61" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/AntelopePf.h" bodystart="62" bodyend="158"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1aec63cc4c7b66e36254ee469f09d50abb" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>AntelopePf</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1a35df43d52aca279262f4cb672cfe13ee" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>AntelopePf</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1a768ccdd08e9b1eaebc904852cd36b8b0" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>AntelopePf</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1a7661b242706a2845f6b5225f42c8108b" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>AntelopePf</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa288eb54e6fafb8af13f71e2f3dce4a2" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>append_chain</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1a118fb63722ad11707cb2fbd58df5f6e6" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>arr_keys</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af9aea7916d2b11f9f1e94b7d84b8db23" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>begin</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a20c1da469f6e0a073b291a680425f9e8" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>change_key</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1abaa3b11bec830a2ab4f93e79623af591" prot="protected" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>changed_or_set</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a610962d5ca59e48d1b2833e613bbad1d" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>clear_modified</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1adcf3ebf85924a353c9c2d8d6666c4068" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>ConvertToMetadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7f1e227ec1acaab97343ecbf47bedac4" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>end</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a096d3ea32cc03c3f9ae9c69cd9ee28ba" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>erase</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5d6876ed25c3f5d93052239ec828a3c5" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a991516933477580b6b59dd578819df06" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>get_any</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a2631da9d437572ee0781ed9bd96a3ed3" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>get_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1a7853329ba52cc91460a435057e6a8e85" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>get_branch</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad69a5786d997104df560775f4f688b02" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>get_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a78f3a01e1b1deccd84a0833bea4ef462" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>get_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7ace0c05ebb00b3c383cb8cccd225504" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>get_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa56da98a52f03babd67bf9fb55c40f3a" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>get_string</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1a64065097fb1ebc22192ce455cbeca3fb" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>get_tbl</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>is_defined</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a52e2040555616a39b900aa0831c3bd10" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>keys</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af564bb9ced4cc480d71a1e13c3fa582e" prot="protected" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>md</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1acf072ded7086019499fa5c0068f38a66" prot="private" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>merge_pfmf</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a4a87cd6a6f8fc5cdbee65cb85958cb2c" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5255fc3ae6accb650f221c9065a92eff" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afa617529be5501b6b059091118a1a51f" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a0fec2640022e944afe1ae1180e741da5" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>modified</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afbd50c491ecc4d42cf2b4213b8bc3327" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>operator+</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afadcdb42814abc1448a78d1d9f3d44aa" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>operator+=</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1ac19f21b1716e98b66ea05fa4c128ce3d" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::utility::AntelopePf</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1ae2055483c16df9d35067a3538fe48d8b" prot="private" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>pfbranches</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1af68f0652845742a384c6206aca60e489" prot="private" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>pftbls</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1af61da804652e1b6c6791147ae4b27aab" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>pfwrite</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab2162ed3e7349998ee06ace77645bf77" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aec776bbbbf8528903432d9b30d1272d8" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aefee14db8cda9c7143a0eb7bf2d1be1f" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a11ef6cbc1adec7964e2d9c3a4ead15b1" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab3989b1152e9b7b3dcce36aaec89f46d" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1adc016a9bb2288f1f0a7687cfa6844ceb" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa60d283b9eaae245294914557c723c30" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a45c295b33cdbcc297b7429235b81de9a" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1add02049febdc316d70d0fb62e96b2e36" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aafaa017f0e16f37a81a6abdb406a1e08" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5fe91d35373564958386f08915b7ce3c" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab1ede27ae9810767832f0879ccbfd234" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa8402af6778236df398ff0fe25911e21" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put_object</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5efd5678db951e3517c5667fefe93ddf" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>put_string</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a153ca69299a4d70aa0c6e69e8c70a767" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>size</name></member>
      <member refid="classmspass_1_1utility_1_1_antelope_pf_1ada5c4a1b9407cb17a0fa953946473211" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>tbl_keys</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad5cd3bfc81c7fccd83bbb30ef1c2774c" prot="public" virt="non-virtual"><scope>mspass::utility::AntelopePf</scope><name>type</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_metadata_1a1d7a9ab1e25e01694cc733ad2b98c6b7" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>~BasicMetadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a6d06560c0b169240031c6a274dc7990f" prot="public" virt="virtual"><scope>mspass::utility::AntelopePf</scope><name>~Metadata</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
