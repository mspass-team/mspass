<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmspass_1_1seismic_1_1_power_spectrum" kind="class" language="C++" prot="public">
    <compoundname>mspass::seismic::PowerSpectrum</compoundname>
    <basecompoundref refid="classmspass_1_1seismic_1_1_basic_spectrum" prot="public" virt="non-virtual">mspass::seismic::BasicSpectrum</basecompoundref>
    <basecompoundref refid="classmspass_1_1utility_1_1_metadata" prot="public" virt="non-virtual">mspass::utility::Metadata</basecompoundref>
    <includes refid="_power_spectrum_8h" local="no">PowerSpectrum.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_power_spectrum_1affca22f42c28a0fe251405b227674ce6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mspass::seismic::PowerSpectrum::spectrum_type</definition>
        <argsstring></argsstring>
        <name>spectrum_type</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::spectrum_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Descriptive name assigned by creator of algorithm used to generate it.</para>
<para>There are a number of different algorithms to generate power spectra. this name field should be used to set a unique name for a given algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="20" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_power_spectrum_1a924f5b005efdeef3f2da34355821e0c0" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref> &gt;</type>
        <definition>std::vector&lt;double&gt; mspass::seismic::PowerSpectrum::spectrum</definition>
        <argsstring></argsstring>
        <name>spectrum</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::spectrum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector of spectral estimates. spectrum[0] == estimate at f0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="22" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_power_spectrum_1a920cd0761252df4312168f4571165f2b" prot="public" static="no" mutable="no">
        <type><ref refid="classmspass_1_1utility_1_1_error_logger" kindref="compound">mspass::utility::ErrorLogger</ref></type>
        <definition>mspass::utility::ErrorLogger mspass::seismic::PowerSpectrum::elog</definition>
        <argsstring></argsstring>
        <name>elog</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::elog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MsPASS Error logging class.</para>
<para>MsPASS uses an error logger to allow posting of error messages that go with the data. That approach is needed in map reduce to allow the error messages to be cleanly preserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="28" column="32" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1a787087776cc0ca2b33e24e83cac5f801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::PowerSpectrum::PowerSpectrum</definition>
        <argsstring>()</argsstring>
        <name>PowerSpectrum</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::PowerSpectrum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Makes am empty, dead datum. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="30" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/PowerSpectrum.cc" bodystart="11" bodyend="14"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="472" endline="490">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1affca22f42c28a0fe251405b227674ce6" compoundref="_power_spectrum_8h" startline="20">spectrum_type</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1a7a93e1366099327d8b5b02788389e7ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">class</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>mspass::seismic::PowerSpectrum::PowerSpectrum</definition>
        <argsstring>(const mspass::utility::Metadata &amp;md, const std::vector&lt; T &gt; &amp;d, const double dfin, const std::string nm, const double f0in, const double dtin, const int npts_in)</argsstring>
        <name>PowerSpectrum</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::PowerSpectrum</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">mspass::utility::Metadata</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> std::vector&lt; <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">T</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
          <declname>dfin</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> std::string</type>
          <declname>nm</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
          <declname>f0in</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
          <declname>dtin</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">int</ref></type>
          <declname>npts_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard constructor template.</para>
<para>This constructor is a template largely to allow vectors of data other than double as inputs. If the input is not double it is converted on input to an std::vector&lt;double&gt; container stored in the spectrum attribute.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>contents of this Metadata container are copied to the result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of sample data to load into spectrum array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfin</parametername>
</parameternamelist>
<parameterdescription>
<para>frequency bin size (sample interval) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para>name defining algorithm used to constuct this spectral estimate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f0in</parametername>
</parameternamelist>
<parameterdescription>
<para>frequency of component 0 of input (default is 0.0). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtin</parametername>
</parameternamelist>
<parameterdescription>
<para>parent sampell interval of data used to make this estimate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>npts_in</parametername>
</parameternamelist>
<parameterdescription>
<para>number of points in parent time series used to compute this estimate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Fully parameterized constructor template.</para>
<para>See class definition of <ref refid="classmspass_1_1seismic_1_1_power_spectrum" kindref="compound">PowerSpectrum</ref> for usage. Template to allow data vector of multiple types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="47" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" bodystart="109" bodyend="121"/>
        <references refid="classmspass_1_1seismic_1_1_basic_spectrum_1a2abdea1d94e0ec8753a09eb2cf20a290" compoundref="_basic_spectrum_8h" startline="94" endline="94">mspass::seismic::BasicSpectrum::set_live</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1a924f5b005efdeef3f2da34355821e0c0" compoundref="_power_spectrum_8h" startline="22">spectrum</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1affca22f42c28a0fe251405b227674ce6" compoundref="_power_spectrum_8h" startline="20">spectrum_type</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1a377c8508a72f2aff53da0d528de12bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::PowerSpectrum::PowerSpectrum</definition>
        <argsstring>(const PowerSpectrum &amp;parent)</argsstring>
        <name>PowerSpectrum</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::PowerSpectrum</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_power_spectrum" kindref="compound">PowerSpectrum</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="54" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/PowerSpectrum.cc" bodystart="15" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1a5045c9886a94320a3f351058cd3d6ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_power_spectrum" kindref="compound">PowerSpectrum</ref> &amp;</type>
        <definition>PowerSpectrum &amp; mspass::seismic::PowerSpectrum::operator=</definition>
        <argsstring>(const PowerSpectrum &amp;parent)</argsstring>
        <name>operator=</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::operator=</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_power_spectrum" kindref="compound">PowerSpectrum</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="55" column="17" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/PowerSpectrum.cc" bodystart="23" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1a8306434c52e142797c227fed6f91fd82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_power_spectrum" kindref="compound">PowerSpectrum</ref> &amp;</type>
        <definition>PowerSpectrum &amp; mspass::seismic::PowerSpectrum::operator+=</definition>
        <argsstring>(const PowerSpectrum &amp;other)</argsstring>
        <name>operator+=</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::operator+=</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_power_spectrum" kindref="compound">PowerSpectrum</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Standard accumulation operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Sometimes we need to sum power spectra. Type examplel would be total noise amplitude on a 3C seismogram or average noise amplitude in an array of instruments. This can be used to build such sum in the usual way. Add spectral elements sample by sample.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>will</parametername>
</parameternamelist>
<parameterdescription>
<para>throw a MsPaSSError if the left and right side are not equal length of have different f0 of df values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="65" column="17" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/PowerSpectrum.cc" bodystart="35" bodyend="81"/>
        <references refid="classmspass_1_1seismic_1_1_basic_spectrum_1ac01289c8a10cc1939f51d51f3c1cdb72" compoundref="_basic_spectrum_8h" startline="96" endline="96">mspass::seismic::BasicSpectrum::df</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1a920cd0761252df4312168f4571165f2b" compoundref="_power_spectrum_8h" startline="28">elog</references>
        <references refid="classmspass_1_1seismic_1_1_basic_spectrum_1adcbe20cedb4c2a1f0ed31466e8f70c13" compoundref="_basic_spectrum_8h" startline="101" endline="101">mspass::seismic::BasicSpectrum::f0</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="472" endline="490">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_basic_spectrum_1a7400b002f21460fece1d5519dfbc26c7" compoundref="_basic_spectrum_8h" startline="87" endline="87">mspass::seismic::BasicSpectrum::kill</references>
        <references refid="classmspass_1_1utility_1_1_error_logger_1aa69873ba0aebf67e9ba24d01992c0bcf" compoundref="_error_logger_8cc" startline="81" endline="86">mspass::utility::ErrorLogger::log_error</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1a7675c66d7f1aa8d7b4e9437564af4beb" compoundref="_power_spectrum_8h" startline="97" endline="97">nf</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1a924f5b005efdeef3f2da34355821e0c0" compoundref="_power_spectrum_8h" startline="22">spectrum</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1abbfb81f3ad4a3f0a1488b869a60148a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref> &gt;</type>
        <definition>vector&lt; double &gt; mspass::seismic::PowerSpectrum::amplitude</definition>
        <argsstring>() const</argsstring>
        <name>amplitude</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::amplitude</qualifiedname>
        <briefdescription>
<para>Compute amplitude spectrum from power spectrum. </para>
        </briefdescription>
        <detaileddescription>
<para>The amplitude spectrum is sqrt of the power values. This is a convenience class to return the values in that form. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="70" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/PowerSpectrum.cc" bodystart="82" bodyend="89"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="472" endline="490">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1a924f5b005efdeef3f2da34355821e0c0" compoundref="_power_spectrum_8h" startline="22">spectrum</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1a3d1e72618b8e88c5929839c5e8885859" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
        <definition>double mspass::seismic::PowerSpectrum::power</definition>
        <argsstring>(const double f) const</argsstring>
        <name>power</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::power</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>power at a given frequency. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the power estimate at a specified frequency. Uses a linear interpolation between nearest neighbors. Returns the frequency exceeds the Nyquist silently returns 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>is the frequency for which amplitude is desired.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSErorr</parametername>
</parameternamelist>
<parameterdescription>
<para>object will be throw f f is less than 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="81" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/PowerSpectrum.cc" bodystart="90" bodyend="105"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="472" endline="490">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1a924f5b005efdeef3f2da34355821e0c0" compoundref="_power_spectrum_8h" startline="22">spectrum</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1ad2f979f7662aba3e46f277d9c45fd07d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
        <definition>double mspass::seismic::PowerSpectrum::frequency</definition>
        <argsstring>(const int sample_number) const</argsstring>
        <name>frequency</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::frequency</qualifiedname>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_spectrum_1a076bd1632ad16165c842115fd2aab6a9">frequency</reimplements>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">int</ref></type>
          <declname>sample_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return frequency at a specified sample number. Virtual to allow subclasses to throw an error for illegal value. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="83" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" bodystart="83" bodyend="91"/>
        <references refid="classmspass_1_1seismic_1_1_basic_spectrum_1ac01289c8a10cc1939f51d51f3c1cdb72" compoundref="_basic_spectrum_8h" startline="96" endline="96">mspass::seismic::BasicSpectrum::df</references>
        <references refid="classmspass_1_1seismic_1_1_basic_spectrum_1adcbe20cedb4c2a1f0ed31466e8f70c13" compoundref="_basic_spectrum_8h" startline="101" endline="101">mspass::seismic::BasicSpectrum::f0</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1a7675c66d7f1aa8d7b4e9437564af4beb" compoundref="_power_spectrum_8h" startline="97" endline="97">nf</references>
        <references refid="classmspass_1_1seismic_1_1_basic_spectrum_1a1cb29c54744c06553765a3966c8b970f" compoundref="_basic_spectrum_8h" startline="128" endline="147">mspass::seismic::BasicSpectrum::sample_number</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1a1ef20f133212a6288e301e5d80f87a85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref> &gt;</type>
        <definition>std::vector&lt; double &gt; mspass::seismic::PowerSpectrum::frequencies</definition>
        <argsstring>() const</argsstring>
        <name>frequencies</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::frequencies</qualifiedname>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_spectrum_1ad0e29676af3782c4ed1efb228ef7637a">frequencies</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an std::vector container containing the frequency of each sample in the spectrum vector. Commonly necessary for plotting. Made virtual because nf method needs to be virtual. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="92" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/PowerSpectrum.cc" bodystart="106" bodyend="112"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="472" endline="490">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1a7675c66d7f1aa8d7b4e9437564af4beb" compoundref="_power_spectrum_8h" startline="97" endline="97">nf</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1a7675c66d7f1aa8d7b4e9437564af4beb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">size_t</ref></type>
        <definition>size_t mspass::seismic::PowerSpectrum::nf</definition>
        <argsstring>() const</argsstring>
        <name>nf</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::nf</qualifiedname>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_spectrum_1a830fc9c8135253aeae01ffd80746b413">nf</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of frequency bin. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="97" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" bodystart="97" bodyend="97"/>
        <references refid="classmspass_1_1seismic_1_1_power_spectrum_1a924f5b005efdeef3f2da34355821e0c0" compoundref="_power_spectrum_8h" startline="22">spectrum</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_power_spectrum_1aef0b54806f9e5367df7dfa03804a2f87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
        <definition>double mspass::seismic::PowerSpectrum::Nyquist</definition>
        <argsstring>() const</argsstring>
        <name>Nyquist</name>
        <qualifiedname>mspass::seismic::PowerSpectrum::Nyquist</qualifiedname>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_spectrum_1af11c7d672337c3f89c3e063ecf1be4a5">Nyquist</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the nyquist frequency for this estimate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="99" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" bodystart="99" bodyend="101"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class defining the concept of a power psectrum. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>mspass::seismic::BasicSpectrum</label>
        <link refid="classmspass_1_1seismic_1_1_basic_spectrum"/>
      </node>
      <node id="1">
        <label>mspass::seismic::PowerSpectrum</label>
        <link refid="classmspass_1_1seismic_1_1_power_spectrum"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
      <node id="3">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>mspass::seismic::BasicSpectrum</label>
        <link refid="classmspass_1_1seismic_1_1_basic_spectrum"/>
      </node>
      <node id="1">
        <label>mspass::seismic::PowerSpectrum</label>
        <link refid="classmspass_1_1seismic_1_1_power_spectrum"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elog</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
      <node id="5">
        <label>mspass::utility::ErrorLogger</label>
        <link refid="classmspass_1_1utility_1_1_error_logger"/>
      </node>
      <node id="3">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" line="11" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/PowerSpectrum.h" bodystart="13" bodyend="102"/>
    <listofallmembers>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1abbfb81f3ad4a3f0a1488b869a60148a2" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>amplitude</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa288eb54e6fafb8af13f71e2f3dce4a2" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>append_chain</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1ae2c68571058526795e0424e0a76e4e76" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>BasicSpectrum</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1ad6606996a02b573faf65312459352bfc" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>BasicSpectrum</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a33b44b4ba519e94e51af81a407753cf9" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>BasicSpectrum</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af9aea7916d2b11f9f1e94b7d84b8db23" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>begin</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a20c1da469f6e0a073b291a680425f9e8" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>change_key</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1abaa3b11bec830a2ab4f93e79623af591" prot="protected" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>changed_or_set</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a610962d5ca59e48d1b2833e613bbad1d" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>clear_modified</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a331f89b8216f9717ac906e922d7c2cff" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>dead</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1ac01289c8a10cc1939f51d51f3c1cdb72" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>df</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1aa8b09300420826a09dcfd44783cce21b" prot="protected" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>dfval</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a2155e90cad5c857f326d4399fd276755" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a920cd0761252df4312168f4571165f2b" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>elog</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7f1e227ec1acaab97343ecbf47bedac4" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>end</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a096d3ea32cc03c3f9ae9c69cd9ee28ba" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>erase</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1adcbe20cedb4c2a1f0ed31466e8f70c13" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>f0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a3889a47eac3ae9c201f95eb70d9518a4" prot="protected" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>f0val</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a1ef20f133212a6288e301e5d80f87a85" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>frequencies</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1ad2f979f7662aba3e46f277d9c45fd07d" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>frequency</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5d6876ed25c3f5d93052239ec828a3c5" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a991516933477580b6b59dd578819df06" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>get_any</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a2631da9d437572ee0781ed9bd96a3ed3" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>get_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad69a5786d997104df560775f4f688b02" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>get_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a78f3a01e1b1deccd84a0833bea4ef462" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>get_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7ace0c05ebb00b3c383cb8cccd225504" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>get_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa56da98a52f03babd67bf9fb55c40f3a" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>get_string</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>is_defined</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a266cf681e4001dffaf775aa223f8438b" prot="protected" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>is_live</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a52e2040555616a39b900aa0831c3bd10" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>keys</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a7400b002f21460fece1d5519dfbc26c7" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>kill</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a2bce24e09412434ec968bed19ec9843d" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>live</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af564bb9ced4cc480d71a1e13c3fa582e" prot="protected" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>md</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a4a87cd6a6f8fc5cdbee65cb85958cb2c" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5255fc3ae6accb650f221c9065a92eff" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afa617529be5501b6b059091118a1a51f" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad42258d0cd85b4a3e28eb1448cafe62e" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>modified</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a7675c66d7f1aa8d7b4e9437564af4beb" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>nf</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1aef0b54806f9e5367df7dfa03804a2f87" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>Nyquist</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afbd50c491ecc4d42cf2b4213b8bc3327" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>operator+</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a8306434c52e142797c227fed6f91fd82" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>operator+=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afadcdb42814abc1448a78d1d9f3d44aa" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::seismic::PowerSpectrum</scope><name>operator+=</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a5045c9886a94320a3f351058cd3d6ea3" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1aa63e2972ed9ef383efdf76a9b6f837a0" prot="public" virt="non-virtual" ambiguityscope="mspass::seismic::BasicSpectrum::"><scope>mspass::seismic::PowerSpectrum</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::seismic::PowerSpectrum</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1aeba1d53ba50676257c3cb5fec2f691c8" prot="protected" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>parent_dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a2f2d159e0b767fac81f7b755e5debbc8" prot="protected" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>parent_npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a3d1e72618b8e88c5929839c5e8885859" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>power</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a787087776cc0ca2b33e24e83cac5f801" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>PowerSpectrum</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a7a93e1366099327d8b5b02788389e7ee" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>PowerSpectrum</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a377c8508a72f2aff53da0d528de12bb7" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>PowerSpectrum</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab2162ed3e7349998ee06ace77645bf77" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aec776bbbbf8528903432d9b30d1272d8" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aefee14db8cda9c7143a0eb7bf2d1be1f" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a11ef6cbc1adec7964e2d9c3a4ead15b1" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab3989b1152e9b7b3dcce36aaec89f46d" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1adc016a9bb2288f1f0a7687cfa6844ceb" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa60d283b9eaae245294914557c723c30" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a45c295b33cdbcc297b7429235b81de9a" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1add02049febdc316d70d0fb62e96b2e36" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aafaa017f0e16f37a81a6abdb406a1e08" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5fe91d35373564958386f08915b7ce3c" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab1ede27ae9810767832f0879ccbfd234" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa8402af6778236df398ff0fe25911e21" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put_object</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5efd5678db951e3517c5667fefe93ddf" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>put_string</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a61c04d4d4a98d4135d3f5e0b59cc85b3" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>rayleigh</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a1cb29c54744c06553765a3966c8b970f" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>sample_number</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1af690c2deac6b3c2306c15fee9c452a1b" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>set_df</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a73a8f75cf63421c696379f57f207a93f" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>set_dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a59236bc56e298b485927defff353de70" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>set_f0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a2abdea1d94e0ec8753a09eb2cf20a290" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>set_live</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a85f411357320b26e22e9d116faa3abe2" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>set_npts</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a153ca69299a4d70aa0c6e69e8c70a767" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>size</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1a924f5b005efdeef3f2da34355821e0c0" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>spectrum</name></member>
      <member refid="classmspass_1_1seismic_1_1_power_spectrum_1affca22f42c28a0fe251405b227674ce6" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>spectrum_type</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1a436535a1b2f05e518fc4dc884da2e512" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>timeseries_npts</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad5cd3bfc81c7fccd83bbb30ef1c2774c" prot="public" virt="non-virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>type</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_metadata_1a1d7a9ab1e25e01694cc733ad2b98c6b7" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>~BasicMetadata</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_spectrum_1ac7b01555a28ce9de3630eb24f4dc9173" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>~BasicSpectrum</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a6d06560c0b169240031c6a274dc7990f" prot="public" virt="virtual"><scope>mspass::seismic::PowerSpectrum</scope><name>~Metadata</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
