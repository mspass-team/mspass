<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmspass_1_1utility_1_1_metadata_get_error" kind="class" language="C++" prot="public">
    <compoundname>mspass::utility::MetadataGetError</compoundname>
    <basecompoundref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" prot="public" virt="non-virtual">mspass::utility::MsPASSError</basecompoundref>
    <includes refid="_metadata_8h" local="no">Metadata.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_metadata_get_error_1a07365c5fe97f19ab6d4a3d424f4ddcc6" prot="public" static="no" mutable="no">
        <type>std::stringstream</type>
        <definition>std::stringstream mspass::utility::MetadataGetError::ss</definition>
        <argsstring></argsstring>
        <name>ss</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="25" column="21" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_get_error_1aed2c0cb6144d56a95bceeb5176bbe569" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::MetadataGetError::MetadataGetError</definition>
        <argsstring>()</argsstring>
        <name>MetadataGetError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="26" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_get_error_1abed3080ca93a137df98dc3586b8ac777" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::MetadataGetError::MetadataGetError</definition>
        <argsstring>(const std::string key, const char *Texpected)</argsstring>
        <name>MetadataGetError</name>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Texpected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor called when a key is not found in the <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Texpected</parametername>
</parameternamelist>
<parameterdescription>
<para>is the type name (return of typeid name method) trying to extract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="29" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" bodystart="29" bodyend="38"/>
        <references refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1af808615110822967a251108b20708f51" compoundref="_ms_p_a_s_s_error_8h" startline="116">mspass::utility::MsPASSError::badness</references>
        <references refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1a47e9d74154f088f38fd7e5219abc81f5" compoundref="_ms_p_a_s_s_error_8h" startline="109">mspass::utility::MsPASSError::message</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_get_error_1a8e9ab0f856d4936e98fd614da5e83ff9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::MetadataGetError::MetadataGetError</definition>
        <argsstring>(const char *boostmessage, const std::string key, const char *Texpected, const char *Tactual)</argsstring>
        <name>MetadataGetError</name>
        <param>
          <type>const char *</type>
          <declname>boostmessage</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Texpected</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Tactual</declname>
        </param>
        <briefdescription>
<para>Constructor called when type requested does not match contents. </para>
        </briefdescription>
        <detaileddescription>
<para>This implementation uses a pickle style map container where the contents of the map can by any type. We use boost::any to provide sanity checks on types. This is creates the error message thrown when the type of the return does not match the type requested. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="45" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" bodystart="45" bodyend="58"/>
        <references refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1af808615110822967a251108b20708f51" compoundref="_ms_p_a_s_s_error_8h" startline="116">mspass::utility::MsPASSError::badness</references>
        <references refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1a47e9d74154f088f38fd7e5219abc81f5" compoundref="_ms_p_a_s_s_error_8h" startline="109">mspass::utility::MsPASSError::message</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_get_error_1a127c004dbfe93ba17259ec320b34fdfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::MetadataGetError::MetadataGetError</definition>
        <argsstring>(const MetadataGetError &amp;parent)</argsstring>
        <name>MetadataGetError</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata_get_error" kindref="compound">MetadataGetError</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="59" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_metadata_get_error_1add785f65915c4f138850dbf86b0a9cd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_get_error" kindref="compound">MetadataGetError</ref></type>
        <definition>MetadataGetError mspass::utility::MetadataGetError::operator=</definition>
        <argsstring>(const MetadataGetError &amp;parent)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_metadata_get_error" kindref="compound">MetadataGetError</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="64" column="20" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" bodystart="64" bodyend="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Error thrown when get operators fail. </para>
    </briefdescription>
    <detaileddescription>
<para>This is a convenience class used to construct a more informative set of errors when get operations fail. <linebreak/>
 </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>mspass::utility::MsPASSError</label>
        <link refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="1">
        <label>mspass::utility::MetadataGetError</label>
        <link refid="classmspass_1_1utility_1_1_metadata_get_error"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>mspass::utility::MsPASSError</label>
        <link refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="1">
        <label>mspass::utility::MetadataGetError</label>
        <link refid="classmspass_1_1utility_1_1_metadata_get_error"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" line="22" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/Metadata.h" bodystart="23" bodyend="73"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1af808615110822967a251108b20708f51" prot="protected" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>badness</name></member>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1ab66bb8b76a50addea48e18663744ca94" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>log_error</name></member>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1a9c44cc909971a1c5f8d443f12b5d45ed" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>log_error</name></member>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1a47e9d74154f088f38fd7e5219abc81f5" prot="protected" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>message</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_get_error_1aed2c0cb6144d56a95bceeb5176bbe569" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>MetadataGetError</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_get_error_1abed3080ca93a137df98dc3586b8ac777" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>MetadataGetError</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_get_error_1a8e9ab0f856d4936e98fd614da5e83ff9" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>MetadataGetError</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_get_error_1a127c004dbfe93ba17259ec320b34fdfd" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>MetadataGetError</name></member>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1a19f527c5f3f2e761e51c9b2d478d02c6" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>MsPASSError</name></member>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1a78088c104a7c2a47e41ce8ecdf5513cd" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>MsPASSError</name></member>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1a0f75099c3f9c8130b44398601753745f" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>MsPASSError</name></member>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1af209344a8eb784695556f02b7df481c9" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>MsPASSError</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_get_error_1add785f65915c4f138850dbf86b0a9cd1" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1a3393c3878bee1728628fd3e063640d94" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>severity</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_get_error_1a07365c5fe97f19ab6d4a3d424f4ddcc6" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>ss</name></member>
      <member refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error_1ae47776d160eafa42f854be5bf47e00a8" prot="public" virt="non-virtual"><scope>mspass::utility::MetadataGetError</scope><name>what</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
