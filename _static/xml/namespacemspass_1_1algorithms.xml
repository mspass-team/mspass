<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacemspass_1_1algorithms" kind="namespace" language="C++">
    <compoundname>mspass::algorithms</compoundname>
    <innerclass refid="classmspass_1_1algorithms_1_1_butterworth" prot="public">mspass::algorithms::Butterworth</innerclass>
    <innerclass refid="classmspass_1_1algorithms_1_1_basic_taper" prot="public">mspass::algorithms::BasicTaper</innerclass>
    <innerclass refid="classmspass_1_1algorithms_1_1_linear_taper" prot="public">mspass::algorithms::LinearTaper</innerclass>
    <innerclass refid="classmspass_1_1algorithms_1_1_cosine_taper" prot="public">mspass::algorithms::CosineTaper</innerclass>
    <innerclass refid="classmspass_1_1algorithms_1_1_vector_taper" prot="public">mspass::algorithms::VectorTaper</innerclass>
    <innerclass refid="classmspass_1_1algorithms_1_1_top_mute" prot="public">mspass::algorithms::TopMute</innerclass>
    <innerclass refid="classmspass_1_1algorithms_1_1_time_window" prot="public">mspass::algorithms::TimeWindow</innerclass>
    <innerclass refid="classmspass_1_1algorithms_1_1_time_window_cmp" prot="public">mspass::algorithms::TimeWindowCmp</innerclass>
    <innerclass refid="structmspass_1_1algorithms_1_1greater__seedorder" prot="public">mspass::algorithms::greater_seedorder</innerclass>
    <innerclass refid="classmspass_1_1algorithms_1_1_segment_vector_properties" prot="public">mspass::algorithms::SegmentVectorProperties</innerclass>
    <innernamespace refid="namespacemspass_1_1algorithms_1_1amplitudes">mspass::algorithms::amplitudes</innernamespace>
    <innernamespace refid="namespacemspass_1_1algorithms_1_1deconvolution">mspass::algorithms::deconvolution</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="algorithms_8h_1ae367c50f064c9ecfb2f81c8727cf9871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref></type>
        <definition>TimeSeries mspass::algorithms::agc</definition>
        <argsstring>(mspass::seismic::Seismogram &amp;d, const double twin)</argsstring>
        <name>agc</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>twin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/agc.cc" line="22" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/agc.cc" bodystart="22" bodyend="163" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="36" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1a284b2feb1d76ac68476d7e3065a6b714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref></type>
        <definition>Seismogram mspass::algorithms::WindowData</definition>
        <argsstring>(const mspass::seismic::Seismogram &amp;parent, const mspass::algorithms::TimeWindow &amp;tw)</argsstring>
        <name>WindowData</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">mspass::algorithms::TimeWindow</ref> &amp;</type>
          <declname>tw</declname>
        </param>
        <briefdescription>
<para>Extracts a requested time window of data from a parent Seismogram object. </para>
        </briefdescription>
        <detaileddescription>
<para>It is common to need to extract a smaller segment of data from a larger time window of data. This function accomplishes this in a nifty method that takes advantage of the methods contained in the BasicTimeSeries object for handling time.</para>
<para>This function will kill the return data and return a version with no sample data if the window time range does not enclose the time range of the data. In that case a message is left on elog to allow post mortem analysis of data in parallel constructs.</para>
<para><simplesect kind="return"><para>new Seismgram object derived from parent but windowed by input time window range.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>is the larger Seismogram object to be windowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data range to be extracted from parent.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
It is common to need to extract a smaller segment of data from a larger time window of data. This function accomplishes this in a nifty method that takes advantage of the methods contained in the BasicTimeSeries object for handling time.</para>
<para>This function differs from the CoreSeismogram version in error handling. It follows the MsPASS model of posting errors to elog and returning a dead object for unrecoverable errors.</para>
<para><simplesect kind="return"><para>new Seismogram object derived from parent but windowed by input time window range.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>object if the requested time window is not inside data range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>is the larger Seismogram object to be windowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data range to be extracted from parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/slice_and_dice.cc" line="154" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/slice_and_dice.cc" bodystart="154" bodyend="233" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="55" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1a1fac5643ae6b685a2f75ce6614fe1531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">mspass::seismic::CoreSeismogram</ref></type>
        <definition>CoreSeismogram mspass::algorithms::WindowData</definition>
        <argsstring>(const mspass::seismic::CoreSeismogram &amp;parent, const mspass::algorithms::TimeWindow &amp;tw)</argsstring>
        <name>WindowData</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">mspass::seismic::CoreSeismogram</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">mspass::algorithms::TimeWindow</ref> &amp;</type>
          <declname>tw</declname>
        </param>
        <briefdescription>
<para>Extracts a requested time window of data from a parent CoreSeismogram object. </para>
        </briefdescription>
        <detaileddescription>
<para>Extracts a requested time window of data from a parent coreSeismogram object.</para>
<para>It is common to need to extract a smaller segment of data from a larger time window of data. This function accomplishes this in a nifty method that takes advantage of the methods contained in the BasicTimeSeries object for handling time. Differs from the overloaded Seismogram version because it will throw an exception if given an invalid window.</para>
<para><simplesect kind="return"><para>new CoreSeismgram object derived from parent but windowed by input time window range.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>object if the requested time window is not inside data range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>is the larger Seismogram object to be windowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data range to be extracted from parent.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
It is common to need to extract a smaller segment of data from a larger time window of data. This function accomplishes this in a nifty method that takes advantage of the methods contained in the BasicTimeSeries object for handling time.</para>
<para><simplesect kind="return"><para>new CoreSeismogram object derived from parent but windowed by input time window range.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>object if the requested time window is not inside data range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>is the larger CoreSeismogram object to be windowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data range to be extracted from parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/slice_and_dice.cc" line="28" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/slice_and_dice.cc" bodystart="28" bodyend="74" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="74" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1a13a1140230c63d16c000bd23b400ee37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref></type>
        <definition>TimeSeries mspass::algorithms::WindowData</definition>
        <argsstring>(const mspass::seismic::TimeSeries &amp;parent, const mspass::algorithms::TimeWindow &amp;tw)</argsstring>
        <name>WindowData</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">mspass::algorithms::TimeWindow</ref> &amp;</type>
          <declname>tw</declname>
        </param>
        <briefdescription>
<para>Extracts a requested time window of data from a parent TimeSeries object. </para>
        </briefdescription>
        <detaileddescription>
<para>It is common to need to extract a smaller segment of data from a larger time window of data. This is a bombproof algorithm to accomplish that low level task for TimeSeries objects.</para>
<para>This function will kill the return data and return a version with no sample data if the window time range does not enclose the time range of the data. In that case a message is left on elog to allow post mortem analysis of data in parallel constructs.</para>
<para><simplesect kind="return"><para>new Seismgram object derived from parent but windowed by input time window range.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>is the larger TimeSeries object to be windowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data range to be extracted from parent.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
It is common to need to extract a smaller segment of data from a larger time window of data. This function accomplishes this in a nifty method that takes advantage of the methods contained in the BasicTimeSeries object for handling time.</para>
<para><simplesect kind="return"><para>new Seismgram object derived from parent but windowed by input time window range.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>object if the requested time window is not inside data range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>is the larger TimeSeries object to be windowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data range to be extracted from parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/slice_and_dice.cc" line="249" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/slice_and_dice.cc" bodystart="249" bodyend="316" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="94" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1ac6dcc4234af86fe3a7f7ca584b52b011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">mspass::seismic::CoreTimeSeries</ref></type>
        <definition>CoreTimeSeries mspass::algorithms::WindowData</definition>
        <argsstring>(const mspass::seismic::CoreTimeSeries &amp;parent, const mspass::algorithms::TimeWindow &amp;tw)</argsstring>
        <name>WindowData</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">mspass::seismic::CoreTimeSeries</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">mspass::algorithms::TimeWindow</ref> &amp;</type>
          <declname>tw</declname>
        </param>
        <briefdescription>
<para>Extracts a requested time window of data from a parent CoreTimeSeries object. </para>
        </briefdescription>
        <detaileddescription>
<para>It is common to need to extract a smaller segment of data from a larger time window of data. This function accomplishes this in a nifty method that takes advantage of the methods contained in the BasicTimeSeries object for handling time.</para>
<para><simplesect kind="return"><para>new CoreTimeSeries object derived from parent but windowed by input time window range.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>object if the requested time window is not inside data range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>is the larger CoreTimeSeries object to be windowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data range to be extracted from parent.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
It is common to need to extract a smaller segment of data from a larger time window of data. This function accomplishes this in a nifty method that takes advantage of the methods contained in the BasicCoreTimeSeries object for handling time.</para>
<para><simplesect kind="return"><para>new Seismgram object derived from parent but windowed by input time window range.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>object if the requested time window is not inside data range</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>is the larger CoreTimeSeries object to be windowed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the data range to be extracted from parent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/slice_and_dice.cc" line="90" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/slice_and_dice.cc" bodystart="90" bodyend="133" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="112" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1af8a67b73e9e7380165e52ac6d084de74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &gt;</type>
        <definition>std::shared_ptr&lt;mspass::seismic::Seismogram&gt; mspass::algorithms::ArrivalTimeReference</definition>
        <argsstring>(mspass::seismic::Seismogram &amp;din, std::string key, mspass::algorithms::TimeWindow tw)</argsstring>
        <name>ArrivalTimeReference</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &amp;</type>
          <declname>din</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">mspass::algorithms::TimeWindow</ref></type>
          <declname>tw</declname>
        </param>
        <briefdescription>
<para>Return a new Seismogram in an arrival time (relative) refernce frame. </para>
        </briefdescription>
        <detaileddescription>
<para>An arrival time reference means that the time is set to relative and zero is defined as an arrival time extracted from the metadata area of the object. The key used to extract the arrival time used for the conversion is passed as a variable as this requires some flexibility. To preserve the absolute time standard in this conversion the 0 time computed from the arrival time field is used to compute the absolute time of the start of the output seismogram as atime+t0. This result is stored in the metadata field keyed by the word &quot;time&quot;. This allows one to convert the data back to an absolute time standard if they so desire, but it is less flexible than the input key method.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>SeisppError</parametername>
</parameternamelist>
<parameterdescription>
<para>for errors in extracting required information from metadata area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>din</parametername>
</parameternamelist>
<parameterdescription>
<para>is input seismogram </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the metadata key used to find the arrival time to use as a reference. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>is a <ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">TimeWindow</ref> object that defines the window of data to extract around the desired arrival time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" line="137" column="17" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="137" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1a19d44e8cfc241d0d36787df6decc7832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref></type>
        <definition>TimeSeries mspass::algorithms::ExtractComponent</definition>
        <argsstring>(const mspass::seismic::Seismogram &amp;tcs, const unsigned int component)</argsstring>
        <name>ExtractComponent</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &amp;</type>
          <declname>tcs</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>component</declname>
        </param>
        <briefdescription>
<para>Extract one component from a Seismogram and create a TimeSeries object from it. </para>
        </briefdescription>
        <detaileddescription>
<para>Copies all Metadata from parent Seismogram to build a TimeSeries object. This will often leave relics of the transformation matrix components in the header so be aware. If the processing history section is not marked as empty new_map will be called to record this algorithm was involked. The algid saved is internally set to the form &quot;component=n&quot; where n is 0, 1, or 2. With one simple argument the baggage of maintaining that detail seems unnecessary. This is a variant that may cause problems downstream so I&apos;m noting that to be aware as this system develops.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tcs</parametername>
</parameternamelist>
<parameterdescription>
<para>is the Seismogram to convert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>component</parametername>
</parameternamelist>
<parameterdescription>
<para>is the component to extract (0, 1, or 2)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>This</parametername>
</parameternamelist>
<parameterdescription>
<para>function will throw a MsPASSError if the component number is illegal</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TimeSeries of component requested </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" line="190" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" bodystart="190" bodyend="257" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="160" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1aeec9c9f728fd909f3c438b78124a22fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="namespacemspass_1_1seismic_1accd4b8b7754c4bec01071aad61edf3cc" kindref="member">mspass::seismic::ThreeComponentEnsemble</ref> &gt;</type>
        <definition>std::shared_ptr&lt;mspass::seismic::ThreeComponentEnsemble&gt; mspass::algorithms::ArrivalTimeReference</definition>
        <argsstring>(mspass::seismic::ThreeComponentEnsemble &amp;din, std::string key, mspass::algorithms::TimeWindow tw)</argsstring>
        <name>ArrivalTimeReference</name>
        <param>
          <type><ref refid="namespacemspass_1_1seismic_1accd4b8b7754c4bec01071aad61edf3cc" kindref="member">mspass::seismic::ThreeComponentEnsemble</ref> &amp;</type>
          <declname>din</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">mspass::algorithms::TimeWindow</ref></type>
          <declname>tw</declname>
        </param>
        <briefdescription>
<para>Returns a gather of Seismograms in an arrival time reference fram. </para>
        </briefdescription>
        <detaileddescription>
<para>An arrival time reference means that the time is set to relative and zero is defined as an arrival time extracted from the metadata area of each member object.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>SeisppError</parametername>
</parameternamelist>
<parameterdescription>
<para>for errors in extracting required information from metadata area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>din</parametername>
</parameternamelist>
<parameterdescription>
<para>is input gather </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the metadata key used to find the arrival time to use as a reference. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tw</parametername>
</parameternamelist>
<parameterdescription>
<para>is a <ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">TimeWindow</ref> object that defines the window of data to extract around the desired arrival time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" line="176" column="17" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="176" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1a70e2a2142a48a9c0b0a95df605624356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_ensemble" kindref="compound">mspass::seismic::Ensemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &gt;</type>
        <definition>Ensemble&lt; TimeSeries &gt; mspass::algorithms::ExtractComponent</definition>
        <argsstring>(const mspass::seismic::Ensemble&lt; mspass::seismic::Seismogram &gt; &amp;d, const unsigned int comp)</argsstring>
        <name>ExtractComponent</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_ensemble" kindref="compound">mspass::seismic::Ensemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
<para>Extract one component from a 3C ensemble. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates an ensemble of TimeSeries objects that are a specified component extracted from an ensemble of 3C objects. It clones the metadata of the parent for the output ensemble metadata. Each member is created by a call to the (overloaded) function that extracts a component from each member of the parent. That function currently also clones the metadata. That is notable as there are metadata components that make sense only on each side of the transformation. A notable problem at this writing is that the Seismogram converter does not set hang and vang in the output. This might cause downstream problems - REMOVE THIS COMMENT WHEN THAT IS FIXED.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- is the input ensemble. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>- is the component number to extract.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ensemble&lt;TimeSeries&gt; of component comp data. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Will</parametername>
</parameternamelist>
<parameterdescription>
<para>throw a MsPASSError exception if the ensemble input is incompatible or the component number is not 0,1, or 2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" line="258" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" bodystart="258" bodyend="278" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="198" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1a34f711f7891ca198eb7cbef44bbd6a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">mspass::seismic::CoreSeismogram</ref></type>
        <definition>CoreSeismogram mspass::algorithms::sparse_convolve</definition>
        <argsstring>(const mspass::seismic::CoreTimeSeries &amp;wavelet, const mspass::seismic::CoreSeismogram &amp;d)</argsstring>
        <name>sparse_convolve</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">mspass::seismic::CoreTimeSeries</ref> &amp;</type>
          <declname>wavelet</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_core_seismogram" kindref="compound">mspass::seismic::CoreSeismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Sparse time domain convolution. Sometimes with modeling we have an data series (d) that is sparse that we want to convolve with a wavelet to produce a simulation data for deconvolution. This small function implements a sparse convolution algorithm in the time domain. It uses a daxpy sum only summing components of d testing nonzero. Note if d is not sparse this reduces to normal convolution with a daxpy algorithm. The cost is marginally higher than a dense time domain convolution, especially if the size of the wavelet is larger since then the sum over the size of the wavelet will dominate over the single test for zeros in d. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wavelet</parametername>
</parameternamelist>
<parameterdescription>
<para>is the wavelet to be convolved with d (not sparse) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the sparse data vector (dominated by zeros). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/sparse_convolve.cc" line="12" column="16" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/sparse_convolve.cc" bodystart="12" bodyend="53" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="215" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1a4ca98cd4433001b2c71ba46c221f6048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref></type>
        <definition>mspass::seismic::Seismogram mspass::algorithms::BundleSEEDGroup</definition>
        <argsstring>(const std::vector&lt; mspass::seismic::TimeSeries &gt; &amp;d, const size_t i0, const size_t iend)</argsstring>
        <name>BundleSEEDGroup</name>
        <param>
          <type>const std::vector&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>iend</declname>
        </param>
        <briefdescription>
<para>Combine a grouped set of TimeSeries into one Seismogram. </para>
        </briefdescription>
        <detaileddescription>
<para>A Seismogram object is a bundle of TimeSeries objects that define a nonsingular tranformation matrix that can be used to reconstruct vector group motion. That requires three TimeSeries objects that have define directions that are linearly independent. This function does not directly test for linear independence but depends upon channel codes to assemble one or more bundles needed to build a Seismogram. The algorithm used here is simple and ONLY works if the inputs have been sorted so the channels define a group of three unique channel codes. For example, HHE, HHN, HHZ would form a typical seed channel grouping.</para>
<para>The function will attempt to handle duplicates. By that I mean if the group has two of the same channel code like these sequences: HHE, HHE, HHN, HHZ or HHE, HHN, HHN, HHZ, HHZ If the duplicates are pure duplicates there is no complication and the result will be clean. If the time spans of the duplicate channels are different the decision of which to use keys on a simple idea that is most appropriate for data assembled by event with mistakes in associations. That is, it attempts to scans the group for the earliest start time. When duplicates are found it uses the one with a start time closest to the minimum as the one merged to make the output Seismogram.</para>
<para>The output will be marked as dead data with no valid data in one of two conditions: (1) less than 3 unique channel names or (2) more than three inputs with an inconsistent set of SEED names. That &quot;inconsistent&quot; test is obscure and yet another example that SEED is a four letter word. Commentary aside, the rules are:<orderedlist>
<listitem><para>The net code must be defined and the same in all TimeSeries passed</para>
</listitem><listitem><para>The station (sta) code must also be the same for all inputs</para>
</listitem><listitem><para>Similarly the loc code must be the same in all inputs.</para>
</listitem><listitem><para>Finally, there is a more obscure test on channel names. They must all have the same first two characters. That is, BHE, BHN, BHN, BHZ is ok but BHE, BHN, BHZ, HHE will cause an immediate exit with no attempt to resolve the ambiguity - that is viewed a usage error.</para>
</listitem></orderedlist>
</para>
<para>In all cases where the bundling is not possible the function does not throw an exception but does four things:<orderedlist>
<listitem><para>Merges the Metadata of all inputs (uses the += operator so only the last values of duplicate keys will be preserved in the return)</para>
</listitem><listitem><para>If ProcessingHistory is defined in the input they history records are posted to the returned Seismogram using as if the data were live but the number of input will always be a number different from 3.</para>
</listitem><listitem><para>The return is marked dead.</para>
</listitem><listitem><para>The function posts a (hopefully) informative message to elog of the returned Seismogram.</para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the vector of TimeSeries containing data to be bundled. (This could be a members of a sorted Ensemble of a python array in the python api). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i0</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first component of the vector to view as part of the group. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iend</parametername>
</parameternamelist>
<parameterdescription>
<para>is the last component of the vector to view as part of the group. (inclusive not as in a vector size numbger)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>This</parametername>
</parameternamelist>
<parameterdescription>
<para>routine should only throw system generated exceptions. Errors from attempting to construct a Seismogram generate elog messages and kills of an output components. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" line="280" column="29" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="280" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1aae4dea09147e0259fc6acf53dd5a88f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">mspass::seismic::LoggingEnsemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">mspass::seismic::Seismogram</ref> &gt;</type>
        <definition>LoggingEnsemble&lt; Seismogram &gt; mspass::algorithms::bundle_seed_data</definition>
        <argsstring>(mspass::seismic::LoggingEnsemble&lt; mspass::seismic::TimeSeries &gt; &amp;d)</argsstring>
        <name>bundle_seed_data</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">mspass::seismic::LoggingEnsemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Assemble a SeismogramEnsemble from a sorted TimeSeriesEnsemble. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to take an (unordered) input ensemble of TimeSeries objects generated from miniseed data and produce an output ensemble of Seismograms produced by bundles linked to the seed name codes net, sta, chan, and loc. An implicit assumption of the algorithm used here is that the data are a variant of a shot gather and the input ensemble defines one net:sta:chan:loc:time_interval for each record that is to be bundled. It can only properly handle pure duplicates for a given net:sta:chan:loc combination. (i.e. if the input has the same TimeSeries defined by net:sta:chan:loc AND a common start and end time). Data with gaps broken into multiple net:sta:chan:loc TimeSeries with different start and end times will produce incomplete results. That is, Seismograms in the output associated with such inputs will either be killed with an associated error log entry or in the best case truncated to the overlap range of one of the segments with the gap(s) between.</para>
<para>Irregular start times of any set of TimeSeries forming a single bundle are subject to the same truncation or discard rules described in the related function Bundle3C.</para>
<para>Finally, it is VERY IMPORTANT to realize that the input ensemble will almost certainly be altered by this algorithm as the very first thing it does is a sequential sort on the seed keys: net, sta, loc, chan (in that order). Not for convenience in working with MongoDB the null net or loc codes are handled cleanly and treated more or less as if they were an empty string. The sort order, however, may not be the same the as empty and null are not actually treated identically.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the input ensemble of TimeSeries to be processed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>This</parametername>
</parameternamelist>
<parameterdescription>
<para>function will throw a MsPASSError if any member of d does not have sta or chan defined (as noted above null net or loc are handled.) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" line="390" column="17" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" bodystart="390" bodyend="579" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="320" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1a307e1b2136eb6f253ef95b980c433db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::seed_ensemble_sort</definition>
        <argsstring>(mspass::seismic::LoggingEnsemble&lt; mspass::seismic::TimeSeries &gt; &amp;d)</argsstring>
        <name>seed_ensemble_sort</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_logging_ensemble" kindref="compound">mspass::seismic::LoggingEnsemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Sort a TimeSeriesEnsemble with a natural order with seed name codes. </para>
        </briefdescription>
        <detaileddescription>
<para>The seed standard tags every single miniseed record with four string keys that seed uses to uniquely define a single data channel. In MsPASS the keys used for these name keys are: net, sta, chan, and loc. This function applies the same sort algorithm used in the bundle_seed_data algorithm to allow clean grouping into channels that can be assembled into three component (Seismogram) bundles. That means we sort the ensemble data with the four keys in this order: net, sta, loc, chan.</para>
<para>We provide this function because the process of doing such a sort is far from trivial to do in a robust way. A python programmer has easier tools for sorting BUT those standard tools cannot handle a common data problem that can be encountered with real data. That is, there is a high probability not all the seed keys are defined. In particular, data coming from a system based on the css3.0 relational data base (e.g. Antelope) may not have net or loc set. The sorting algorith here handle null net or loc codes cleanly by treating the null case as a particular value. Without those safeties the code would throw an error if net or loc were null.</para>
<para>Note this algorithm alters the ensemble it receives in place.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is the ensemble to be sorted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" line="582" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" bodystart="582" bodyend="587" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="346" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1ae6f459805aed9f8e1012cf999ee3513e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_time_series_w_gaps" kindref="compound">mspass::seismic::TimeSeriesWGaps</ref></type>
        <definition>mspass::seismic::TimeSeriesWGaps mspass::algorithms::splice_segments</definition>
        <argsstring>(std::vector&lt; mspass::seismic::TimeSeries &gt; &amp;segments, bool save_history)</argsstring>
        <name>splice_segments</name>
        <param>
          <type>std::vector&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &gt; &amp;</type>
          <declname>segments</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>save_history</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" line="347" column="34" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="347" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="algorithms_8h_1a90149f49eb7d56bb1395173f5d1cfabd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &gt;</type>
        <definition>std::vector&lt;mspass::seismic::TimeSeries&gt; mspass::algorithms::repair_overlaps</definition>
        <argsstring>(std::vector&lt; mspass::seismic::TimeSeries &gt; &amp;segments)</argsstring>
        <name>repair_overlaps</name>
        <param>
          <type>std::vector&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">mspass::seismic::TimeSeries</ref> &gt; &amp;</type>
          <declname>segments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" line="348" column="13" declfile="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" declline="348" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="bundle_8cc_1af7ec3c6143ab2b7f3a31655943070506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mspass::algorithms::cautious_compare</definition>
        <argsstring>(const TimeSeries &amp;x, const TimeSeries &amp;y, const string key)</argsstring>
        <name>cautious_compare</name>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" line="22" column="5" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" bodystart="22" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="bundle_8cc_1a3b1619dbb3915f557aca6ed169fe008b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref></type>
        <definition>Seismogram mspass::algorithms::dogtag</definition>
        <argsstring>(vector&lt; CoreTimeSeries &gt; &amp;bundle)</argsstring>
        <name>dogtag</name>
        <param>
          <type>vector&lt; <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &gt; &amp;</type>
          <declname>bundle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" line="108" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" bodystart="108" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="bundle_8cc_1a1fbb4b5c74c1f7e015c64ac807d5e254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref></type>
        <definition>Seismogram mspass::algorithms::BundleSEEDGroup</definition>
        <argsstring>(const std::vector&lt; TimeSeries &gt; &amp;d, const size_t i0, const size_t iend)</argsstring>
        <name>BundleSEEDGroup</name>
        <param>
          <type>const std::vector&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>iend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" line="134" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/bundle.cc" bodystart="134" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="_butterworth_8cc_1a65fd8522810064ed52a8b0eecbfec871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const double</type>
        <definition>const double mspass::algorithms::FHighFloor</definition>
        <argsstring>(0.45)</argsstring>
        <name>FHighFloor</name>
        <param>
          <type>0.</type>
          <declname>45</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" line="253" column="14" declfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" declline="253" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_butterworth_8cc_1a5257b05b0bf4212ec056bd7004a041ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::reverse_vector</definition>
        <argsstring>(int nd, double *d)</argsstring>
        <name>reverse_vector</name>
        <param>
          <type>int</type>
          <declname>nd</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" line="318" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Butterworth.cc" bodystart="318" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="seismogram__helpers_8cc_1aa5fee528b7b72e0ad47786869fdb3630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr&lt; <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref> &gt;</type>
        <definition>shared_ptr&lt;Seismogram&gt; mspass::algorithms::ArrivalTimeReference</definition>
        <argsstring>(Seismogram &amp;tcsi, string arrival_time_key, TimeWindow tw)</argsstring>
        <name>ArrivalTimeReference</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref> &amp;</type>
          <declname>tcsi</declname>
        </param>
        <param>
          <type>string</type>
          <declname>arrival_time_key</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">TimeWindow</ref></type>
          <declname>tw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" line="48" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" bodystart="48" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="seismogram__helpers_8cc_1aa87c23638933c414c340a20893d81a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr&lt; <ref refid="classmspass_1_1seismic_1_1_ensemble" kindref="compound">Ensemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref> &gt; &gt;</type>
        <definition>shared_ptr&lt;Ensemble&lt;Seismogram&gt; &gt; mspass::algorithms::ArrivalTimeReference</definition>
        <argsstring>(Ensemble&lt; Seismogram &gt; &amp;tcei, string arrival_time_key, TimeWindow tw)</argsstring>
        <name>ArrivalTimeReference</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_ensemble" kindref="compound">Ensemble</ref>&lt; <ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref> &gt; &amp;</type>
          <declname>tcei</declname>
        </param>
        <param>
          <type>string</type>
          <declname>arrival_time_key</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">TimeWindow</ref></type>
          <declname>tw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" line="142" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" bodystart="142" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="seismogram__helpers_8cc_1a5989a2f816a058b5a8b94a67dea74ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mspass::algorithms::HorizontalRotation</definition>
        <argsstring>(Seismogram &amp;d, double phi)</argsstring>
        <name>HorizontalRotation</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_seismogram" kindref="compound">Seismogram</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" line="172" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/seismogram_helpers.cc" bodystart="172" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="splicing_8cc_1aaffc545e79b5d1d55641df05eea740bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const double</type>
        <definition>const double mspass::algorithms::TIME_TEAR_TOLERANCE</definition>
        <argsstring>(0.5)</argsstring>
        <name>TIME_TEAR_TOLERANCE</name>
        <param>
          <type>0.</type>
          <declname>5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" line="24" column="14" declfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" declline="24" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="splicing_8cc_1a49855858a1259f1bc83365bf27cbc749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; mspass::algorithms::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, SegmentVectorProperties &amp;svp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1algorithms_1_1_segment_vector_properties" kindref="compound">SegmentVectorProperties</ref> &amp;</type>
          <declname>svp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience operator to dump content of <ref refid="classmspass_1_1algorithms_1_1_segment_vector_properties" kindref="compound">SegmentVectorProperties</ref> object. <linebreak/>
</para>
<para>Writes a verbose dump of the content with labels. This overloaded function is for debugging and will not be in the MsPASS python bindings. <linebreak/>
 In fact, neither is <ref refid="classmspass_1_1algorithms_1_1_segment_vector_properties" kindref="compound">SegmentVectorProperties</ref>. <linebreak/>
 Note this does not need to be declared friend because all attributes of the class are declared public. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" line="207" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" bodystart="207" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="splicing_8cc_1ae512ac20f0a5fd8185dc8e9efac3503a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_time_series_w_gaps" kindref="compound">TimeSeriesWGaps</ref></type>
        <definition>TimeSeriesWGaps mspass::algorithms::splice_segments</definition>
        <argsstring>(std::vector&lt; TimeSeries &gt; &amp;segments, bool save_history)</argsstring>
        <name>splice_segments</name>
        <param>
          <type>std::vector&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &gt; &amp;</type>
          <declname>segments</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>save_history</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" line="254" column="17" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" bodystart="254" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="splicing_8cc_1a6b792528a77eac3ed19d8159fde853ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::algorithms::samples_match</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;v1, std::vector&lt; double &gt; &amp;v2)</argsstring>
        <name>samples_match</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" line="417" column="6" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" bodystart="417" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="splicing_8cc_1a8a5bc3ba8f1972af801958ab572b17db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &gt;</type>
        <definition>std::vector&lt;TimeSeries&gt; mspass::algorithms::repair_overlaps</definition>
        <argsstring>(std::vector&lt; TimeSeries &gt; &amp;segments)</argsstring>
        <name>repair_overlaps</name>
        <param>
          <type>std::vector&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &gt; &amp;</type>
          <declname>segments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to handle overlapping data segments.</para>
<para>Overlapping data is a common raw data issue. Data retrieved from data centers has normally been purged from archives, but overlaps can still occur. The most common example is two miniseed files may contain the same data and the user did not realize that data was present in the files.</para>
<para>The approach of this algorithm is to try to repair overlaps that have matching sample data. It looks for matches in a way that should work even if the data have been scaled AS LONG AS the scaling is the same for the two overlappign sections. Whenever an overlap is found the first segment of the pair is truncated and the second is retained. If the overlapping segment data do not compare sample for sample the first segmet of the pair (in time order) is killed, and error message is posted, and the killed datum is pushed to the output. The first is always killed because with current generation data that situation always means there has been a time jump backward to create the apparent overlap. It is assumed that the segment killed had a timing problem. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" line="459" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/splicing.cc" bodystart="459" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="_taper_8cc_1ab043d6b598f13edb61af41804bf6e9ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::algorithms::headcos</definition>
        <argsstring>(double t0, double t1, double t)</argsstring>
        <name>headcos</name>
        <param>
          <type>double</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" line="179" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="179" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="_taper_8cc_1ad0d3aa1bb569186de00c2c67afba6a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mspass::algorithms::tailcos</definition>
        <argsstring>(double t0, double t1, double t)</argsstring>
        <name>tailcos</name>
        <param>
          <type>double</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" line="189" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/Taper.cc" bodystart="189" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="tseries__helpers_8cc_1acfbeb2b441c657883388adfa3afa3577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr&lt; <ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &gt;</type>
        <definition>shared_ptr&lt;TimeSeries&gt; mspass::algorithms::ArrivalTimeReference</definition>
        <argsstring>(TimeSeries &amp;tcsi, string arrival_time_key, TimeWindow tw)</argsstring>
        <name>ArrivalTimeReference</name>
        <param>
          <type><ref refid="classmspass_1_1seismic_1_1_time_series" kindref="compound">TimeSeries</ref> &amp;</type>
          <declname>tcsi</declname>
        </param>
        <param>
          <type>string</type>
          <declname>arrival_time_key</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">TimeWindow</ref></type>
          <declname>tw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/tseries_helpers.cc" line="47" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/tseries_helpers.cc" bodystart="47" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="tseries__helpers_8cc_1a1fefa3293b0058518db2146461c6dca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>shared_ptr&lt; <ref refid="namespacemspass_1_1seismic_1a9bdfc71411e6ef751bb5daa7e97987d0" kindref="member">TimeSeriesEnsemble</ref> &gt;</type>
        <definition>shared_ptr&lt;TimeSeriesEnsemble&gt; mspass::algorithms::ArrivalTimeReference</definition>
        <argsstring>(TimeSeriesEnsemble &amp;tcei, string arrival_time_key, TimeWindow tw)</argsstring>
        <name>ArrivalTimeReference</name>
        <param>
          <type><ref refid="namespacemspass_1_1seismic_1a9bdfc71411e6ef751bb5daa7e97987d0" kindref="member">TimeSeriesEnsemble</ref> &amp;</type>
          <declname>tcei</declname>
        </param>
        <param>
          <type>string</type>
          <declname>arrival_time_key</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1algorithms_1_1_time_window" kindref="compound">TimeWindow</ref></type>
          <declname>tw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/tseries_helpers.cc" line="134" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/algorithms/tseries_helpers.cc" bodystart="134" bodyend="166"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/algorithms/algorithms.h" line="12" column="1"/>
  </compounddef>
</doxygen>
