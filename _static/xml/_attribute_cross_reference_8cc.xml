<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_attribute_cross_reference_8cc" kind="file" language="C++">
    <compoundname>AttributeCrossReference.cc</compoundname>
    <includes refid="_attribute_cross_reference_8h" local="yes">mspass/utility/AttributeCrossReference.h</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="4">
        <label>mspass/utility/AntelopePf.h</label>
        <link refid="_antelope_pf_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>mspass/utility/AttributeCrossReference.h</label>
        <link refid="_attribute_cross_reference_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>mspass/utility/AttributeMap.h</label>
        <link refid="_attribute_map_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>mspass/utility/BasicMetadata.h</label>
        <link refid="_basic_metadata_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>mspass/utility/Metadata.h</label>
        <link refid="_metadata_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>mspass/utility/MsPASSError.h</label>
        <link refid="_ms_p_a_s_s_error_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc</label>
        <link refid="_attribute_cross_reference_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>boost/any.hpp</label>
      </node>
      <node id="9">
        <label>exception</label>
      </node>
      <node id="12">
        <label>fstream</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>list</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="15">
        <label>pybind11/pybind11.h</label>
      </node>
      <node id="16">
        <label>set</label>
      </node>
      <node id="17">
        <label>sstream</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="18">
        <label>typeinfo</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemspass">mspass</innernamespace>
    <innernamespace refid="namespacemspass_1_1utility">mspass::utility</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;mspass/utility/AttributeCrossReference.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">mspass::utility;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mspass::utility<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1aaa7bf24e8df2c42ef42f97800d48a57e" kindref="member">AttributeCrossReference::AttributeCrossReference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>lines_to_parse)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>istringstream<sp/>instrm(lines_to_parse);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>inkey,<sp/>outkey;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>typestr;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>instrm<sp/>&gt;&gt;<sp/>inkey;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unfortunately<sp/>this<sp/>is<sp/>the<sp/>normal<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instrm.eof())</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>instrm<sp/>&gt;&gt;<sp/>outkey;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>instrm<sp/>&gt;&gt;<sp/>typestr;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itoe.insert(pair&lt;string,<sp/>string&gt;(inkey,<sp/>outkey));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>etoi.insert(pair&lt;string,<sp/>string&gt;(outkey,<sp/>inkey));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;INT&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imdtypemap.insert(pair&lt;string,<sp/>MDtype&gt;(inkey,<sp/>MDtype::Integer));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;real&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;REAL&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imdtypemap.insert(pair&lt;string,<sp/>MDtype&gt;(inkey,<sp/>MDtype::Double));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BOOL&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imdtypemap.insert(pair&lt;string,<sp/>MDtype&gt;(inkey,<sp/>MDtype::Boolean));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;STRING&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imdtypemap.insert(pair&lt;string,<sp/>MDtype&gt;(inkey,<sp/>MDtype::String));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>in<sp/>seispp<sp/>this<sp/>condition<sp/>only<sp/>logs<sp/>and<sp/>error<sp/>and</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>sets<sp/>attribute<sp/>invalid.<sp/><sp/>Here<sp/>we<sp/>throw<sp/>an<sp/>exception<sp/>as</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>this<sp/>would<sp/>always<sp/>be<sp/>called<sp/>on<sp/>startup<sp/>and<sp/>should<sp/>normally</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>cause<sp/>an<sp/>abort<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>sserr;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sserr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AttributeCrossReference<sp/>string<sp/>constructor:<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Attribute<sp/>with<sp/>tag=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inkey<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>tagged<sp/>with<sp/>an<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>type<sp/>name=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>typestr<sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Repair<sp/>input<sp/>data<sp/>passed<sp/>to<sp/>this<sp/>constructor&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref>(sserr.str());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!instrm.eof());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1aaa7bf24e8df2c42ef42f97800d48a57e" kindref="member">AttributeCrossReference::AttributeCrossReference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>list&lt;string&gt;<sp/>&amp;lines)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>list&lt;string&gt;::const_iterator<sp/>lptr;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(lptr<sp/>=<sp/>lines.begin();<sp/>lptr<sp/>!=<sp/>lines.end();<sp/>++lptr)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>istringstream<sp/>instrm(*lptr);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>inkey,<sp/>outkey;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>typestr;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>instrm<sp/>&gt;&gt;<sp/>inkey;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>instrm<sp/>&gt;&gt;<sp/>outkey;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>instrm<sp/>&gt;&gt;<sp/>typestr;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>itoe.insert(pair&lt;string,<sp/>string&gt;(inkey,<sp/>outkey));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>etoi.insert(pair&lt;string,<sp/>string&gt;(outkey,<sp/>inkey));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;INT&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imdtypemap.insert(pair&lt;string,<sp/>MDtype&gt;(inkey,<sp/>MDtype::Integer));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;real&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;REAL&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imdtypemap.insert(pair&lt;string,<sp/>MDtype&gt;(inkey,<sp/>MDtype::Double));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BOOL&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imdtypemap.insert(pair&lt;string,<sp/>MDtype&gt;(inkey,<sp/>MDtype::Boolean));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal"><sp/>||<sp/>typestr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;STRING&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imdtypemap.insert(pair&lt;string,<sp/>MDtype&gt;(inkey,<sp/>MDtype::String));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>sserr;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sserr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AttributeCrossReference<sp/>string<sp/>constructor:<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Attribute<sp/>with<sp/>tag=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inkey<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>tagged<sp/>with<sp/>an<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>type<sp/>name=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>typestr<sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Repair<sp/>input<sp/>data<sp/>passed<sp/>to<sp/>this<sp/>constructor&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref>(sserr.str());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1aaa7bf24e8df2c42ef42f97800d48a57e" kindref="member">AttributeCrossReference::AttributeCrossReference</ref>(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>map&lt;string,<sp/>string&gt;<sp/>int2ext,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MetadataList<sp/>&amp;mdlist)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>MetadataList::const_iterator<sp/>mdlptr;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mdlptr<sp/>=<sp/>mdlist.begin();<sp/>mdlptr<sp/>!=<sp/>mdlist.end();<sp/>++mdlptr)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>imdtypemap.insert(pair&lt;string,<sp/>MDtype&gt;(mdlptr-&gt;tag,<sp/>mdlptr-&gt;mdt));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>itoe<sp/>=<sp/>int2ext;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>string&gt;::iterator<sp/>iptr;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>extracts<sp/>each<sp/>pair<sp/>of<sp/>the<sp/>map<sp/>and<sp/>inverts<sp/>them<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iptr<sp/>=<sp/>itoe.begin();<sp/>iptr<sp/>!=<sp/>itoe.end();<sp/>++iptr)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>etoi.insert(pair&lt;string,<sp/>string&gt;(iptr-&gt;second,<sp/>iptr-&gt;first));</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89" refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a6560b0c41600bafbefa6a91c10ce4057" refkind="member"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1aaa7bf24e8df2c42ef42f97800d48a57e" kindref="member">AttributeCrossReference::AttributeCrossReference</ref>(</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference" kindref="compound">AttributeCrossReference</ref><sp/>&amp;parent)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>itoe<sp/>=<sp/>parent.itoe;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>etoi<sp/>=<sp/>parent.etoi;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>imdtypemap<sp/>=<sp/>parent.imdtypemap;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference" kindref="compound">AttributeCrossReference</ref><sp/>&amp;</highlight></codeline>
<codeline lineno="96" refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a619f37e593d5d259ec6cafed2eed1aea" refkind="member"><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a619f37e593d5d259ec6cafed2eed1aea" kindref="member">AttributeCrossReference::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference" kindref="compound">AttributeCrossReference</ref><sp/>&amp;parent)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;parent)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>itoe<sp/>=<sp/>parent.itoe;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>etoi<sp/>=<sp/>parent.etoi;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>imdtypemap<sp/>=<sp/>parent.imdtypemap;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104" refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a2264349fe7d2093900fa9b56ef84b96b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a2264349fe7d2093900fa9b56ef84b96b" kindref="member">AttributeCrossReference::internal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>string&gt;::const_iterator<sp/>iptr;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>iptr<sp/>=<sp/>etoi.find(key);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iptr<sp/>==<sp/>etoi.end())</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;AttribureCrossReference::internal:<sp/><sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>find<sp/>attribute<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>key<sp/>+</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>external<sp/>to<sp/>internal<sp/>namespace<sp/>map&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iptr-&gt;second);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113" refid="classmspass_1_1utility_1_1_attribute_cross_reference_1aeded33f763704fc1a42b884cf62762c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1aeded33f763704fc1a42b884cf62762c6" kindref="member">AttributeCrossReference::external</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>string&gt;::const_iterator<sp/>iptr;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>iptr<sp/>=<sp/>itoe.find(key);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iptr<sp/>==<sp/>itoe.end())</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;AttribureCrossReference::external:<sp/><sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>find<sp/>attribute<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>key<sp/>+</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>internal<sp/>to<sp/>external<sp/><sp/>namespace<sp/>map&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iptr-&gt;second);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122" refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a546084d7cd4b9369ee7db723c3629422" refkind="member"><highlight class="normal">MDtype<sp/><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a546084d7cd4b9369ee7db723c3629422" kindref="member">AttributeCrossReference::type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>MDtype&gt;::const_iterator<sp/>iptr;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>iptr<sp/>=<sp/>imdtypemap.find(key);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iptr<sp/>==<sp/>imdtypemap.end())</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;AttributeCrossReference::type:<sp/><sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>find<sp/>attribute<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>key<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>type<sp/>definitions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iptr-&gt;second);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130" refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a6a15859017c7559a06b6b38b1045bef7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a6a15859017c7559a06b6b38b1045bef7" kindref="member">AttributeCrossReference::size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>the<sp/>two<sp/>maps<sp/>are<sp/>the<sp/>same<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(itoe.size());</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134" refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a0d587eb08b5be753d7e0087bef6d61f4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a0d587eb08b5be753d7e0087bef6d61f4" kindref="member">AttributeCrossReference::put</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>itoe.insert(pair&lt;string,<sp/>string&gt;(i,<sp/>e));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>etoi.insert(pair&lt;string,<sp/>string&gt;(e,<sp/>i));</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>two<sp/>methods<sp/>could<sp/>use<sp/>either<sp/>the<sp/>etoi<sp/>or<sp/>the<sp/>itoe<sp/>containers</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/>to<sp/>fetch<sp/>the<sp/>appropriate<sp/>keys,<sp/>but<sp/>we<sp/>always<sp/>use<sp/>fetch<sp/>the</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>first<sp/>of<sp/>the<sp/>pair<sp/>as<sp/>that<sp/>will<sp/>always<sp/>yield<sp/>a<sp/>unique<sp/>set<sp/>that</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/>exactly<sp/>matches<sp/>the<sp/>originating<sp/>map.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a33b5a77e159f3e114bbfccb24e3fff61" refkind="member"><highlight class="normal">set&lt;string&gt;<sp/><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a33b5a77e159f3e114bbfccb24e3fff61" kindref="member">AttributeCrossReference::internal_names</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>string&gt;::const_iterator<sp/>mptr;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>set&lt;string&gt;<sp/>keys;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mptr<sp/>=<sp/>itoe.begin();<sp/>mptr<sp/>!=<sp/>itoe.end();<sp/>++mptr)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>keys.insert(mptr-&gt;first);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150" refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a19789014f1041b64582b6b565913c8de" refkind="member"><highlight class="normal">set&lt;string&gt;<sp/><ref refid="classmspass_1_1utility_1_1_attribute_cross_reference_1a19789014f1041b64582b6b565913c8de" kindref="member">AttributeCrossReference::external_names</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>string&gt;::const_iterator<sp/>mptr;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>set&lt;string&gt;<sp/>keys;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mptr<sp/>=<sp/>etoi.begin();<sp/>mptr<sp/>!=<sp/>etoi.end();<sp/>++mptr)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>keys.insert(mptr-&gt;first);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mspass::utility</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/mspass/mspass/cxx/src/lib/utility/AttributeCrossReference.cc"/>
  </compounddef>
</doxygen>
