<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmspass_1_1seismic_1_1_core_time_series" kind="class" language="C++" prot="public">
    <compoundname>mspass::seismic::CoreTimeSeries</compoundname>
    <basecompoundref refid="classmspass_1_1seismic_1_1_basic_time_series" prot="public" virt="non-virtual">mspass::seismic::BasicTimeSeries</basecompoundref>
    <basecompoundref refid="classmspass_1_1utility_1_1_metadata" prot="public" virt="non-virtual">mspass::utility::Metadata</basecompoundref>
    <derivedcompoundref refid="classmspass_1_1seismic_1_1_time_series" prot="public" virt="non-virtual">mspass::seismic::TimeSeries</derivedcompoundref>
    <includes refid="_core_time_series_8h" local="no">CoreTimeSeries.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref> &gt;</type>
        <definition>std::vector&lt;double&gt; mspass::seismic::CoreTimeSeries::s</definition>
        <argsstring></argsstring>
        <name>s</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::s</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Actual data stored as an STL vector container. Note the STL guarantees the data elements of vector container are contiguous in memory like FORTRAN vectors. As a result things like the BLAS can be used with data object by using a syntax like this: if d is a <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> object, the address of the first sample of the data is &amp;(d.s[0]). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="27" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" bodystart="27" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1a48794c92ef727de958653b7d395f6b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::CoreTimeSeries::CoreTimeSeries</definition>
        <argsstring>()</argsstring>
        <name>CoreTimeSeries</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::CoreTimeSeries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. Initializes object data to zeros and sets the initial STL vector size to 0 length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="32" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="14" bodyend="19"/>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="27">s</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1a97ff6732aa816b0c327c5bf667ffe841" compoundref="_core_time_series_8cc" startline="165" endline="179">set_dt</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ae538485ac0aed2f8691477dffce6cda8" compoundref="_core_time_series_8cc" startline="196" endline="219">set_npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ae90b28cff0bc1997aa65a1693d8562d0" compoundref="_core_time_series_8cc" startline="180" endline="195">set_t0</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1a0cb99b254e48280ff9fd674976e53c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::CoreTimeSeries::CoreTimeSeries</definition>
        <argsstring>(const size_t nsin)</argsstring>
        <name>CoreTimeSeries</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::CoreTimeSeries</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">size_t</ref></type>
          <declname>nsin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Similar to the default constructor but creates a vector of data with nsin samples and initializes all samples to 0.0. This vector can safely be accessed with the vector index operator (i.e. operator []). A corollary is that push_back or push_front applied to this vector will alter it&apos;s length so use this only if the size of the data to fill the object is already known. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="42" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="20" bodyend="32"/>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ae538485ac0aed2f8691477dffce6cda8" compoundref="_core_time_series_8cc" startline="196" endline="219">set_npts</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1a89c257008450ceb6d96e0cdb95e24673" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual mspass::seismic::CoreTimeSeries::~CoreTimeSeries</definition>
        <argsstring>()</argsstring>
        <name>~CoreTimeSeries</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::~CoreTimeSeries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="43" column="11" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1ae44860d32e7ca37a66eca974546a62ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::CoreTimeSeries::CoreTimeSeries</definition>
        <argsstring>(const BasicTimeSeries &amp;bts, const Metadata &amp;md)</argsstring>
        <name>CoreTimeSeries</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::CoreTimeSeries</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> &amp;</type>
          <declname>bts</declname>
        </param>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref> &amp;</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Partially construct from components.</para>
<para>There are times one wants to use the Metadata area as a template to flesh out a <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> as what might be called skin and bones: skin is Metadata and bones as <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> data. This constructor initializes those two base classes but does not fully a valid data vector. It only attempts to fetch the number of points expected for the data vector using the npts metadata (integer) key (i.e. it sets npts to md.get_int(&quot;npts&quot;)). It then creates the data vector of that length and initialzies it to all zeros. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="54" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="49" bodyend="55"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="255">mspass::seismic::BasicTimeSeries::nsamp</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ae538485ac0aed2f8691477dffce6cda8" compoundref="_core_time_series_8cc" startline="196" endline="219">set_npts</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1a4a8b98447f31911e6e18079541ab7b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::seismic::CoreTimeSeries::CoreTimeSeries</definition>
        <argsstring>(const CoreTimeSeries &amp;)</argsstring>
        <name>CoreTimeSeries</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::CoreTimeSeries</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
          <defname>tsi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard copy constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="58" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="34" bodyend="47"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="243">mspass::seismic::BasicTimeSeries::mlive</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="27">s</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1a97ff6732aa816b0c327c5bf667ffe841" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">void</ref></type>
        <definition>void mspass::seismic::CoreTimeSeries::set_dt</definition>
        <argsstring>(const double sample_interval)</argsstring>
        <name>set_dt</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::set_dt</qualifiedname>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_time_series_1a1813dfea28479ff50528e8ed008e62e8">set_dt</reimplements>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
          <declname>sample_interval</declname>
        </param>
        <briefdescription>
<para>Set the sample interval. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is complicated by the need to sync the changed value with Metadata. That is further complicated by the need to support aliases for the keys used to defined dt in Metadata. That is handled by first setting the internal dt value and then going through a fixed list of valid alias keys for dt. Any that exist are changed. If none were previously defined the unique name (see documentation) is added to Metadata.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new data sample interval to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="72" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="165" bodyend="179"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="63" endline="71">mspass::utility::Metadata::is_defined</references>
        <references refid="namespacemspass_1_1seismic_1a3f7a9857fd532d0e6800f2a316b50772">mspass::seismic::SEISMICMD_dt</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a1813dfea28479ff50528e8ed008e62e8" compoundref="_basic_time_series_8h" startline="197" endline="197">mspass::seismic::BasicTimeSeries::set_dt</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1ae538485ac0aed2f8691477dffce6cda8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">void</ref></type>
        <definition>void mspass::seismic::CoreTimeSeries::set_npts</definition>
        <argsstring>(const size_t npts)</argsstring>
        <name>set_npts</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::set_npts</qualifiedname>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_time_series_1a4101771f4d687d43f4ae79bfebef3f7c">set_npts</reimplements>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">size_t</ref></type>
          <declname>npts</declname>
        </param>
        <briefdescription>
<para>Set the number of samples attribute for data. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is complicated by the need to sync the changed value with Metadata. That is further complicated by the need to support aliases for the keys used to defined npts in Metadata. That is handled by first setting the internal npts value (actually ns) and then going through a fixed list of valid alias keys for npts. Any that exist are changed. If none were previously defined the unique name (see documentation) is added to Metadata.</para>
<para>This attribute has an additional complication compared to other setter that are overrides from <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref>. That is, the number of points define the data buffer size to hold the sample data. To guarantee the buffer size and the internal remain consistent this method clears any existing content of the vector s and initializes npts points to 0.0. Note this means if one is using this to assemble a data object in pieces you MUST call this method before loading any data or it will be cleared and you will mysteriously find the data are all zeros.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>npts</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new number of points to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="94" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="196" bodyend="219"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="63" endline="71">mspass::utility::Metadata::is_defined</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="171" endline="171">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="27">s</references>
        <references refid="namespacemspass_1_1seismic_1ac848a79911ca1930abf265f01a6d635f">mspass::seismic::SEISMICMD_npts</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a4101771f4d687d43f4ae79bfebef3f7c" compoundref="_basic_time_series_8h" startline="209" endline="209">mspass::seismic::BasicTimeSeries::set_npts</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1ac2755952b5e490ba8ea7469d5d0273c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">void</ref></type>
        <definition>void mspass::seismic::CoreTimeSeries::sync_npts</definition>
        <argsstring>()</argsstring>
        <name>sync_npts</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::sync_npts</qualifiedname>
        <briefdescription>
<para>Sync the number of samples attribute with actual data size. </para>
        </briefdescription>
        <detaileddescription>
<para>This method syncs the npts attribute with the actual size of the vector s. It also syncs aliases in the same way as the set_npts method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="101" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="220" bodyend="238"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="63" endline="71">mspass::utility::Metadata::is_defined</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" compoundref="_basic_time_series_8h" startline="255">mspass::seismic::BasicTimeSeries::nsamp</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="27">s</references>
        <references refid="namespacemspass_1_1seismic_1ac848a79911ca1930abf265f01a6d635f">mspass::seismic::SEISMICMD_npts</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a4101771f4d687d43f4ae79bfebef3f7c" compoundref="_basic_time_series_8h" startline="209" endline="209">mspass::seismic::BasicTimeSeries::set_npts</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1ae90b28cff0bc1997aa65a1693d8562d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">void</ref></type>
        <definition>void mspass::seismic::CoreTimeSeries::set_t0</definition>
        <argsstring>(const double t0in)</argsstring>
        <name>set_t0</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::set_t0</qualifiedname>
        <reimplements refid="classmspass_1_1seismic_1_1_basic_time_series_1abe29da17a295b2b439951d3ab6378caf">set_t0</reimplements>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
          <declname>t0in</declname>
        </param>
        <briefdescription>
<para>Set the data start time. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is complicated by the need to sync the changed value with Metadata. That is further complicated by the need to support aliases for the keys used to defined npts in Metadata. That is handled by first setting the internal t0 value and then going through a fixed list of valid alias keys for it. Any that exist are changed. If none were previously defined the unique name (see documentation) is added to Metadata.</para>
<para>This is a dangerous method to use on real data as it can mess up the time if not handled correctly. It should be used only when that sharp knife is needed such as in assembling data outside of constructors in a test program.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t0in</parametername>
</parameternamelist>
<parameterdescription>
<para>is the new data sample interval to be used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="118" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="180" bodyend="195"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" compoundref="_metadata_8cc" startline="63" endline="71">mspass::utility::Metadata::is_defined</references>
        <references refid="namespacemspass_1_1seismic_1a1e5b45ce0ed02e9c1d154ea0434138c0">mspass::seismic::SEISMICMD_t0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abe29da17a295b2b439951d3ab6378caf" compoundref="_basic_time_series_8h" startline="221" endline="221">mspass::seismic::BasicTimeSeries::set_t0</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1a49e0add931b008600450413c4e0cbd40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
        <definition>CoreTimeSeries &amp; mspass::seismic::CoreTimeSeries::operator=</definition>
        <argsstring>(const CoreTimeSeries &amp;parent)</argsstring>
        <name>operator=</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::operator=</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="133" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="57" bodyend="64"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aaf05bc1fe471e194bec093906c1a607c" compoundref="_basic_time_series_8cc" startline="63" endline="74">mspass::seismic::BasicTimeSeries::operator=</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" compoundref="_metadata_8cc" startline="90" endline="96">mspass::utility::Metadata::operator=</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="27">s</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1aac97d69cfcec7f8b80eee2410adc4a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
        <definition>CoreTimeSeries &amp; mspass::seismic::CoreTimeSeries::operator+=</definition>
        <argsstring>(const CoreTimeSeries &amp;d)</argsstring>
        <name>operator+=</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::operator+=</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Summation operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Summing data from signals of irregular length requires handling potential mismatches in size and overlap. This behaves the way a += operator should logically behave in that situation. That is, because the lhs is where the sum is being accumulated, the size is always controlled by the left hand side of the operator. Any portions of the right hand side that are outside the t0 to <ref refid="classmspass_1_1seismic_1_1_basic_time_series_1af8982109d3caaeee15bb5b3a63b89317" kindref="member">endtime()</ref> of the left hand side are silently discarded. If the start time of the right hand side is greater than t0 or the endtime is less than endtime of the lhs there will be discontinuties in the sum there the ends of the rhs are inside the range of the lhs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is other signal to add to this. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>can be thrown if lhs and rhs do not have matching time standards. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="150" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="67" bodyend="105"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1af8982109d3caaeee15bb5b3a63b89317" compoundref="_basic_time_series_8h" startline="77" endline="79">mspass::seismic::BasicTimeSeries::endtime</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="243">mspass::seismic::BasicTimeSeries::mlive</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="251">mspass::seismic::BasicTimeSeries::mt0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="171" endline="171">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="27">s</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" compoundref="_basic_time_series_8h" startline="72" endline="72">mspass::seismic::BasicTimeSeries::sample_number</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a472074f3074d59f794d18017b010ab81" compoundref="_basic_time_series_8h" startline="174" endline="174">mspass::seismic::BasicTimeSeries::t0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" compoundref="_basic_time_series_8h" startline="265">mspass::seismic::BasicTimeSeries::tref</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1a7cb0e689d13cc1696eaafc0bbec24754" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref></type>
        <definition>const CoreTimeSeries mspass::seismic::CoreTimeSeries::operator+</definition>
        <argsstring>(const CoreTimeSeries &amp;other) const</argsstring>
        <name>operator+</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::operator+</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Addition operator.</para>
<para>This operator is implemented in a standard way utilizing operator+=. For data with irregular start and end times that has an important consequence; the operator is not communative. i.e given x an y z=x+y will not yield the same result as z=y+x. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="158" column="24" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="150" bodyend="154"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1aa4ea5ff317047cb30778eecd272bc8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
        <definition>CoreTimeSeries &amp; mspass::seismic::CoreTimeSeries::operator*=</definition>
        <argsstring>(const double)</argsstring>
        <name>operator*=</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::operator*=</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
          <defname>scale</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply data by a scalar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="161" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="161" bodyend="164"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="171" endline="171">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="27">s</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1afdc1e6ce07e1101b2f33c9b455b3a3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
        <definition>CoreTimeSeries &amp; mspass::seismic::CoreTimeSeries::operator-=</definition>
        <argsstring>(const CoreTimeSeries &amp;d)</argsstring>
        <name>operator-=</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::operator-=</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Subtraction operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Differencing data from signals of irregular length requires handling potential mismatches in size and overlap. This behaves the way a -= operator should logically behave in that situation. That is, because the lhs is where the sum is being accumulated, the size is always controlled by the left hand side of the operator. Any portions of the right hand side that are outside the t0 to <ref refid="classmspass_1_1seismic_1_1_basic_time_series_1af8982109d3caaeee15bb5b3a63b89317" kindref="member">endtime()</ref> of the left hand side are silently discarded. If the start time of the right hand side is greater than t0 or the endtime is less than endtime of the lhs there will be discontinuties in the sum there the ends of the rhs are inside the range of the lhs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>is other signal to subract from this. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>MsPASSError</parametername>
</parameternamelist>
<parameterdescription>
<para>can be thrown if lhs and rhs do not have matching time standards. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="178" column="18" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="110" bodyend="148"/>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1af8982109d3caaeee15bb5b3a63b89317" compoundref="_basic_time_series_8h" startline="77" endline="79">mspass::seismic::BasicTimeSeries::endtime</references>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="243">mspass::seismic::BasicTimeSeries::mlive</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" compoundref="_basic_time_series_8h" startline="251">mspass::seismic::BasicTimeSeries::mt0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" compoundref="_basic_time_series_8h" startline="171" endline="171">mspass::seismic::BasicTimeSeries::npts</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="27">s</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" compoundref="_basic_time_series_8h" startline="72" endline="72">mspass::seismic::BasicTimeSeries::sample_number</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a472074f3074d59f794d18017b010ab81" compoundref="_basic_time_series_8h" startline="174" endline="174">mspass::seismic::BasicTimeSeries::t0</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" compoundref="_basic_time_series_8h" startline="265">mspass::seismic::BasicTimeSeries::tref</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1a81c02e7cc6863d2c4002cb869620a1d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref></type>
        <definition>const CoreTimeSeries mspass::seismic::CoreTimeSeries::operator-</definition>
        <argsstring>(const CoreTimeSeries &amp;other) const</argsstring>
        <name>operator-</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::operator-</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref> <ref refid="classmspass_1_1seismic_1_1_core_time_series" kindref="compound">CoreTimeSeries</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtraction operator.</para>
<para>This operator is implemented in a standard way utilizing operator-=. For data with irregular start and end times that has an important consequence; the operator is not communative. i.e given x an y z=x-y will not yield the same result as z=-(y-x). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="186" column="24" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="156" bodyend="160"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1seismic_1_1_core_time_series_1a8e379678ec0883c59d37612cf5f4f0a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">double</ref></type>
        <definition>double mspass::seismic::CoreTimeSeries::operator[]</definition>
        <argsstring>(size_t const sample) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>mspass::seismic::CoreTimeSeries::operator[]</qualifiedname>
        <param>
          <type><ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">size_t</ref> <ref refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" kindref="member">const</ref></type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a sample from data vector with range checking. Because the data vector is public in this interface this operator is simply an alterative interface to this-&gt;s[sample].</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>SeisppError</parametername>
</parameternamelist>
<parameterdescription>
<para>exception if the requested sample is outside the range of the data. Note this includes an implicit &quot;outside&quot; defined when the contents are marked dead.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample</parametername>
</parameternamelist>
<parameterdescription>
<para>is the integer sample number of data desired. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="198" column="10" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc" bodystart="240" bodyend="251"/>
        <references refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" compoundref="_metadata_8h" startline="445" endline="460">mspass::utility::Metadata::get</references>
        <references refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" compoundref="_basic_time_series_8h" startline="243">mspass::seismic::BasicTimeSeries::mlive</references>
        <references refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" compoundref="_core_time_series_8h" startline="27">s</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Scalar time series data object. </para>
    </briefdescription>
    <detaileddescription>
<para>This data object extends <ref refid="classmspass_1_1seismic_1_1_basic_time_series" kindref="compound">BasicTimeSeries</ref> mainly by adding a vector of scalar data. It uses a Metadata object to contain auxiliary parameters that aren&apos;t essential to define the data object, but which are necessary for some algorithms. <simplesect kind="author"><para>Gary L. Pavlis </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>mspass::seismic::BasicTimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_basic_time_series"/>
      </node>
      <node id="1">
        <label>mspass::seismic::CoreTimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_core_time_series"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>mspass::seismic::TimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_time_series"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>mspass::seismic::TimeSeriesWGaps</label>
        <link refid="classmspass_1_1seismic_1_1_time_series_w_gaps"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
      <node id="3">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>mspass::seismic::BasicTimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_basic_time_series"/>
      </node>
      <node id="1">
        <label>mspass::seismic::CoreTimeSeries</label>
        <link refid="classmspass_1_1seismic_1_1_core_time_series"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>mspass::utility::BasicMetadata</label>
        <link refid="classmspass_1_1utility_1_1_basic_metadata"/>
      </node>
      <node id="3">
        <label>mspass::utility::Metadata</label>
        <link refid="classmspass_1_1utility_1_1_metadata"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" line="16" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/seismic/CoreTimeSeries.h" bodystart="17" bodyend="199"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa288eb54e6fafb8af13f71e2f3dce4a2" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>append_chain</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1adfb9a7a1162b72d5d33e7e3430117611" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>ator</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a02072f2001d400e7f7ab5f9463e236c8" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>BasicTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a8945a16bf52101d89dbc6f7b907b3fd9" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>BasicTimeSeries</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af9aea7916d2b11f9f1e94b7d84b8db23" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>begin</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a20c1da469f6e0a073b291a680425f9e8" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>change_key</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1abaa3b11bec830a2ab4f93e79623af591" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>changed_or_set</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a610962d5ca59e48d1b2833e613bbad1d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>clear_modified</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1a48794c92ef727de958653b7d395f6b5d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>CoreTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1a0cb99b254e48280ff9fd674976e53c4e" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>CoreTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1ae44860d32e7ca37a66eca974546a62ea" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>CoreTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1a4a8b98447f31911e6e18079541ab7b0d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>CoreTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aa96e795f96b5050996d791f5b6f3867d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>dead</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1af31c96c0e2173d7581e1c3a3f8bcfde8" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>dt</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7f1e227ec1acaab97343ecbf47bedac4" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>end</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1af8982109d3caaeee15bb5b3a63b89317" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>endtime</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a096d3ea32cc03c3f9ae9c69cd9ee28ba" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>erase</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ab87672dc6adffed90b0dc9c144219d44" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>force_t0_shift</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1af2b1cac0f295d9ab5fb240b8b5e12539" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5d6876ed25c3f5d93052239ec828a3c5" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>get</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a991516933477580b6b59dd578819df06" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>get_any</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a2631da9d437572ee0781ed9bd96a3ed3" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>get_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad69a5786d997104df560775f4f688b02" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>get_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a78f3a01e1b1deccd84a0833bea4ef462" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>get_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a7ace0c05ebb00b3c383cb8cccd225504" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>get_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa56da98a52f03babd67bf9fb55c40f3a" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>get_string</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a1d49cd81d43cded641b84864081cb74a" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>get_t0shift</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a1e96e8682297fe8b21acf09b4d399cc6" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>is_defined</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a52e2040555616a39b900aa0831c3bd10" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>keys</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1acc56784b2aaadf8223a9e189830ae3dc" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>kill</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a8aae898b7cf2f75d111b3eb6d8184396" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>live</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a8be7decfdbefb7aa8c3d9e977ac26f0b" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>md</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aea80df11992ca2c7ff915aab5fcba6f5" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>mdt</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a4a87cd6a6f8fc5cdbee65cb85958cb2c" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5255fc3ae6accb650f221c9065a92eff" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afa617529be5501b6b059091118a1a51f" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>Metadata</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a7b2e9b878959d376790f09194edc51d9" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>mlive</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad42258d0cd85b4a3e28eb1448cafe62e" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>modified</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aeb40f4223a8ee73e79f9af065372a757" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>mt0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a347b349bb4e1f0e65978dfcd45ae3472" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a0cb0afe9272567b8fd3394f79f46628a" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>nsamp</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1aa4ea5ff317047cb30778eecd272bc8e4" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator*=</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1a7cb0e689d13cc1696eaafc0bbec24754" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator+</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afbd50c491ecc4d42cf2b4213b8bc3327" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator+</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1aac97d69cfcec7f8b80eee2410adc4a6d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator+=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1afadcdb42814abc1448a78d1d9f3d44aa" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator+=</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1a81c02e7cc6863d2c4002cb869620a1d6" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator-</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1afdc1e6ce07e1101b2f33c9b455b3a3b9" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator-=</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1a49e0add931b008600450413c4e0cbd40" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aaf05bc1fe471e194bec093906c1a607c" prot="public" virt="non-virtual" ambiguityscope="mspass::seismic::BasicTimeSeries::"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" prot="public" virt="non-virtual" ambiguityscope="mspass::utility::Metadata::"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator=</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1a8e379678ec0883c59d37612cf5f4f0a5" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>operator[]</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab2162ed3e7349998ee06ace77645bf77" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aec776bbbbf8528903432d9b30d1272d8" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aefee14db8cda9c7143a0eb7bf2d1be1f" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a11ef6cbc1adec7964e2d9c3a4ead15b1" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab3989b1152e9b7b3dcce36aaec89f46d" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1adc016a9bb2288f1f0a7687cfa6844ceb" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa60d283b9eaae245294914557c723c30" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a45c295b33cdbcc297b7429235b81de9a" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1add02049febdc316d70d0fb62e96b2e36" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put_bool</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aafaa017f0e16f37a81a6abdb406a1e08" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put_double</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5fe91d35373564958386f08915b7ce3c" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put_int</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ab1ede27ae9810767832f0879ccbfd234" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put_long</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1aa8402af6778236df398ff0fe25911e21" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put_object</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a5efd5678db951e3517c5667fefe93ddf" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>put_string</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a21faa1455f1b3a0b723e7ee136ac4d2b" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>rtoa</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1ab044edb3fe5fe734cb577a4434f390a2" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>s</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1abe28ca2812a2ac21dd2196385ad106ab" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>sample_number</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a21bbb21d3debe26b9c185dc0c93651d0" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>samprate</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1a97ff6732aa816b0c327c5bf667ffe841" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>set_dt</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a1ca7ba8bcd8337bd49d438664e74966d" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>set_live</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1ae538485ac0aed2f8691477dffce6cda8" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>set_npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1ae90b28cff0bc1997aa65a1693d8562d0" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>set_t0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ac3f8c8200710fe0d3ef211c7c758e864" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>set_tref</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a35bf7426cc825e9b3dcf3226816d8316" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>shift</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a1e83b446d82202d808504429b0257eb0" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>shifted</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a153ca69299a4d70aa0c6e69e8c70a767" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>size</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1ac2755952b5e490ba8ea7469d5d0273c7" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>sync_npts</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a472074f3074d59f794d18017b010ab81" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>t0</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ae79b68bf89b4cd4e6001bbf2c491f539" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>t0shift</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1af749170531556c0c39ba6916057d2b17" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>t0shift_is_valid</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a438b4f6453a4ff2a46de53dfdf3599c2" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>time</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a8bcb6a1e85d833514d7e9bd28a04d3e8" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>time_axis</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a858bde44fbc9801ba833970604c965d1" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>time_is_relative</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1aaf47da6a5d44415cf8a3b70e9a0bc5d5" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>time_is_UTC</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a83c9a758b4a05ebddf09e17373b1e656" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>time_reference</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1ac0f23a3d725302665f4ff0c576b39237" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>timetype</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1abb88ddef3bab3b3205dfe6c6cfdb91aa" prot="protected" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>tref</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1ad5cd3bfc81c7fccd83bbb30ef1c2774c" prot="public" virt="non-virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>type</name></member>
      <member refid="classmspass_1_1utility_1_1_basic_metadata_1a1d7a9ab1e25e01694cc733ad2b98c6b7" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>~BasicMetadata</name></member>
      <member refid="classmspass_1_1seismic_1_1_basic_time_series_1a2839e2405b168e0f1ad4d236f31eac8e" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>~BasicTimeSeries</name></member>
      <member refid="classmspass_1_1seismic_1_1_core_time_series_1a89c257008450ceb6d96e0cdb95e24673" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>~CoreTimeSeries</name></member>
      <member refid="classmspass_1_1utility_1_1_metadata_1a6d06560c0b169240031c6a274dc7990f" prot="public" virt="virtual"><scope>mspass::seismic::CoreTimeSeries</scope><name>~Metadata</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
