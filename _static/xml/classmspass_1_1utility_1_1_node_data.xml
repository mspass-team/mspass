<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classmspass_1_1utility_1_1_node_data" kind="class" language="C++" prot="public">
    <compoundname>mspass::utility::NodeData</compoundname>
    <includes refid="_processing_history_8h" local="no">ProcessingHistory.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_node_data_1a3dab2773c306f1d9977dccb455beec59" prot="public" static="no" mutable="no">
        <type>mspass::utility::ProcessingStatus</type>
        <definition>mspass::utility::ProcessingStatus mspass::utility::NodeData::status</definition>
        <argsstring></argsstring>
        <name>status</name>
        <qualifiedname>mspass::utility::NodeData::status</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>status definition of the parent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="146" column="37" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_node_data_1a0f0df95910b9712e36d3a8389c0c9f38" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mspass::utility::NodeData::uuid</definition>
        <argsstring></argsstring>
        <name>uuid</name>
        <qualifiedname>mspass::utility::NodeData::uuid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>uuid of the parent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="148" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_node_data_1aa7c6f56ceca095d0af31f456d75954a4" prot="public" static="no" mutable="no">
        <type>mspass::utility::AtomicType</type>
        <definition>mspass::utility::AtomicType mspass::utility::NodeData::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>mspass::utility::NodeData::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum can be used to track changes in data type. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="150" column="31" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int mspass::utility::NodeData::stage</definition>
        <argsstring></argsstring>
        <name>stage</name>
        <qualifiedname>mspass::utility::NodeData::stage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integer count of the number of processing steps applied to create this parent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="152" column="7" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_node_data_1a040189091bc8458cc84b7a3781856643" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mspass::utility::NodeData::algorithm</definition>
        <argsstring></argsstring>
        <name>algorithm</name>
        <qualifiedname>mspass::utility::NodeData::algorithm</qualifiedname>
        <briefdescription>
<para>Name of algorithm algorithm applied at this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>We use the concept that every processing algorithm has a name keyword that togther with an id and/or instance defines a unique definition of the algorithm and a set of input parameters that define the algorithm&apos;s behavior. Note this is the algorithm that creates the uuid also stored in this struct (class) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="161" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmspass_1_1utility_1_1_node_data_1aa51f302e3e070fd072255e1d1af9073f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mspass::utility::NodeData::algid</definition>
        <argsstring></argsstring>
        <name>algid</name>
        <qualifiedname>mspass::utility::NodeData::algid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>id string to identify this instance of algorithm.</para>
<para>Only assumption is that the combination of algorithm and id provide a unique specification of a particular instance of an algorithm. That means some algorithm and a particular set of control parameters that control the outcome of the algorithm. In MsPASS this is usually the ObjectID string of saved parameters in MongoDB, but users can use any method they wish to describe a unique combination of parameters and an algorithm implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="171" column="15" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="171" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_node_data_1a5409c41f5c4c9386607d4bb7a4a147c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::NodeData::NodeData</definition>
        <argsstring>()</argsstring>
        <name>NodeData</name>
        <qualifiedname>mspass::utility::NodeData::NodeData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="174" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_node_data_1acfbcc6b7314832aaebd18f97ff56dc88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mspass::utility::NodeData::NodeData</definition>
        <argsstring>(const NodeData &amp;parent)</argsstring>
        <name>NodeData</name>
        <qualifiedname>mspass::utility::NodeData::NodeData</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="175" column="3" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_node_data_1aea3dd5e2be3cb06ea13e22c8bdeb6052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> &amp;</type>
        <definition>NodeData &amp; mspass::utility::NodeData::operator=</definition>
        <argsstring>(const NodeData &amp;parent)</argsstring>
        <name>operator=</name>
        <qualifiedname>mspass::utility::NodeData::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="176" column="12" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="52" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_node_data_1a1164a08d7d643ce1dcaa492f6f44218a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::NodeData::operator==</definition>
        <argsstring>(const NodeData &amp;other)</argsstring>
        <name>operator==</name>
        <qualifiedname>mspass::utility::NodeData::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="177" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="65" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classmspass_1_1utility_1_1_node_data_1a7c68693ce88621835e5277e6256edc99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mspass::utility::NodeData::operator!=</definition>
        <argsstring>(const NodeData &amp;other)</argsstring>
        <name>operator!=</name>
        <qualifiedname>mspass::utility::NodeData::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classmspass_1_1utility_1_1_node_data" kindref="compound">NodeData</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="178" column="8" bodyfile="/home/runner/work/mspass/mspass/cxx/src/lib/utility/ProcessingHistory.cc" bodystart="78" bodyend="81"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classmspass_1_1utility_1_1_node_data_1adc92573476dc839e02e8d2085401b7aa" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mspass::utility::NodeData::serialize</definition>
        <argsstring>(Archive &amp;ar, const unsigned int version)</argsstring>
        <name>serialize</name>
        <qualifiedname>mspass::utility::NodeData::serialize</qualifiedname>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="182" column="13" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="182" bodyend="190"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Holds properties of data used as input to algorithm that created this object. </para>
    </briefdescription>
    <detaileddescription>
<para>The implementation here uses a multimap to define parents of each uuid in a history chain. This class is used mainly internally for <ref refid="classmspass_1_1utility_1_1_processing_history" kindref="compound">ProcessingHistory</ref> to maintain that data. It will be visible to C++ programs but will not be visible in python. One of these entries is created for each parent data used to create the current data. </para>
    </detaileddescription>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" line="142" column="1" bodyfile="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/ProcessingHistory.h" bodystart="143" bodyend="191"/>
    <listofallmembers>
      <member refid="classmspass_1_1utility_1_1_node_data_1aa51f302e3e070fd072255e1d1af9073f" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>algid</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1a040189091bc8458cc84b7a3781856643" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>algorithm</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1a5409c41f5c4c9386607d4bb7a4a147c4" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>NodeData</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1acfbcc6b7314832aaebd18f97ff56dc88" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>NodeData</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1a7c68693ce88621835e5277e6256edc99" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>operator!=</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1aea3dd5e2be3cb06ea13e22c8bdeb6052" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>operator=</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1a1164a08d7d643ce1dcaa492f6f44218a" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>operator==</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1adc92573476dc839e02e8d2085401b7aa" prot="private" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>serialize</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1a972bd00dc85cae2e490833225f53e282" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>stage</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1a3dab2773c306f1d9977dccb455beec59" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>status</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1aa7c6f56ceca095d0af31f456d75954a4" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>type</name></member>
      <member refid="classmspass_1_1utility_1_1_node_data_1a0f0df95910b9712e36d3a8389c0c9f38" prot="public" virt="non-virtual"><scope>mspass::utility::NodeData</scope><name>uuid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
